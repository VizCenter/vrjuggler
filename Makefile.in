# -----------------------------------------------------------------------------
# $Id$
#
# Base Makefile.in for VR Juggler.  It requires GNU make.
# -----------------------------------------------------------------------------
# Targets are:
#
# all             - Build everything.
# all-abi         - Build everything using all supported ABIs.
# dbg             - Build the debugging, static copy of the libraries.
# ddso            - Build the debugging, dynamic shared object version of the
#                   libraries.
# opt             - Build the optimized, static version of the libraries.
# dso             - Build the dynamic shared object version of the libraries.
# obj             - Build the object files using the default value for
#                   ${OBJDIR}.
# gui             - Build the Java-based configuration GUI.
#
# links           - Define links (for developer use only) that provide
#                   functionality allowing the use of the $VJ_BASE_DIR
#                   environment variable.
# clean-links     - Remove the symlinks created by 'links'.
#
# static-libs     - Build the static version of the libraries.  This target
#                   depends on a correct value for ${LIBDIR} (that does not
#                   have a default value).
# shared-libs     - Build the dynamic shared version of the libraries.  This
#                   target depends on a correct value for ${LIBDIR} (that does
#                   not have a default value).
#
# install-all     - Install all versions of the libraries, all header files,
#                   the Data directory, the configuration GUI and the test
#                   code.
# install-all-abi - Install every ABI possible on the target platform.
# install         - Install the libraries, all header files, the Data
#                   directory, the configuration GUI and the test code.
# install-dbg     - Install the debugging, static version of the libraries.
# install-ddso    - Install the debugging, dynamic shared object version of
#                   the libraries.
# install-opt     - Install the optimized, static version of the libraries.
# install-dso     - Install the dynamic shared object version of the libraries.
# install-headers - Install only the header files.
# install-test    - Install only the test code.
# install-data    - Install only the Data directory.
# install-gui     - Install only the configuration GUI.
#
# depend          - Recursively build the dependencies for the source files.
# newdepend       - Recursively (and forcibly) rebuild the dependencies for
#                   the source files.
#
# clean           - Clean up everything (uses common 'clean' target).
# clobber         - Clean up everything and remove the directories containing
#                   the compiled libraries and its object files.
#
# info            - Print out information about the build process that may be
#                   useful to the user.
#
# The default target is 'dbg'.  'install' will install the debugging, static
# version of the libraries.
# -----------------------------------------------------------------------------

default: dbg

# Define ${_LOCAL_CLEAN} to inform the shared clean target that there is a
# '_clean' target to be run besides the standard 'clean' target.  This must
# be done before Makefile.base is inlcuded (which in turn includes vj.clean.mk)
# so that the variable will be defined when parsing reaches the test for it.
_LOCAL_CLEAN	= 1

# Include common definitions.
include @topdir@/Makefile.base

# Variables whose values are specific to this file.
includedir	= @includedir@
instlinks	= ${topdir}/instlinks
srcdir		= @srcdir@
top_srcdir	= @top_srcdir@
VJROOT		= ${top_srcdir}
VJ_SRCDIR	= @VJ_SRCDIR@
WORKDIR		= ${topdir}

# Extra compiler and linker options needed only by this file.
OPT_FLAGS	= -O @OPT_FLAGS@

# SGI-specific dynamic-shared-object information.
DSOREGFILE	= @DSOREGFILE@
DSOVERSION	= @DSOVERSION@
DSOVERSIONOPTS	= @DSOVERSIONOPTS@

# Append ${DSOVERSIONOPTS} to ${LDOPTS} so that those extra options (if any)
# will be used by ${LD}.
LDOPTS		:= ${LDOPTS} ${DSOVERSIONOPTS}

# State whether or not to build the configuration editor GUI.
BUILD_GUI	= @BUILD_GUI@

# Include library building and recursive target code.
include ${MKPATH}/vj.lib.mk
include ${MKPATH}/vj.rec.mk

# =============================================================================
# Build and installation directory naming and permission information.
# =============================================================================
_DEBUG_DIR	= debug
_OPT_DIR	= opt
_DEFAULT_DIR	= ${_DEBUG_DIR}

_UMASK		= 002
_FILE_PERMS	= 664
_EXEC_PERMS	= 775
_GROUP_NAME	= c2dev

# ------------------------------------------------
# Object file build and installation directories.
# ------------------------------------------------
_BUILDDIR_BASE	= ${topdir}/obj
_BUILDDIR	= ${_BUILDDIR_BASE}/${PLATFORM}/${ABI}/${ISA}
_DBG_BUILDDIR	= ${_BUILDDIR}/${_DEBUG_DIR}
_OPT_BUILDDIR	= ${_BUILDDIR}/${_OPT_DIR}

# --------------------------------------------
# Library build and installation directories.
# --------------------------------------------

# ${_install_libdir_abs} is the full path to the base directory (minus any
# debugging or optimized subdirectories) where the libraries will be
# installed.  ${_install_libdir_rel} is only the ${ISA} subdirectory of the
# full path.
_install_libdir_abs = ${libdir}${LIBBITSUF}/${ISA}
_install_libdir_rel = ./${ISA}

# ${_LIBDIR_NAME} is the name of the library directory including an ABI suffix
# if applicable.
_LIBDIR_NAME	= lib${LIBBITSUF}

# ${_LIBDIR_BASE} is the base directory where the libraries will be built.
_LIBDIR_BASE	= ${topdir}/${_LIBDIR_NAME}

# ${_LIBDIR} is the first-level subdirectory of ${_LIBDIR_BASE} that is
# named by the instruction set being used (${ISA}).
_LIBDIR		= ${_LIBDIR_BASE}/${ISA}

# ${_DBG_LIBDIR} and ${_OPT_LIBDIR} are the directories where the libraries
# are actually built.  The first is for a debugging copy of the libraries and
# the second is for an optimized version of the libraries.
_DBG_LIBDIR	= ${_LIBDIR}/${_DEBUG_DIR}
_OPT_LIBDIR	= ${_LIBDIR}/${_OPT_DIR}

SHLIB_MAJOR	= 1
SHLIB_MINOR	= 0

# Full names of the static and dynamic versions of the libraries.
VJ_LIB_STATIC	= ${VJ_LIBRARY}.a
VJ_LIB_DYNAMIC	= ${VJ_LIBRARY}.@SHAREDLIB_EXT@

GL_API		= @OPENGL_API@
GL_LIB_STATIC	= ${GL_LIBRARY}.a
GL_LIB_DYNAMIC	= ${GL_LIBRARY}.@SHAREDLIB_EXT@

PF_API		= @PERFORMER_API@
PF_LIB_STATIC	= ${PF_LIBRARY}.a
PF_LIB_DYNAMIC	= ${PF_LIBRARY}.@SHAREDLIB_EXT@

# =============================================================================
# Lists used for various types of recursion.
# =============================================================================

# Subdirectories used for recursion through the source tree.
SUBDIRS		= Math Config Kernel Environment Performance Input	\
                  SharedMem Sync Threads

# Subdirectories used for recursion through the test source tree when
# installing.
TEST_SUBDIRS	= . CfgTest Matrix Quat Sync input ogl ogl/cubes	\
                  ogl/simpleGlove ogl/wand pfNav testDynamicCastSTL threads

# The list of ABIs supported on this platform.
ABI_LIST	= @ABI_LIST@

# =============================================================================
# Library targets.  The default is 'dbg' as defined above.  The steps for 
# building the 'dbg', 'ddso', 'opt' and 'dso' are as follows:
#
#    1) Build dependencies (if necessary).
#    2) Compile all object files that are out of date.
#    3) Build the Java-based config editor (if necessary).
#    4) Compile the actual libraries from the object files.
#    5) Set up the developer installation links.
#
# These four particular targets are wrapper targets for simpler targets with
# an underscore ('_') prepended to the target name.  It is in these simpler
# targets that the compilation is done.  The wrapper targets define the order
# in which things take place.
# =============================================================================

# Build all four versions of the libraries.
all: beforebuild _opt _dso _dbg _ddso _check_gui
	@echo "------------------------------------------------"
	@echo "Creating symlinks in ${_LIBDIR}"
	@echo "------------------------------------------------"
	cd ${_LIBDIR} &&						\
          rm -f ${VJ_LIB_STATIC} && ln -s ${_DEFAULT_DIR}/${VJ_LIB_STATIC} ./
	cd ${_LIBDIR} &&						\
          rm -f ${VJ_LIB_DYNAMIC} && ln -s ${_DEFAULT_DIR}/${VJ_LIB_DYNAMIC} ./
ifeq (${GL_API}, Y)
	cd ${_LIBDIR} &&						\
          rm -f ${GL_LIB_STATIC} && ln -s ${_DEFAULT_DIR}/${GL_LIB_STATIC} ./
	cd ${_LIBDIR} &&						\
          rm -f ${GL_LIB_DYNAMIC} && ln -s ${_DEFAULT_DIR}/${GL_LIB_DYNAMIC} ./
endif
ifeq (${PF_API}, Y)
	cd ${_LIBDIR} &&						\
          rm -f ${PF_LIB_STATIC} && ln -s ${_DEFAULT_DIR}/${PF_LIB_STATIC} ./
	cd ${_LIBDIR} &&						\
          rm -f ${PF_LIB_DYNAMIC} && ln -s ${_DEFAULT_DIR}/${PF_LIB_DYNAMIC} ./
endif
	${MAKE} afterbuild

# Build all ABIs in ${ABI_LIST}.
all-abi:
	@abi_list='${ABI_LIST}' ;					\
          for abi in $$abi_list ; do					\
              echo "------------------------------------------------" ;	\
              echo "Building libraries using $$abi" ;			\
              echo "------------------------------------------------" ;	\
              echo "${MAKE} vjABI=$$abi all" ;				\
              ${MAKE} vjABI=$$abi all ;					\
          done

# Things to do before the object files and library are built.
beforebuild: depend

# Things to do after the object files and library are built.
afterbuild: links
	@echo "------------------------------------------------"
	@echo "Library build complete"
	@echo "------------------------------------------------"

# ---------------------------------------------
# Make the debugging version of the libraries.
# ---------------------------------------------
dbg: beforebuild _dbg _check_gui afterbuild

_dbg: _build_dbg
	${MAKE} BASE_OBJDIR="${_DBG_BUILDDIR}" LIBDIR="${_DBG_LIBDIR}"	\
          ${VJ_LIB_STATIC}
ifeq (${GL_API}, Y)
	${MAKE} BASE_OBJDIR="${_DBG_BUILDDIR}/GL"			\
          LIBDIR="${_DBG_LIBDIR}" ${GL_LIB_STATIC}
endif
ifeq (${PF_API}, Y)
	${MAKE} BASE_OBJDIR="${_DBG_BUILDDIR}/Pf"			\
          LIBDIR="${_DBG_LIBDIR}" ${PF_LIB_STATIC}
endif

# ------------------------------------------------------------
# Make the debugging version of the libraries that uses DSOs.
# ------------------------------------------------------------
ddso: beforebuild _ddso _check_gui afterbuild

_ddso: _build_dbg
	${MAKE} BASE_OBJDIR="${_DBG_BUILDDIR}" LIBDIR="${_DBG_LIBDIR}"	\
          ${VJ_LIB_DYNAMIC}
ifeq (${GL_API}, Y)
	${MAKE} BASE_OBJDIR="${_DBG_BUILDDIR}/GL"			\
          LIBDIR="${_DBG_LIBDIR}" ${GL_LIB_DYNAMIC}
endif
ifeq (${PF_API}, Y)
	${MAKE} BASE_OBJDIR="${_DBG_BUILDDIR}/Pf"			\
          LIBDIR="${_DBG_LIBDIR}" ${PF_LIB_DYNAMIC}
endif

# ---------------------------------------------
# Make the optimized version of the libraries.
# ---------------------------------------------
opt: beforebuild _opt _check_gui afterbuild

_opt: _build_opt
	${MAKE} BASE_OBJDIR="${_OPT_BUILDDIR}" LIBDIR="${_OPT_LIBDIR}"	\
          ${VJ_LIB_STATIC}
ifeq (${GL_API}, Y)
	${MAKE} BASE_OBJDIR="${_OPT_BUILDDIR}/GL"			\
          LIBDIR="${_OPT_LIBDIR}" ${GL_LIB_STATIC}
endif
ifeq (${PF_API}, Y)
	${MAKE} BASE_OBJDIR="${_OPT_BUILDDIR}/Pf"			\
          LIBDIR="${_OPT_LIBDIR}" ${PF_LIB_STATIC}
endif

# ------------------------------------------------------------
# Make the optimized version of the libraries that uses DSOs.
# ------------------------------------------------------------
dso: beforebuild _dso _check_gui afterbuild

_dso: _build_opt
	${MAKE} BASE_OBJDIR="${_OPT_BUILDDIR}" LIBDIR="${_OPT_LIBDIR}"	\
          ${VJ_LIB_DYNAMIC}
ifeq (${GL_API}, Y)
	${MAKE} BASE_OBJDIR="${_OPT_BUILDDIR}/GL"			\
          LIBDIR="${_OPT_LIBDIR}" ${GL_LIB_DYNAMIC}
endif
ifeq (${PF_API}, Y)
	${MAKE} BASE_OBJDIR="${_OPT_BUILDDIR}/Pf"			\
          LIBDIR="${_OPT_LIBDIR}" ${PF_LIB_DYNAMIC}
endif

# ---------------------------------------------------------
# Build the object files with the debugging flags enabled.
# ---------------------------------------------------------
_build_dbg:
	@echo "------------------------------------------------"
	@echo "Making DBG version of libraries"
	@echo "------------------------------------------------"
	${scriptdir}/mkinstalldirs ${_DBG_BUILDDIR}
	@echo "------------------------------------------------"
	@echo "Building object files"
	@echo "------------------------------------------------"
	${MAKE} RECTARGET="dbg" OPTIMIZER="-g"				\
          BASE_OBJDIR="${_DBG_BUILDDIR}" recursive

# ------------------------------------------------------------
# Build the object files with the optimization flags enabled.
# ------------------------------------------------------------
_build_opt:
	@echo "------------------------------------------------"
	@echo "Making OPT version of libraries"
	@echo "------------------------------------------------"
	${scriptdir}/mkinstalldirs ${_OPT_BUILDDIR}
	@echo "------------------------------------------------"
	@echo "Building object files"
	@echo "------------------------------------------------"
	${MAKE} RECTARGET="opt" OPTIMIZER="${OPT_FLAGS}"		\
          BASE_OBJDIR="${_OPT_BUILDDIR}" recursive

# --------------------------------------------------------------------
# Build only the object files using the default values for ${OBJDIR}.
# --------------------------------------------------------------------
obj:
	@echo "------------------------------------------------"
	@echo "Making library object files"
	@echo "------------------------------------------------"
	${MAKE} RECTARGET="$@" recursive
	@echo "------------------------------------------------"
	@echo "Object files built"
	@echo "------------------------------------------------"

# -----------------------
# Dependency generation.
# -----------------------
depend: .depend_done

newdepend:
	@echo "------------------------------------------------"
	@echo "Regenerating dependencies"
	@echo "------------------------------------------------"
	-@rm -f .depend_done
	${MAKE} RECTARGET="$@" recursive
	@touch .depend_done

.depend_done:
	@echo "------------------------------------------------"
	@echo "Generating dependencies"
	@echo "------------------------------------------------"
	${MAKE} RECTARGET="depend" recursive
	@touch .depend_done

# -----------------------------------------------
# Construct the static version of the libraries.
# -----------------------------------------------
static-libs: ${VJ_LIB_STATIC} ${PF_LIB_STATIC} ${GL_LIB_STATIC}

${VJ_LIB_STATIC} ${PF_LIB_STATIC} ${GL_LIB_STATIC}:
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	${scriptdir}/mkinstalldirs ${LIBDIR}
	${MAKE} LIBDIR="${LIBDIR}" LIBNAME="$@" OBJS="${OBJDIR}/*.o" static-lib
	cd ${_LIBDIR_BASE} && ln -sf ${LIBDIR}/$@ ./
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"

# -------------------------------------------------------
# Construct the dynamic shared version of the libraries.
# -------------------------------------------------------
shared-libs: ${VJ_LIB_DYNAMIC} ${PF_LIB_DYNAMIC} ${GL_LIB_DYNAMIC}

${VJ_LIB_DYNAMIC} ${PF_LIB_DYNAMIC} ${GL_LIB_DYNAMIC}:
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	${scriptdir}/mkinstalldirs ${LIBDIR}
	${MAKE} LIBDIR="${LIBDIR}" LIBNAME="$@" OBJS="${OBJDIR}/*.o" shared-lib
	cd ${_LIBDIR_BASE} && ln -sf ${LIBDIR}/$@ ./
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"

# =============================================================================
# Java-based configuration editor targets.
# =============================================================================

# This is a wrapper for the 'gui' target that checks for the mere existence
# of the JAR file before compiling the GUI code.
_check_gui:
	@if [ ! -e ${topdir}/GUI/VjControl.jar ] ; then	\
            ${MAKE} gui ;				\
        fi

# Build the Java-based configuration GUI.
gui:
ifeq (${BUILD_GUI}, Y)
	@echo "------------------------------------------------"
	@echo "Building GUI"
	@echo "------------------------------------------------"
	cd GUI && ${MAKE} all
	@echo "------------------------------------------------"
	@echo "GUI done"
	@echo "------------------------------------------------"
else
	@echo "------------------------------------------------"
	@echo "GUI cannot be built without javac"
	@echo "------------------------------------------------"
endif

# =============================================================================
# Make links for developer use that provide the needed functionality for
# the $VJ_BASE_DIR environment variable to be used when needed.  $VJ_BASE_DIR
# should be set to ${instlinks}.
# =============================================================================
links:
	@echo "------------------------------------------------"
	@echo "Setting up developer installation links"
	@echo "------------------------------------------------"
	${scriptdir}/mkinstalldirs ${instlinks}
	${scriptdir}/mkinstalldirs ${instlinks}/include
	cd ${instlinks}/include &&					\
          dir_list='${SUBDIRS}' ;					\
            for dir in $$dir_list ; do					\
                rm -f ./$$dir ;						\
                ln -s ${VJROOT_ABS}/$$dir ./$$dir ;			\
            done
	cd ${instlinks} && rm -f ./${_LIBDIR_NAME} &&			\
          ln -s ${_LIBDIR_BASE} ./${_LIBDIR_NAME}
	cd ${instlinks} && rm -f ./Data && ln -s ${VJROOT_ABS}/Data ./Data
	cd ${instlinks}/include && ln -sf ${VJROOT_ABS}/vjConfig.h ./vjConfig.h
	cd ${instlinks}/include && ln -sf ${topdir}/vjDefines.h ./vjDefines.h
	${scriptdir}/mkinstalldirs ${instlinks}/bin
	cd ${instlinks}/bin && ln -sf ${topdir}/GUI/VjControl.jar ./
	cd ${instlinks}/bin && ln -sf ${VJROOT_ABS}/GUI/vjcontrol ./vjcontrol
	@echo "\n\n"
	@echo "---------------------------------------------------------------"
	@echo 'You should now set $$VJ_BASE_DIR to:'
	@cd ${instlinks} && echo "  `pwd`"
	@echo "---------------------------------------------------------------"

# Remove the links in ${instlinks}.
clean-links:
	@echo "------------------------------------------------"
	@echo "Removing developer installation links"
	@echo "------------------------------------------------"
	rm -rf ${instlinks}

# =============================================================================
# Installation targets.  The default (what is done by 'install') is to install
# the static debugging version of the libraries.  The steps taken for a full
# installation are:
#
#     1) Ensure that everything is built.
#     2) Create the installation directory.
#     3) Install the libraries.
#     4) Install the header files.
#     5) Install the test programs.
#     6) Install the contents of the Data directory.
#     7) Install the Java-based config editor (if possible).
# =============================================================================

# Steps to take before beginning the installation process.
beforeinstall:
	${scriptdir}/mkinstalldirs ${prefix}
	${MTREE_CMD} -Ude -f ${mtreedir}/VJ.install.dist -p ${prefix}

# Steps to take after the installation process is complete.
afterinstall:
	@echo "------------------------------------------------"
	@echo "Library installation complete"
	@echo "------------------------------------------------"

# Do a full installation all versions of the libraries and the associated
# files.
install-all: beforeinstall install-opt install-dso install-dbg		\
             install-ddso install-headers install-test install-data	\
             install-gui
	@echo "------------------------------------------------"
	@echo "Creating symlinks in ${_install_libdir_abs}"
	@echo "------------------------------------------------"
	cd ${_install_libdir_abs} && umask ${_UMASK} &&			\
          rm -f ${VJ_LIB_STATIC} && ln -s ${_DEFAULT_DIR}/${VJ_LIB_STATIC} ./
	cd ${_install_libdir_abs} && umask ${_UMASK} &&			\
          rm -f ${VJ_LIB_DYNAMIC} && ln -s ${_DEFAULT_DIR}/${VJ_LIB_DYNAMIC} ./
ifeq (${GL_API}, Y)
	cd ${_install_libdir_abs} && umask ${_UMASK} &&			\
          rm -f ${GL_LIB_STATIC} && ln -s ${_DEFAULT_DIR}/${GL_LIB_STATIC} ./
	cd ${_install_libdir_abs} && umask ${_UMASK} &&			\
          rm -f ${GL_LIB_DYNAMIC} && ln -s ${_DEFAULT_DIR}/${GL_LIB_DYNAMIC} ./
endif
ifeq (${PF_API}, Y)
	cd ${_install_libdir_abs} && umask ${_UMASK} &&			\
          rm -f ${PF_LIB_STATIC} && ln -s ${_DEFAULT_DIR}/${PF_LIB_STATIC} ./
	cd ${_install_libdir_abs} && umask ${_UMASK} &&			\
          rm -f ${PF_LIB_DYNAMIC} && ln -s ${_DEFAULT_DIR}/${PF_LIB_DYNAMIC} ./
endif
	${MAKE} afterinstall

# Do a full installation of all versions of the libraries built in each of the
# ABIs in ${ABI_LIST}.
install-all-abi:
	@abi_list='${ABI_LIST}' ;					\
          for abi in $$abi_list ; do					\
              echo "------------------------------------------------" ;	\
              echo "Installing $$abi version of libraries" ;		\
              echo "------------------------------------------------" ;	\
              ${MAKE} vjABI=$$abi install-all ;				\
          done
	@echo "------------------------------------------------"
	@echo "install-all-abi done"
	@echo "------------------------------------------------"

# Do a full installation of the static debugging version of the libraries.
install: beforeinstall install-dbg install-headers install-test		\
         install-data install-gui afterinstall

# ------------------------------------------------------------
# Install only the static debugging version of the libraries.
# ------------------------------------------------------------
install-dbg: dbg
	@echo "------------------------------------------------"
	@echo "Installing static debugging libraries"
	@echo "------------------------------------------------"
	${MTREE_CMD} -Ude -p ${prefix}					\
          -f ${mtreedir_os}/VJ.lib${LIBBITSUF}${ISA}.dist
	${INSTALL} -m ${_FILE_PERMS} -g ${_GROUP_NAME}			\
          ${_DBG_LIBDIR}/${VJ_LIB_STATIC} ${_install_libdir_abs}/${_DEBUG_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_DEBUG_DIR}/${VJ_LIB_STATIC} ./
ifeq (${GL_API}, Y)
	${INSTALL} -m ${_FILE_PERMS} -g ${_GROUP_NAME}			\
          ${_DBG_LIBDIR}/${GL_LIB_STATIC} ${_install_libdir_abs}/${_DEBUG_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_DEBUG_DIR}/${GL_LIB_STATIC} ./
endif
ifeq (${PF_API}, Y)
	${INSTALL} -m ${_FILE_PERMS} -g ${_GROUP_NAME}			\
          ${_DBG_LIBDIR}/${PF_LIB_STATIC} ${_install_libdir_abs}/${_DEBUG_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_DEBUG_DIR}/${PF_LIB_STATIC} ./
endif

# -------------------------------------------------------------
# Install only the dynamic debugging version of the libraries.
# -------------------------------------------------------------
install-ddso: ddso
	@echo "------------------------------------------------"
	@echo "Installing dynamic debugging libraries"
	@echo "------------------------------------------------"
	${MTREE_CMD} -Ude -p ${prefix}					\
          -f ${mtreedir_os}/VJ.lib${LIBBITSUF}${ISA}.dist
	${INSTALL} -m ${_EXEC_PERMS} -g ${_GROUP_NAME}			\
          ${_DBG_LIBDIR}/${VJ_LIB_DYNAMIC} ${_install_libdir_abs}/${_DEBUG_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_DEBUG_DIR}/${VJ_LIB_DYNAMIC} ./
ifeq (${GL_API}, Y)
	${INSTALL} -m ${_EXEC_PERMS} -g ${_GROUP_NAME}			\
          ${_DBG_LIBDIR}/${GL_LIB_DYNAMIC} ${_install_libdir_abs}/${_DEBUG_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_DEBUG_DIR}/${GL_LIB_DYNAMIC} ./
endif
ifeq (${PF_API}, Y)
	${INSTALL} -m ${_EXEC_PERMS} -g ${_GROUP_NAME}			\
          ${_DBG_LIBDIR}/${PF_LIB_DYNAMIC} ${_install_libdir_abs}/${_DEBUG_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_DEBUG_DIR}/${PF_LIB_DYNAMIC} ./
endif

# ------------------------------------------------------------
# Install only the static optimized version of the libraries.
# ------------------------------------------------------------
install-opt: opt
	@echo "------------------------------------------------"
	@echo "Installing static optimized libraries"
	@echo "------------------------------------------------"
	${MTREE_CMD} -Ud -p ${prefix}					\
          -f ${mtreedir_os}/VJ.lib${LIBBITSUF}${ISA}.dist
	${INSTALL} -m ${_FILE_PERMS} -g ${_GROUP_NAME}			\
          ${_OPT_LIBDIR}/${VJ_LIB_STATIC} ${_install_libdir_abs}/${_OPT_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_OPT_DIR}/${VJ_LIB_STATIC} ./
ifeq (${GL_API}, Y)
	${INSTALL} -m ${_FILE_PERMS} -g ${_GROUP_NAME}			\
          ${_OPT_LIBDIR}/${GL_LIB_STATIC} ${_install_libdir_abs}/${_OPT_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_OPT_DIR}/${GL_LIB_STATIC} ./
endif
ifeq (${PF_API}, Y)
	${INSTALL} -m ${_FILE_PERMS} -g ${_GROUP_NAME}			\
          ${_OPT_LIBDIR}/${PF_LIB_STATIC} ${_install_libdir_abs}/${_OPT_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_OPT_DIR}/${PF_LIB_STATIC} ./
endif

# -------------------------------------------------------------
# Install only the dynamic optimized version of the libraries.
# -------------------------------------------------------------
install-dso: dso
	@echo "------------------------------------------------"
	@echo "Installing dynamic optimizied libraries"
	@echo "------------------------------------------------"
	${MTREE_CMD} -Ude -p ${prefix}					\
          -f ${mtreedir_os}/VJ.lib${LIBBITSUF}${ISA}.dist
	${INSTALL} -m ${_EXEC_PERMS} -g ${_GROUP_NAME}			\
          ${_OPT_LIBDIR}/${VJ_LIB_DYNAMIC} ${_install_libdir_abs}/${_OPT_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_OPT_DIR}/${VJ_LIB_DYNAMIC} ./
ifeq (${GL_API}, Y)
	${INSTALL} -m ${_EXEC_PERMS} -g ${_GROUP_NAME}			\
          ${_OPT_LIBDIR}/${GL_LIB_DYNAMIC} ${_install_libdir_abs}/${_OPT_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_OPT_DIR}/${GL_LIB_DYNAMIC} ./
endif
ifeq (${PF_API}, Y)
	${INSTALL} -m ${_EXEC_PERMS} -g ${_GROUP_NAME}			\
          ${_OPT_LIBDIR}/${PF_LIB_DYNAMIC} ${_install_libdir_abs}/${_OPT_DIR}/
	cd ${libdir}${LIBBITSUF} && umask ${_UMASK} &&			\
          ln -sf ${_install_libdir_rel}/${_OPT_DIR}/${PF_LIB_DYNAMIC} ./
endif

# Install the header files.
install-headers:
	@echo "------------------------------------------------"
	@echo "Installing header files"
	@echo "------------------------------------------------"
	${MTREE_CMD} -Ude -f ${mtreedir}/VJ.include.dist -p ${prefix}
	${MAKE} RECTARGET="install" recursive
	@cat ${VJROOT_ABS}/vjConfig.h |					\
            sed -e 's/^#ifdef HAVE_CONFIG_H//'				\
                -e 's/^#endif..*HAVE_CONFIG_H.*$$//' >./vjConfig.tmp
	${INSTALL} -m ${_FILE_PERMS} -g ${_GROUP_NAME}			\
          ./vjConfig.tmp ${includedir}/vjConfig.h
	@-rm -f ./vjConfig.tmp
	${INSTALL} -m ${_FILE_PERMS} -g ${_GROUP_NAME}			\
          ${topdir}/vjDefines.h ${includedir}

# Install the test programs.
install-test:
	@echo "------------------------------------------------"
	@echo "Installing test programs"
	@echo "------------------------------------------------"
	${MTREE_CMD} -Ude -f ${mtreedir}/VJ.test.dist -p ${prefix}
	${scriptdir}/install-src.pl -i ${top_srcdir}/test		\
          -m ${_FILE_PERMS} -g ${_GROUP_NAME} -o ${prefix}/test
	${scriptdir}/makefiles-gen.pl --CXX="${CXX}" --DEFS="${DEFS}"	\
          --CPPFLAGS="${CPPFLAGS}" --CXXFLAGS="${CXXFLAGS}" 		\
          --INCLUDES="@INCLUDES@" --startdir="${top_srcdir}/test" 	\
          --SUBDIRS="${TEST_SUBDIRS}" --mode="${_FILE_PERMS}"		\
          --gname="${_GROUP_NAME}" --srcdir="."				\
          --prefix="${prefix}/test"					\
          --TEST_VJ_LIBS_BASIC='@TEST_VJ_LIBS_BASIC_SUBST@'		\
          --TEST_VJ_LIBS_GL='@TEST_VJ_LIBS_GL@'				\
          --TEST_VJ_LIBS_PF='@TEST_VJ_LIBS_PF@'				\
          --TEST_LIBS_BASIC='@TEST_LIBS_BASIC@'				\
          --TEST_EXTRA_LIBS_BASIC="@TEST_EXTRA_LIBS_BASIC_SUBST@"	\
          --TEST_EXTRA_LIBS_GL="@TEST_EXTRA_LIBS_GL_SUBST@"		\
          --TEST_EXTRA_LIBS_PF="@TEST_EXTRA_LIBS_PF@"

# Install the standard data files.
install-data:
	@echo "------------------------------------------------"
	@echo "Installing standard data files"
	@echo "------------------------------------------------"
	${MTREE_CMD} -Ude -f ${mtreedir}/VJ.data.dist -p ${prefix}
	${scriptdir}/install-dir.pl -i ${top_srcdir}/Data		\
          -m ${_FILE_PERMS} -g ${_GROUP_NAME} -o ${prefix}/Data

# Install the Java-based config editor if possible.
install-gui: _check_gui
ifeq (${BUILD_GUI}, Y)
	@echo "------------------------------------------------"
	@echo "Installing vjcontrol"
	@echo "------------------------------------------------"
	${INSTALL} -m ${_FILE_PERMS} -g ${_GROUP_NAME}			\
          ${topdir}/GUI/VjControl.jar ${bindir}
	${INSTALL} -m ${_EXEC_PERMS} -g ${_GROUP_NAME}			\
          ${VJROOT_ABS}/GUI/vjcontrol ${bindir}/vjcontrol
else
	@echo "------------------------------------------------"
	@echo "Skipping installation of vjcontrol (not built)"
	@echo "------------------------------------------------"
endif

# =============================================================================
# Clean-up targets.  '_clean' removes all the files in the build directories.  
# 'clobber' removes the ${_BUILDDIR_BASE} and ${_LIBDIR_NAME} directories.
# =============================================================================
_clean:
	@echo "------------------------------------------------"
	@echo "Cleaning up the build tree"
	@echo "------------------------------------------------"
	${MAKE} RECTARGET="clean" recursive
	cd GUI && ${MAKE} clean
	@if test -d ${_DBG_BUILDDIR}; then				\
            echo "------------------------------------------------" ;	\
            echo "Removing ${_DBG_BUILDDIR} ..."                    ;	\
            echo "------------------------------------------------" ;	\
            rm -r ${_DBG_BUILDDIR} ;					\
        fi
	@if test -d ${_OPT_BUILDDIR}; then				\
            echo "------------------------------------------------" ;	\
            echo "Removing ${_OPT_BUILDDIR} ..."                    ;	\
            echo "------------------------------------------------" ;	\
            rm -r ${_OPT_BUILDDIR} ;					\
        fi
	-@rm -f .*_done
	rm -f so_locations
	@echo "------------------------------------------------"
	@echo "Done with 'clean'"
	@echo "------------------------------------------------"

clobber: _clean clean-links
	@echo "------------------------------------------------"
	@echo "Clobbering build directories"
	@echo "------------------------------------------------"
	@if test -d ${_BUILDDIR_BASE} ; then				\
            echo "------------------------------------------------" ;	\
            echo "Removing ${_BUILDDIR_BASE} ..."                   ;	\
            echo "------------------------------------------------" ;	\
            rm -rf ${_BUILDDIR_BASE} ;					\
        fi
	@if test -d ${_LIBDIR_NAME}; then				\
            echo "------------------------------------------------" ;	\
            echo "Removing ${_LIBDIR_NAME} ..."                     ;	\
            echo "------------------------------------------------" ;	\
            rm -rf ${_LIBDIR_NAME} ;					\
        fi
	@echo "------------------------------------------------"
	@echo "Done with 'clobber'"
	@echo "------------------------------------------------"

# =============================================================================
# Human-readable information about the build system.
# =============================================================================
info::
	@echo "\nInfo for the make of ${VJ_LIBRARY}"
	@echo "\nOBJDIR: ${OBJDIR}"
	@echo "VJROOT_ABS: ${VJROOT_ABS}"
	@echo "Default ABI: ${ABI}"
	@echo "Default instruction set architecture: ${ISA}"
	@echo "ABI list: ${ABI_LIST}"
	@echo "DBG_BUILDDIR: ${_DBG_BUILDDIR}"
	@echo "OPT_BUILDDIR: ${_OPT_BUILDDIR}"
	@echo "Installation prefix: ${prefix}"
	@echo "includedir: ${includedir}"
	@echo "libdir: ${libdir}"
	@${scriptdir}/print-targets.sh
