dnl # ************ <auto-copyright.pl BEGIN do not edit this line> ************
dnl #
dnl # VR Juggler is (C) Copyright 1998, 1999, 2000 by Iowa State University
dnl #
dnl # Original Authors:
dnl #   Allen Bierbaum, Christopher Just,
dnl #   Patrick Hartling, Kevin Meinert,
dnl #   Carolina Cruz-Neira, Albert Baker
dnl #
dnl # This library is free software; you can redistribute it and/or
dnl # modify it under the terms of the GNU Library General Public
dnl # License as published by the Free Software Foundation; either
dnl # version 2 of the License, or (at your option) any later version.
dnl #
dnl # This library is distributed in the hope that it will be useful,
dnl # but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl # Library General Public License for more details.
dnl #
dnl # You should have received a copy of the GNU Library General Public
dnl # License along with this library; if not, write to the
dnl # Free Software Foundation, Inc., 59 Temple Place - Suite 330,
dnl # Boston, MA 02111-1307, USA.
dnl #
dnl # -----------------------------------------------------------------
dnl # File:          $RCSfile$
dnl # Date modified: $Date$
dnl # Version:       $Revision$
dnl # -----------------------------------------------------------------
dnl #
dnl # ************* <auto-copyright.pl END do not edit this line> *************

dnl # -------------------------------------------------------------------------
dnl # Base configure.in for VR Juggler.
dnl # -------------------------------------------------------------------------
dnl # This file is "compiled" by GNU autoconf to generate the configure script
dnl # that is actually run.
dnl # -------------------------------------------------------------------------
dnl # 

AC_REVISION($Revision$)
AC_INIT(vjConfig.h)
AC_CONFIG_HEADER(vjDefines.h)

dnl # -------------------------------------------------------------------------
dnl # Helper subroutines.
dnl # -------------------------------------------------------------------------

dnl # UNIX path translator.  This converts a UNIX-style path to a DOS/Win32
dnl # path.  With this routine, we can safely use UNIX paths for all Win32
dnl # variables while the configure script runs.  Then, immediately before
dnl # Makefile substitution is done, we can translate all the paths to
dnl # DOS-style for use in the Makefiles.
unix2dos ( ) {
    dnl # The first expression changes a "//C" drive name to "C:".  It has a
    dnl # pair of surrounding []'s because those symbols have special meaning
    dnl # to m4(1).  Without them, the first pair of []'s in the regular
    dnl # expression will be lost.
    dnl # The second expression ensures that a path beginning with / is
    dnl # returned as being a directory on the home drive.  The UNIX utilities
    dnl # treat $HOMEDRIVE as the root directory and will give, for example,
    dnl # /tmp instead of //D/tmp if D: is the home drive.  The expression
    dnl # simply prepends "$HOMEDRIVE" (after evaluation) to the path.
    _drive_exp=['s/^\/\/\([[:alpha:]]\)/\1:/']
    _drive_exp2=['s/^\/cygdrive\/\([[:alpha:]]\)/\1:/']
    _add_home_exp=["s/^\//$HOMEDRIVE\//"]
    _retval=`echo $1 | sed -e "${_drive_exp}" -e "${_drive_exp2}" -e "${_add_home_exp}"`

    echo "${_retval}"
}

dnl # DOS path translator.  This converts a DOS-style path to a UNIX path.
dos2unix ( ) {
    dnl # All expressions hers are enclosed in []'s because those symbols
    dnl # have special meaning to m4(1).  This is the same situation as
    dnl # above.

    dnl # This changes \'s to /'s and escapes any whitespace in the path.
    _slash_exp=['s/\\/\//g']
    _ws_esc_exp=['s/ /\\ /g']
    _unix_root=`echo "$1" | sed -e "${_slash_exp}" -e "${_ws_esc_exp}"`

    dnl # This changes the leading "C:" to "//C" (for the appropriate drive
    dnl # letter).
    _colon_rem_exp=['s/^\([[:alpha:]]\):/\/\/\1/']
    _retval=`echo "${_unix_root}" | sed -e "${_colon_rem_exp}"`

    echo "${_retval}"
}

dnl # -------------------------------------------------------------------------
dnl # Command-line arguments (--enable-option, --with-pkg=package_name).
dnl # -------------------------------------------------------------------------

dnl # -------------------------------------------- #
dnl # --with-pkg[=arg] and --without-pkg arguments #
dnl # -------------------------------------------- #

dnl # Override the C compiler that configure would otherwise find itself.
AC_ARG_WITH(cc, [  --with-cc=<PATH>        Alternate C compiler ],
            _alt_cc="$withval", _alt_cc='none')

dnl # Override the C++ compiler that configure would otherwise find itself.
AC_ARG_WITH(cxx, [  --with-cxx=<PATH>       Alternate C++ compiler ],
            _alt_cxx="$withval", _alt_cxx='none')

dnl # Force the use of GCC as the compiler.
dnl # NOTE: This is not fully implemented yet for any platform, but it is
dnl # partially usable on Windows.
AC_ARG_WITH(gcc,
            [  --with-gcc              Force the use of GCC as the compiler],
            _use_gcc="$withval")

dnl # Define the binary format.  Possible values are the following:
dnl #     N32_M3     - On IRIX, use N32 mips3 binaries
dnl #     N32_M4     - On IRIX, use N32 mips4 binaries
dnl #     64_M3      - On IRIX, use 64-bit mips3 binaries
dnl #     64_M4      - On IRIX, use 64-bit mips4 binaries
dnl #     HP         - On HP-UX, use HP PA-RISC binaries
dnl #     HP64       - On HP-UX, use 64-bit HP PA-RISC binaries
dnl #     ALPHA      - On an Alpha running Digital UNIX, use COFF binaries
dnl #     ELF_i386   - On an i386 OS (e.g., Linux/i386), use ELF binaries
dnl #     WIN32_i386 - On an i386 Win32 OS, Linux), use Win32 binaries
AC_ARG_WITH(abi,
            [  --with-abi=<N32_M3|N32_M4|64_M3|64_M4|HP|HP64|ALPHA|ELF_i386|WIN32_i386>
                          Define the Application Binary Interface to use],
            _abi_type="$withval")

dnl # Define which threading model to use.  Possible values are "IRIX_SPROC"
dnl # or "POSIX".
dnl # The default is "IRIX_SPROC".
AC_ARG_WITH(threads,
            [  --with-threads=<IRIX_SPROC|POSIX|WIN32>
                          Define threading implementation [default=IRIX_SPROC]],
            _thread_pkg="$withval", _thread_pkg='IRIX_SPROC')

dnl # Define the root directory for the Java installation.
dnl # The default is /usr/java or what the user has defined in his or her
dnl # $JDK_HOME environment variable.  ${_JDK_HOME_ALT_LIST} must be a
dnl # colon-separated list of bin directories that could contain javac(1)
dnl # and the other JDK utilities.
if test "x$JAVA_HOME" = "x" ; then
    _JDK_HOME_ALT_LIST="/usr/local/java/bin"
else
    _JDK_HOME_ALT_LIST="${JAVA_HOME}/bin:/usr/local/java/bin"
fi

AC_ARG_WITH(jdkhome,
            [  --with-jdkhome=<PATH>   JDK installation directory      [default=\$JDK_HOME
                                                           then /usr/java]],
            JDK_HOME="$withval", JDK_HOME="${JDK_HOME-/usr/java}")

dnl # Define the root directory for the Performer installation.
dnl # The default is /usr.
AC_ARG_WITH(pfroot,
            [  --with-pfroot=<PATH>    Performer installation
                          directory                       [default=/usr]],
            PFROOT="$withval", PFROOT='/usr')

dnl # Define the version of Perfromer to use.
dnl # The default is 2.4.
AC_ARG_WITH(pfver,
            [  --with-pfver=<VER>      Performer version to use        [default=2.4]],
            PF_VER="$withval", PF_VER='2.4')

dnl # If no value has been set for $DEFAULT_OGLROOT, use /usr.
: ${DEFAULT_OGLROOT=/usr}

dnl # Define the root directory for the OpenGL installation.
dnl # The default is /usr.
AC_ARG_WITH(oglroot,
            [  --with-oglroot=<PATH>   OpenGL installation directory   [default=/usr]],
            OGLROOT="$withval", OGLROOT="$DEFAULT_OGLROOT")

dnl # Use the Mesa OpenGL implementation.  That is, link with libMesaGL and
dnl # libMesaGLU.
dnl # The default is no.
AC_ARG_WITH(mesa,
            [  --with-mesa             Use Mesa OpenGL implementation  [default=no]],
            _with_mesa="$withval", _with_mesa='no')

dnl # Use AudioWorks (which can be found at the given path) in the sound
dnl # wrapper.
dnl # The default is to use it with the path being /usr.
AC_ARG_WITH(audioworks,
            [  --with-audioworks=<PATH>
                          AudioWorks installation         [default=/usr]],
            _with_aw="$withval", _with_aw='/usr')

dnl # Use SL (which can be found at the given path) in the sound wrapper.
dnl # The default is to use it with the path being /usr.
AC_ARG_WITH(sl,
            [  --with-sl=<PATH>        SL installation                 [default=/usr]],
            _with_sl="$withval", _with_sl='/usr')

dnl # Specify a directory containing a working Perl 5.004 (or newer) binary.
dnl # There is no default since standard locations are always available.
AC_ARG_WITH(perl,
            [  --with-perl=<PATH>      Directory containing Perl 5.004
                          or newer binary                 [No default]],
            _user_perl_path="$withval")

dnl # Name the user who will own installed files.
AC_ARG_WITH(install-owner,
            [  --with-install-owner=<USER NAME>
                          Installed file owner name],
            _install_owner="$withval")

dnl # Name the group used for setting ownership on installed files.
AC_ARG_WITH(install-group,
            [  --with-install-group=<GROUP NAME>
                          Installed file group name       [default=vrjuggler]],
            _install_group="$withval", _install_group='vrjuggler')

dnl # Provide permissions for installed (normal) files.
AC_ARG_WITH(file-perms,
            [  --with-file-perms=<FILE PERMISSIONS>
                          Installed file permissions      [default=0644]],
            FILE_PERMS="$withval", FILE_PERMS='0644')

dnl # Provide permissions for installed executable files.
AC_ARG_WITH(exec-perms,
            [  --with-exec-perms=<EXEC PERMISSIONS>
                          Installed executable permisions [default=0755]],
            EXEC_PERMS="$withval", EXEC_PERMS='0755')

dnl # Provide permissions for directories in the installation tree.
AC_ARG_WITH(dir-perms,
            [  --with-dir-perms=<DIRECTORY PERMISSIONS>
                          Installed directory permisions  [default=0755]],
            DIR_PERMS="$withval", DIR_PERMS='0755')

dnl # ------------------------------------------------------ #
dnl # --enable-feature[=arg] and --disable-feature arguments #
dnl # ------------------------------------------------------ #

dnl # Enable compilation of the OpenGL API.  Possible values are "yes" or
dnl # "no".  "yes" is set with --enable-gl-api and "no" is set with
dnl # --disable-gl-api.
dnl # The default is "yes".
AC_ARG_ENABLE(gl-api,
              [  --enable-gl-api         use OpenGL API                  [default=yes]],
              _enable_gl_api="$enableval", _enable_gl_api='yes')

dnl # Enable compilation of the Performer API.  Possible values are "yes" or
dnl # "no".  "yes" is set with --enable-pf-api and "no" is set with
dnl # --disable-pf-api.
dnl # The default is "yes".
AC_ARG_ENABLE(pf-api,
              [  --enable-pf-api         use Perfromer API               [default=yes]],
              _enable_pf_api="$enableval", _enable_pf_api='yes')

dnl # Enable performance testing.  Values that enable it are as follows:
dnl #
dnl #      SGI: Enable SGI IPC performance testing.  This defines
dnl #           VJ_PERFORMANCE to be VJ_PERF_SGI
dnl #    POSIX: Enable POSIX threads performance testing.  This defines
dnl #           VJ_PERFORMANCE to be VJ_PERF_POSIX
dnl #
dnl # Values that disable it are "no" or "NONE".  The default is "SGI".
AC_ARG_ENABLE(performance,
              [  --enable-performance=<SGI|POSIX|NONE>
                          enable performance testing      [default=SGI] ],
              [ if test "x$enableval" = "xyes" ; then
                    _enable_perf='SGI'
                elif test "x$enableval" = "xno" ; then
                    _enable_perf='NONE'
                else
                    _enable_perf="$enableval"
                fi
              ], _enable_perf='SGI')

dnl # Define a macro VJ_ABI_CFG for setting up the configuration parameters
dnl # for a given ABI.  The usage is:
dnl #
dnl #   VJ_ABI_CFG([ ABI [, ISA [, library suffix [, extra compiler flags]]]])
dnl #
dnl # All arguments are optional and will default to the empty string if not
dnl # provided.
AC_DEFUN(VJ_ABI_CFG, [ ABI=$1 ISA=$2 LIBBITSUF=$3 _EXTRA_FLAGS=$4 ; ])

dnl # Set default values for these before checking ${_abi_type}.  Currently,
dnl # these are for non-IRIX platforms.
ABI=''
LIBBITSUF=''

dnl # Based on the value of $abi_type, set $ABI for later use and the Makefile
dnl # substitution variables $LIBBITSUF and $ISA.
case "x${_abi_type}" in
    x64_M3)
        VJ_ABI_CFG('64', 'mips3', '64', '-64 -mips3')
        ;;
    x64_M4)
        VJ_ABI_CFG('64', 'mips4', '64', '-64 -mips4')
        ;;
    xN32_M3)
        VJ_ABI_CFG('N32', 'mips3', '32', '-n32 -mips3')
        ;;
    xN32_M4)
        VJ_ABI_CFG('N32', 'mips4', '32', '-n32 -mips4')
        ;;
    xHP)
        VJ_ABI_CFG('HP', 'PA-RISC')
        ;;
    xHP64)
        VJ_ABI_CFG('HP64', 'PA-RISC', '/pa20_64', '+DD64')
        ;;
    xALPHA)
        VJ_ABI_CFG('ALPHA')
        ;;
    xELF_i386)
        VJ_ABI_CFG('ELF', 'i386')
        ;;
    xWIN32_i386)
        VJ_ABI_CFG('WIN32')
        ;;
esac

dnl # -------------------------------------------------------------------------
dnl # System-dependent stuff.
dnl # -------------------------------------------------------------------------

dnl # We use AC_CANONICAL SYSTEM so that we can find out information about
dnl # the build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM

dnl # Operating system release information.  This may contain anything and
dnl # should be treated as a string.
_OS_REL_STR=`uname -r`

dnl # Operating system version number only (any miscellaneous text is
dnl # stripped).  This will only contain a number and can be treated as a
dnl # float-point value.
dnl # NOTE: It is currently not used in config.h.
_OS_REL_NUM=`uname -r | sed -e 's/^[^0-9]*\([0-9][0-9]*\.[0-9][0-9]*\)[^0-9]*$/\1/'`

dnl # Major and minor version numbers from ${_OS_REL_NUM} separated for use
dnl # with the C preprocessor.  Using cut(1) is kind of a hack, but at least
dnl # it's a clean one.
_OS_REL_NUM_MAJOR=`echo "${_OS_REL_NUM}" | cut -f1 -d'.'`
_OS_REL_NUM_MINOR=`echo "${_OS_REL_NUM}" | cut -f1 -d' ' | cut -f2 -d'.'`

dnl # These are used on all platforms.
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE, "${_OS_REL_STR}")
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE_MAJOR, ${_OS_REL_NUM_MAJOR})
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE_MINOR, ${_OS_REL_NUM_MINOR})

AR=''			dnl # Archive library command (generally ar(1))
ARFLAGS=''		dnl # Flags for $AR
AR_NAME_FLAG=''		dnl # Extra flag used to allow $AR to name its output
DEP_GEN_FLAG='-M'	dnl # Flag for the compiler to generate dependencies
LD=''			dnl # Shared library command (usually ld(1))
LDOPTS=''		dnl # More options for shared library generator
LDOPTS_DBG=''		dnl # Debugging options for shared library generator
LDOPTS_OPT=''		dnl # Optimization options for shared library generator
OBJ_FILE_SUFFIX='o'	dnl # Suffix for object file names
OBJ_NAME_FLAG='-o $@'	dnl # Flag used for naming a compiled object file

LIB_PREFIX='lib'	dnl # Prefix for library name
STATICLIB_EXT='a'	dnl # Extension for shared library names (usually 'a')
SHAREDLIB_EXT=''	dnl # Extension for shared library names (usually 'so')

DBG_FLAGS=''		dnl # Compiler debugging flags for object files
OPT_FLAGS=''		dnl # Compiler optimization flags for object files

DSOREGFILE=''
DSOVERSION=''
DSOVERSIONOPTS=''
ABI_LIST=''		dnl # List of supported ABIs on a given platform
OS_TYPE='UNIX'		dnl # General type of operating system (UNIX, Win32)
PLATFORM=''		dnl # Platform name

dnl # Depending on the target operating system, set various command options and
dnl # such.
case $target_os in
    dnl # SGI running IRIX 6.*.
    irix6*)
        dnl # If no ABI has been set yet, default to N32_M3.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('N32', 'mips3', '32', '-n32 -mips3')
        fi

        dnl # Set compiler flags and the location of $DSOREGFILE depending on
        dnl # $ABI.
        if test "$ABI" = "64" ; then
            DSOREGFILE='/usr/lib64/so_locations'
            OPT_FLAGS='-O2 -OPT:Olimit=0'
        elif test "$ABI" = "N32" ; then
            DSOREGFILE='/usr/lib32/so_locations'
            OPT_FLAGS='-O2 -OPT:Olimit=0'
        fi

        AR='${CXX}'
        ARFLAGS='-LANG:std -J6 -ar -WR,-v -o'
        CFLAGS="$CFLAGS -ansi"
        CFLAGS_DYNLIB="$CFLAGS_DYNLIB -KPIC"
        CXXFLAGS="$CXXFLAGS -ansi -LANG:std"
        CXXFLAGS_DYNLIB="$CXXFLAGS_DYNLIB -KPIC"
        DBG_FLAGS="-g -gslim"
        LD='${CXX} -shared'
        _LD_REGOPTS='-check_registry ${DSOREGFILE}'
        LDOPTS="$LDOPTS -ansi -LANG:std -all ${_LD_REGOPTS} -elf -rdata_shared"
        SHAREDLIB_EXT='so'

        DSOVERSION='sgi4.0'
        DSOVERSIONOPTS='-set_version ${DSOVERSION}'

        ABI_LIST='64_M4 64_M3 N32_M4 N32_M3'
        PLATFORM='IRIX'

        AC_DEFINE(VJ_OS_IRIX,)
        AC_DEFINE(_BSD_TYPES,)

        if test ${_OS_REL_NUM_MAJOR} -lt 6 ; then
            AC_DEFINE(IRIXREL, "IRIX5")
        else
            AC_DEFINE(IRIXREL, "IRIX6")
        fi
        ;;
    dnl # HP PA-RISC machine running HP-UX 10.x.  These are not supported
    dnl # because they lack a complete POSIX.4 real-time implementation.
    hpux10*)
        AC_MSG_ERROR(HP-UX 10.x is not supported.  Please upgrade to 11.00!)
        ;;
    dnl # HP PA-RISC machine running HP-UX 11.x.
    hpux11*)
        dnl # If no ABI has been set yet, default to HP PA-RISC.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('HP', 'PA-RISC')
        fi

        AR='ar'
        ARFLAGS='ru'
        CFLAGS_DYNLIB="$CFLAGS_DYNLIB +Z"
        CXXFLAGS="-AA -mt $CXXFLAGS"
        CXXFLAGS_DYNLIB="$CXXFLAGS_DYNLIB +Z"
        DEP_GEN_FLAG='-E +m'
        LD='aCC'
        LDFLAGS="$LDFLAGS -mt -L/usr/lib/X11R6"
        LDOPTS='-b'
        DBG_FLAGS='-g'
        OPT_FLAGS=''
        SHAREDLIB_EXT='sl'

        dnl # We have to use POSIX threads on HP-UX.
        if test "x${_thread_pkg}" != "xPOSIX" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX threads ***)
            _thread_pkg='POSIX'
        fi

        dnl # If nothing was given as an alternate OpenGL installation path,
        dnl # use /opt/graphics/OpenGL.
        if test "x$OGLROOT" = "x$DEFAULT_OGLROOT" ; then
            OGLROOT='/opt/graphics/OpenGL'
        fi

        AC_DEFINE(VJ_OS_HPUX,)
        ABI_LIST='HP'
        PLATFORM='HP'
        ;;
    dnl # DEC Alpha running Digital UNIX 4.0.
    osf4.0)
        dnl # If no ABI has been set yet, default to ALPHA (whatever that
        dnl # means).
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('ALPHA')
        fi

        AR='ar'
        ARFLAGS='-ruv'
        LD='${CXX} -shared'
        LDOPTS=''
        OPT_FLAGS='-O2'
        SHAREDLIB_EXT='so'

        AC_DEFINE(VJ_OS_DUX,)
        ABI_LIST='ALPHA'
        PLATFORM='alpha-osf'
        ;;
    dnl # A machine running FreeBSD.  Currently only i386 is known to compile.
    freebsd*)
        dnl # If no ABI has been set yet, default to ELF with whatever the
        dnl # target CPU architecture is.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('ELF', "$target_cpu")
        fi

        AR='ar'
        ARFLAGS='-ruv'
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"
        LD='${CXX} -shared'
        LDOPTS=''
        DBG_FLAGS='-g'
        OPT_FLAGS='-O2'
        SHAREDLIB_EXT='so'

        dnl # We have to use POSIX threads on FreeBSD.
        if test "x${_thread_pkg}" != "xPOSIX" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX threads ***)
            _thread_pkg='POSIX'
        fi

        AC_DEFINE(VJ_OS_FreeBSD,)
        ABI_LIST='ELF'
        PLATFORM='FreeBSD'
        ;;
    dnl # A machine running Linux.  Currently only i386 and PowerPC are known
    dnl # to work.
    linux*)
        dnl # If no ABI has been set yet, default to ELF with whatever the
        dnl # target CPU architecture is.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('ELF', "$target_cpu")
        fi

        AR='ar'
        ARFLAGS='-ruv'
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"
        LD='${CXX} -shared'
        LDOPTS=''
        OPT_FLAGS='-O1'
        DBG_FLAGS='-g'
        SHAREDLIB_EXT='so'

        dnl # We have to use POSIX threads on Linux.
        if test "x${_thread_pkg}" != "xPOSIX" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX threads ***)
            _thread_pkg='POSIX'
        fi

        AC_DEFINE(VJ_OS_Linux,)
        ABI_LIST='ELF'
        PLATFORM='Linux'
        ;;
    dnl # A machine running Solaris (aka SunOS).  Currently only i386 is
    dnl # known to work.
    solaris*)
        dnl # If no ABI has been set yet, default to ELF with whatever the
        dnl # target CPU architecture is.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('ELF', "$target_cpu")
        fi

        AR='ar'
        ARFLAGS='-ruv'
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"
        LD='${CXX} -G'
        LDOPTS=''
        DBG_FLAGS='-g'
        OPT_FLAGS='-O2'
        SHAREDLIB_EXT='so'

        dnl # We have to use POSIX threads on Solaris.
        if test "x${_thread_pkg}" != "xPOSIX" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX threads ***)
            _thread_pkg='POSIX'
        fi

        AC_DEFINE(VJ_OS_Solaris,)
        ABI_LIST='ELF'
        PLATFORM='Solaris'
        ;;
    dnl # IBM RS/6000 running AIX.
    aix*)
        dnl # We have to use POSIX threads on AIX.
        if test "x${_thread_pkg}" != "xPOSIX" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX threads ***)
            _thread_pkg='POSIX'
        fi

        AC_DEFINE(VJ_OS_AIX)
        PLATFORM='AIX'
        ;;
    dnl # i386-class machine running Windows {98,NT} with Cygnus GNU-Win32.
    cygwin)
        dnl # If no ABI has been set yet, default to WIN32 with whatever the
        dnl # target CPU architecture is.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('WIN32')
        fi

        dnl # There is no performance testing/monitoring code for Win32 (yet).
        if test "x${_enable_perf}" != "xNONE" ; then
            AC_MSG_WARN(*** Disabling performance testing on $host ***)
            _enable_perf='NONE'
        fi

        dnl # We have to use Win32 threads on Win32.
        if test "x${_thread_pkg}" != "xWIN32" ; then
            AC_MSG_WARN(*** WIN32 threads must be used on $host ***)
            _thread_pkg='WIN32'
        fi

        if test "x${_use_gcc}" = "xyes" ; then
            AR='ar'
            ARFLAGS='-ruv'
            CFLAGS="-mno-cygwin"
            CXXFLAGS="-mno-cygwin"
            DBG_FLAGS='-g'

            LD='${CXX} -shared'
        else
            AR='link -lib'
            ARFLAGS="$ARFLAGS -nologo"
            AR_NAME_FLAG='-out:'
            CFLAGS="-nologo"
            CXXFLAGS="-nologo"
            DBG_FLAGS='-Od -GZ -MTd -Z7'
            DEP_GEN_FLAG='-FD'
            OPT_FLAGS='-GB -MT'
            LD='link -dll'
            LDOPTS="$LDOPTS -nologo -out:\"${OBJDIR}/Juggler.lib\""
            LDOPTS_DBG='-DEBUG -PDB:NONE'
            LDOPTS_OPT='-RELEASE'
            OBJ_FILE_SUFFIX='obj'
            OBJ_NAME_FLAG='-Fo$@'
        fi

        LIB_PREFIX=''
        STATICLIB_EXT='lib'
        SHAREDLIB_EXT='dll'

        AC_DEFINE(VJ_OS_Win32,)
        ABI_LIST='WIN32'
        OS_TYPE='Win32'

        _sys_name=`uname -s`

        dnl # Determine the value for $PLATFORM based on what uname(1) tells
        dnl # us.  We define our own values because Cygnus' uname(1) returns
        dnl # somewhat annoying names.
        case ${_sys_name} in
            dnl # Windows NT 4.0.
            *NT-[[45]].0)
                PLATFORM='WinNT'
                ;;
            dnl # Windows 95 and 98.
            *WIN_9*-4.*)
                PLATFORM='Win9x'
                ;;
            dnl # Unknown version of Windows that may not yet be supported.
            *)
                AC_MSG_ERROR(Unknown Windows type ${_sys_name}!)
                ;;
        esac

        AC_DEFINE(WIN32,)
        AC_DEFINE(_MBCS,)
        ;;
    dnl # Unkown operating system (to config.guess).
    unknown)
        dnl # If no ABI has been set yet, default to the target OS (which
        dnl # will be 'unknown') with whatever the target CPU architecture is.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG("$target_os", "$target_cpu")
        fi

        AC_DEFINE(VJ_OS_GENERIC,)
        PLATFORM='UNKNOWN'
        ;;
esac

dnl # --------------------------------------------------------------------
dnl # Depending on host type and the value in ${_enable_perf}, define the
dnl # settings for the performance code.
dnl # --------------------------------------------------------------------
if test "$PLATFORM" != "IRIX" -a "${_enable_perf}" != "NONE" ; then
    _enable_perf='POSIX'
fi

dnl # Define unique values for each type of performance testing option.
dnl # Only one of these may be used for the value to which VJ_PERFORMANCE
dnl # is set.
AC_DEFINE(VJ_PERF_NONE, 0)
AC_DEFINE(VJ_PERF_SGI, 1)
AC_DEFINE(VJ_PERF_POSIX, 2)

dnl # Define VJ_PERFORMANCE based on ${_enable_perf}.  Default to
dnl # VJ_PERF_SGI if ${_enable_perf} has some unknown value.
if test "x${_enable_perf}" = "xSGI" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_SGI)
elif test "x${_enable_perf}" = "xPOSIX" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_POSIX)
elif test "x${_enable_perf}" = "xNONE" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_NONE)
else
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_SGI)
fi

dnl # -------------------------------------------------------------------------
dnl # Checks for programs.
dnl # -------------------------------------------------------------------------

_vjsave_CFLAGS="$CFLAGS"
_vjsave_CXXFLAGS="$CXXFLAGS"

dnl # If no alternate C compiler was specified, check to see if it is
dnl # necessary to force the use of a specific compiler on a given platform.
if test "x${_alt_cc}" = "xnone" ; then
    dnl # On HP-UX, we have to use the aCC C++ compiler.
    if test "$PLATFORM" = "HP" ; then
        AC_CHECK_PROG(CC, cc, cc,
            AC_MSG_ERROR(*** The library requires the HP-UX aCC C++ compiler ***))
    dnl # On IRIX, we have to use cc (not gcc).
    elif test "$PLATFORM" = "IRIX" ; then
        AC_CHECK_PROG(CC, cc, cc,
            AC_MSG_ERROR(*** The library requires the IRIX cc C compiler ***))
    fi
dnl # Otherwise, force the use of the alternate C compiler.
else
    CC="${_alt_cc}"
fi

dnl # If no alternate C++ compiler was specified, check to see if it is
dnl # necessary to force the use of a specific compiler on a given platform.
if test "x${_alt_cxx}" = "xnone" ; then
    dnl # On HP-UX, we have to use the aCC C++ compiler.
    if test "$PLATFORM" = "HP" ; then
        AC_CHECK_PROG(CXX, aCC, aCC,
            AC_MSG_ERROR(*** The library requires the HP-UX aCC C++ compiler ***))
    dnl # On Windows, we have to use the Microsoft Visual C++ compiler CL.EXE.
    elif test "$OS_TYPE" = "Win32" -a "x${_use_gcc}" != "xyes" ; then
        AC_CHECK_PROG(CXX, cl, cl,
            AC_MSG_ERROR(*** The library requires the MS Visual C++ compiler ***))
        CC=$CXX
    dnl # On IRIX, we have to use CC (not g++).
    elif test "$PLATFORM" = "IRIX" ; then
        AC_CHECK_PROG(CXX, CC, CC,
            AC_MSG_ERROR(*** The library requires the IRIX CC C++ compiler ***))
    fi
dnl # Otherwise, force the use of the alternate C++ compiler.
else
    CXX="${_alt_cxx}"
fi

CFLAGS="$CFLAGS ${_EXTRA_FLAGS}"
CXXFLAGS="$CXXFLAGS ${_EXTRA_FLAGS}"

AC_PROG_CC
AC_PROG_CXX

dnl # If we are using GCC as the C compiler, the option for making
dnl # position-independent code is -fPIC.
if test "x$GCC" = "xyes" ; then
    CFLAGS_DYNLIB="$CFLAGS_DYNLIB -fPIC"
fi

dnl # If we are using GCC as the C++ compiler, the option for making
dnl # position-independent code is -fPIC.
if test "x$GXX" = "xyes" ; then
    CXXFLAGS_DYNLIB="$CXXFLAGS_DYNLIB -fPIC"
fi

dnl # If we are using GCC as the compiler, we need to be using at least egcs
dnl # 1.1.2.  A newer version (e.g., 2.95.2) is even better.
if test "x$GXX" = "xyes" ; then
    AC_CACHE_CHECK(if $CXX is egcs 1.1.2 or newer,
        ac_cv_CXX_is_egcs,
        [ case `$CXX -dumpversion 2>&1` in
              egcs-2.9*)
                  ac_cv_CXX_is_egcs='yes'
                  ;;
              2.9*)
                  ac_cv_CXX_is_egcs='yes'
                  ;;
              3.*)
                  ac_cv_CXX_is_egcs='yes'
                  ;;
              *)
                  _val=`$CXX -v 2>&1 | grep -e '^gcc version' | cut -f4 -d' '`
                  if test ${_val} -ge 19990314 ; then
                      ac_cv_CXX_is_egcs='yes'
                  else
                      ac_cv_CXX_is_egcs='no'
                  fi
                  ;;
          esac
        ])

    dnl # If the $CXX binary is not egcs 1.1.2 or newer, check for egcc and
    dnl # eg++.  If it exists, we will assume that it is new enough.
    if test "x$ac_cv_CXX_is_egcs" = "xno" ; then
        AC_CHECK_PROG(CC, egcc, egcc,
            AC_MSG_ERROR(*** The library requires the egcc C compiler ***))
        AC_CHECK_PROG(CXX, eg++, eg++,
            AC_MSG_ERROR(*** The library requires the eg++ C++ compiler ***))
    fi
fi

dnl # At this point, we know what threading package we will be using and what
dnl # C compiler we have available.  Now check to see if the compiler accepts
dnl # the -pthread option.
if test "x${_thread_pkg}" = "xPOSIX" ; then
    AC_CACHE_CHECK(whether $CC accepts -pthread,
        ac_cv_CC_accepts_pthread,
        [ echo 'void f(){}' > conftest.c
          if test -z "`${CC} -pthread -c conftest.c 2>&1`" ; then
              ac_cv_CC_accepts_pthread='yes'
          else
              ac_cv_CC_accepts_pthread='no'
          fi
          rm -f conftest*
        ])
fi

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
ac_ext='cpp'

AC_CACHE_CHECK(whether the C++ compiler handles templates properly,
    ac_cv_CXX_is_current,
    AC_TRY_COMPILE([#include <map> ],
                   [ std::map<const char*, int> test_map; ],
                   [ ac_cv_CXX_is_current='yes' ; rm -rf ./ii_files ],
                   [ ac_cv_CXX_is_current='no' ;
                     AC_MSG_ERROR(*** The library requires a current C++ compiler) ]))

AC_LANG_RESTORE

AC_PROG_CPP
AC_PROG_CXXCPP

CFLAGS="${_vjsave_CFLAGS}"
CXXFLAGS="${_vjsave_CXXFLAGS}"

JAVAC=''
JAR=''

dnl # Check for the JDK (specifically try to find javac(1) in $JDK_HOME or
dnl # in ${_JDK_HOME_ALT_LIST}).
AC_PATH_PROG(JAVAC, javac, no, ${JDK_HOME}/bin:$PATH:${_JDK_HOME_ALT_LIST})

dnl # If there is still no value in $JAVAC, then warn that the GUI will not be
dnl # built.
if test "$JAVAC" = "no" ; then
    AC_MSG_WARN(*** The GUI requires javac -- it will not be built ***)
    BUILD_GUI='N'
dnl # Otherwise, set $JAR to the path to jar(1) and continue.
else
    if test "$OS_TYPE" = "Win32" ; then
        JAVAC=`unix2dos "$JAVAC"`
    fi

    JAR=`echo $JAVAC | sed 's/javac$//'`jar
    BUILD_GUI='Y'
fi

dnl # If we are on a Win32 system, use $ac_install_sh for the install
dnl # program.  This prevents problems with paths if an install program is
dnl # found elsewhere on the system.
dnl # XXX: This may not be a safe value to use since it is internal to the
dnl # generated configure script.  (patrick 1/10/2000)
if test "$OS_TYPE" = "Win32" ; then
    INSTALL="$ac_install_sh"
dnl # Otherwise, use the safe AC_PROG_INSTALL macro.
else
    AC_PROG_INSTALL
fi

dnl # Ensure that a version of Perl greater than or equal to 5.004 is
dnl # available.
chkPerl ( ) {
    if test -x "$1" ; then
        retval=`$1 -e "printf("%s\n", (($] >= 5.004) ? 0 : 1))"`
    else
        retval=1
    fi

    echo $retval
}

_PERL_PATH='/usr/local/bin /usr/bin C:/Perl/bin'

dnl # If ${_user_perl_path} has a value, prepend that on ${_PERL_PATH} so that
dnl # it will be checked before the standard places.
if test "x${_user_perl_path}" != "x" ; then
    _PERL_PATH="${_user_perl_path} ${_PERL_PATH}"
fi

AC_CACHE_CHECK(for Perl version >= 5.004,
               ac_cv_perl_version,
               [ ac_cv_perl_version='no' ;
                 for _dir in ${_PERL_PATH} ; do
                     if eval "test \"`chkPerl ${_dir}/perl`\" -eq 0" ; then
                         ac_cv_perl_version="${_dir}/perl"
                         break
                     elif eval "test \"`chkPerl ${_dir}/perl5`\" -eq 0" ; then
                         ac_cv_perl_version="${_dir}/perl5"
                         break
                     fi
                 done
               ])

PERL="$ac_cv_perl_version"

AC_CHECK_PROG(MTREE_CMD, mtree, mtree, \${PERL} \${scriptdir}/mtree.pl)
AC_PROG_MAKE_SET

dnl # While ranlib(1) is not part of the base IRIX installation, the VRAC SGIs
dnl # have a ranlib(1) installed that does very bad things to ar archives.
dnl # We also do not want to use the Cygwin ranlib(1) with the Visual C++
dnl # LINK.EXE command.
if test "$PLATFORM" = "IRIX" -o "$OS_TYPE" = "Win32" ; then
    RANLIB=':'
else
    AC_PROG_RANLIB
fi

AC_PROG_LN_S

dnl # -------------------------------------------------------------------------
dnl # Checks for libraries.
dnl # -------------------------------------------------------------------------

THREADS=''

dnl # Test for libpthread or for libcma if libpthread is not present.
dnl # If the library is found, check for pthread_kill().  If it is present,
dnl # Draft 10 (the "final" draft) of the POSIX threads standard is in place.
dnl # If not, Draft 4 is available.
if test "x${_thread_pkg}" = "xPOSIX" ; then
    _vjsave_LDFLAGS="$LDFLAGS"

    if test "$ac_cv_CC_accepts_pthread" = "yes" ; then
        LDFLAGS="$LDFLAGS -pthread"
    fi

    dnl # On HP-UX 11.00, HP hides the pthread library from configure.
    dnl # This forces its use with the -mt flag.
    if test "$PLATFORM" = "HP" ; then
        THREADS='POSIX'
    fi

    AC_CHECK_LIB(pthread, pthread_create,
        AC_CHECK_HEADER(pthread.h,
            [ THREADS='POSIX' _pthread_lib='-lpthread'; ],
            AC_MSG_WARN(*** POSIX threads will not be used (header file not found) ***)))

    dnl # On FreeBSD, the pthreads stuff is in libc_r.
    if test "x$THREADS" = "x" ; then
        AC_CHECK_LIB(c_r, pthread_create,
            AC_CHECK_HEADER(pthread.h,
                [ THREADS='POSIX' _pthread_lib='' ],
                AC_MSG_WARN(*** POSIX threads will not be used (header file not found) ***)))
    fi

    dnl # If $THREADS is equal to "POSIX" at this point, then the pthread
    dnl # libraries needed are in $LIBS, so now we make a check for the draft
    dnl # revision being used.  This is done by determining if pthread_kill()
    dnl # is in the library.  If it is, Draft 10 is in use.  Otherwise, assume
    dnl # it is Draft 4.
    if test "$THREADS" = "POSIX" ; then
        _vjsave_LIBS="$LIBS"
        LIBS="$LIBS ${_pthread_lib}"

        AC_CACHE_CHECK(POSIX threads draft revision,
            ac_cv_pthread_version,
            AC_TRY_LINK([#include <pthread.h> ],
                [ pthread_t t; pthread_kill(t, 1); ],
                ac_cv_pthread_version='Draft 10',
                ac_cv_pthread_version='Draft 4'))

        AC_CHECK_FUNC(pthread_attr_setstack,
            AC_DEFINE(HAVE_PTHREAD_ATTR_SETSTACK, 1))

        LIBS="${_vjsave_LIBS}"

        dnl # HP once again, not playing by the rules.  Forcing draft level 10.
        if test "$PLATFORM" = "HP" ; then
            AC_MSG_WARN(*** Forcing Pthreads Draft 10 on HP ***)
            AC_DEFINE(_PTHREADS_DRAFT_10,)
        else
            if test "$ac_cv_pthread_version" = "Draft 10" ; then
                AC_DEFINE(_PTHREADS_DRAFT_10,)
            else
                AC_DEFINE(_PTHREADS_DRAFT_4,)
            fi
        fi

        dnl # Define the default thread scope depending on the platform.  On
        dnl # IRIX, only process scope is avaiable without special
        dnl # configuration options.  Other systems may support system scope.
        if test "$PLATFORM" = "IRIX" ; then
            AC_DEFINE(VJ_THREAD_SCOPE, PTHREAD_SCOPE_PROCESS)
        else
            AC_DEFINE(VJ_THREAD_SCOPE, PTHREAD_SCOPE_SYSTEM)
        fi

        dnl # Define the appropriate value for _POSIX_C_SOURCE on the current
        dnl # platform.
        if test "$PLATFORM" = "IRIX" -o "$PLATFORM" = "Linux" -o "$PLATFORM" = "Solaris" -o "$PLATFORM" = "HP"; then
            AC_DEFINE(VJ_POSIX_C_SOURCE, 199506L)
        else
            AC_DEFINE(VJ_POSIX_C_SOURCE, 2)
        fi
    else
        AC_MSG_WARN(*** POSIX threads will not be used (no library found) ***)
    fi

    dnl # Restore these in case any changes were made above.
    LDFLAGS="${_vjsave_LDFLAGS}"
dnl # We are using WIN32 threads.
elif test "x${_thread_pkg}" = "xWIN32" ; then
    THREADS='WIN32'

dnl # If we are not using POSIX threads, we must be using the IRIX sproc(2)
dnl # model, but we test ${_thread_pkg} just to be sure it is set right.
elif test "x${_thread_pkg}" = "xIRIX_SPROC" ; then
    AC_CHECK_HEADERS(sys/prctl.h,
        THREADS='IRIX_SPROC',
        AC_MSG_WARN(*** IRIX sproc(2) threading will not be used (no headers found) ***))
fi

dnl # Shared memory and synchronization primitives.
SEMAPHORE_SYS=''		# POSIX, IRIX_SPROC, WIN32
MUTEX_SYS=''			# POSIX, IRIX_SPROC, WIN32
SHMEM_SYS=''			# POSIX, IRIX_SPROC, WIN32
THREAD_SYS=''			# POSIX, IRIX_SPROC, WIN32

dnl # Define various CPP macros depending on which threads implementation will
dnl # be used.  If no implementation was defined above, exit configure.
if test "$THREADS" = "POSIX" ; then
    dnl # Do not define _POSIX_C_SOURCE here because it will cause problems
    dnl # when compiling on IRIX.  Instead, define that in the source files
    dnl # where appropriate.
    AC_DEFINE(VJ_USE_PTHREADS,)
    AC_DEFINE(RWSTD_MULTI_THREAD,)
    AC_DEFINE(RW_MULTI_THREAD,)

    dnl # On AIX, it is redundant to define _THREAD_SAFE.
    if test "x$PLATFORM" != "xAIX" ; then
        AC_DEFINE(_THREAD_SAFE,)
    fi

    AC_DEFINE(_THREAD_SAFE,)
    dnl # On Linux, defining _THREAD_SAFE is the same as defining _REENTRANT,
    dnl # so we will not define both.
    if test "x$PLATFORM" != "xLinux" ; then
        AC_DEFINE(_REENTRANT,)
    else
        AC_DEFINE(_GNU_SOURCE,)
    fi

    dnl # Use POSIX threading, mutexes and shared memory.
    MUTEX_SYS='POSIX'
    SHMEM_SYS='POSIX'
    THREAD_SYS='POSIX'

    _vjsave_CFLAGS="$CFLAGS"
    _vjsave_LIBS="$LIBS"

    dnl # This step and the following addition to $LIBS are necessary for
    dnl # properly testing for working POSIX semaphores.
    if test "x$ac_cv_CC_accepts_pthread" = "xyes" ; then
        CFLAGS="$CFLAGS -pthread"
    fi

    LIBS="$LIBS ${_pthread_lib}"

    dnl # If we have sem_init(3), we can use POSIX semaphores.  If not, exit
    dnl # with a fatal error.  If we are using POSIX threads, we need to have
    dnl # working POSIX semaphores too.
    AC_CHECK_FUNC(sem_init,
        [ SEMAPHORE_SYS='POSIX' ; AC_DEFINE(VJ_POSIX_SEMAPHORES,) ],
        AC_CHECK_LIB(posix4, sem_init,
            [ _sem_lib='-lposix4' SEMAPHORE_SYS='POSIX' ;
              AC_DEFINE(VJ_POSIX_SEMAPHORES,)
            ],
            AC_CHECK_LIB(rt, sem_init,
                 [ _sem_lib='-lrt' SEMAPHORE_SYS='POSIX' ;
                   AC_DEFINE(VJ_POSIX_SEMAPHORES,)
                 ],
                 AC_MSG_ERROR(*** POSIX semaphores are required for POSIX threads ***))))

    CFLAGS="${_vjsave_CFLAGS}"
    LIBS="${_vjsave_LIBS}"
elif test "$THREADS" = "WIN32" ; then
    dnl # Set to Win32 threading, synchronization and shared memory.
    SEMPANORE_SYS='WIN32'
    THREAD_SYS='WIN32'
    MUTEX_SYS='WIN32'
    SHMEM_SYS='WIN32'
elif test "$THREADS" = "IRIX_SPROC" ; then
    AC_DEFINE(VJ_IRIX_SPROC,)

    dnl # Set to IRIX_SPROC threading
    THREAD_SYS='IRIX_SPROC'

    SEMAPHORE_SYS='IRIX_SPROC'
    SHMEM_SYS='IRIX_SPROC'
    MUTEX_SYS='IRIX_SPROC'
elif test "x$THREADS" = "x" ; then
    AC_MSG_ERROR(No threading package defined!)
fi

dnl # Get the path to the X-Window libraries and header files.  We will need
dnl # these for all UNIX applications.
AC_PATH_X

dnl # ------------
dnl # OpenGL API.
dnl # ------------
OPENGL_API=''			dnl # 'Y' then we are using OpenGL

if test "x${_with_mesa}" = "xyes" ; then
    MESA='Mesa'
else
    MESA=''
fi

_LIBOPENGL=''

dnl # Test for the OpenGL library if the OpenGL API was enabled.
if test "x${_enable_gl_api}" = "xyes" ; then
    dnl # Save these values in case they need to be restored later.
    _vjsave_CFLAGS="$CFLAGS"
    _vjsave_CPPFLAGS="$CPPFLAGS"
    _vjsave_INCLUDES="$INCLUDES"
    _vjsave_LDFLAGS="$LDFLAGS"

    dnl # Add the user-specified OpenGL installation directory to these paths
    dnl # if one was given.
    if test "x$OGLROOT" != "x$DEFAULT_OGLROOT" ; then
        CPPFLAGS="$CPPFLAGS -I${OGLROOT}/include"
        INCLUDES="$INCLUDES -I${OGLROOT}/include"
        LDFLAGS="-L${OGLROOT}/lib${LIBBITSUF} $LDFLAGS"
    fi

    CFLAGS="$CFLAGS ${_EXTRA_FLAGS}"

    dnl # On HP-UX, we have to compile the test code with aCC (which is
    dnl # required by an above test) because the HP-UX OpenGL 1.1
    dnl # implementation mandates this.
    if test "$PLATFORM" = "HP" ; then
        _vjsave_CC="$CC"
        _vjsave_LIBS="$LIBS"
        CC="$CXX"
        LIBS="$LIBS -l${MESA}GL"

        dnl # Check the cache in case this test was run previously and if not,
        dnl # compile the given code and try to link it against the GL
        dnl # library.  We don't need to test for the existence of GL/gl.h
        dnl # after linking because the test program already includes it.
        AC_CACHE_CHECK(for glEnable in -l${MESA}GL, ac_cv_glEnable_available,
            AC_TRY_LINK([#include <GL/gl.h>], [glEnable(GL_CULL_FACE)],
                ac_cv_glEnable_available='yes',
                [ LIBS="${_vjsave_LIBS}";
                  AC_MSG_ERROR(*** OpenGL API will not be used (library not found) ***) ] ))

        dnl # If the library was found, add the OpenGL API object files to
        dnl # the files to be compiled and enable the OpenGL API compile-time
        dnl # option.
        if test "$ac_cv_glEnable_available" = "yes" ; then
            OPENGL_API="Y"
            AC_DEFINE(VJ_API_OPENGL,)
        fi

        CC="${_vjsave_CC}"
    elif test "$OS_TYPE" = "Win32" ; then
        AC_MSG_WARN(Assuming that OpenGL is available in a standard location)
        OPENGL_API="Y"
        AC_DEFINE(VJ_API_OPENGL,)
    else
        if test "x$x_libraries" != "xNONE" -a "x$x_libraries" != "x" ; then
            LDFLAGS="-L$x_libraries $LDFLAGS"
        fi

        _vjsave_LIBS="$LIBS"

        dnl # If the OpenGL library was found, add the API object files to the
        dnl # files to be compiled and enable the OpenGL API compile-time
        dnl # option.
        AC_CHECK_LIB(${MESA}GL, glEnable, ,
            AC_MSG_ERROR(*** OpenGL API will not be used (GL library not found) ***),
            -lX11 -lXext -lm)

        dnl # This is necessary because AC_CHECK_LIB() adds -l${MESA}GL to
        dnl # $LIBS.  We want to do that ourselves later.
        LIBS="${_vjsave_LIBS}"

        dnl # If we have reached this point, the previous test succeeded.  Now
        dnl # we need to ensure that the compiler can find the GL headers.
        dnl # The goal here is to provide a fallback to the directory in
        dnl # $x_includes since that is a reasonable location for them to be
        dnl # (if they are not in /usr/include).  However, we do not want to
        dnl # bother with this if the user gave us a value for $OGLROOT.
        if test "x$OGLROOT" = "x/usr" -a "x$x_includes" != "x" -a	\
                "x$x_includes" != "xNONE"
        then
            CPPFLAGS="$CPPFLAGS -I$x_includes"
            INCLUDES="$INCLUDES -I$x_includes"
        fi

        AC_CHECK_HEADER(GL/gl.h, ,
            AC_MSG_ERROR(*** OpenGL API will not be used (header not found) ***))

        AC_CHECK_LIB(${MESA}GLU, gluNewQuadric, ,
            AC_MSG_ERROR(*** OpenGL API will not be used (GLU library not found) ***),
            -l${MESA}GL -lm -lX11 -lXext -lXt)

        dnl # This is necessary again because AC_CHECK_LIB() adds -l${MESA}GLU
        dnl # to $LIBS.
        LIBS="${_vjsave_LIBS}"

        AC_CHECK_HEADER(GL/glu.h,
            [ OPENGL_API="Y"; AC_DEFINE(VJ_API_OPENGL,) ],
            AC_MSG_ERROR(*** OpenGL API will not be used (header not found) ***))
    fi

    dnl # Restore $CFLAGS and $CPPFLAGS now that we are done testing.
    CFLAGS="${_vjsave_CFLAGS}"
    CPPFLAGS="${_vjsave_CPPFLAGS}"

    dnl # If OpenGL API files were added, define this extra stuff that is
    dnl # used in some Makefiles.
    if test "x$OPENGL_API" != "x" ; then
        if test "x$OS_TYPE" = "xUNIX" ;  then
            dnl # We do not need to add the path to the X libraries here
            dnl # because it was already added to $LDFLAGS above.  The same
            dnl # is true for the directories containing the GL libraries.
            _LIBOPENGL="-l${MESA}GLU -l${MESA}GL -lX11 -lXext"
        else
            _LIBOPENGL='opengl32.lib glu32.lib'
        fi
    dnl # No OpenGL API files were added, so restore $INCLUDES and $LDFLAGS so
    dnl # that no OpenGL stuff in included in them.
    else
        INCLUDES="${_vjsave_INCLUDES}"
        LDFLAGS="${_vjsave_LDFLAGS}"
    fi
fi

dnl # --------------------
dnl # IRIS Performer API.
dnl # --------------------
PERFORMER_API=''		dnl # 'Y' then we are using Performer

dnl # Test for the Performer library if the Performer API was enabled.
if test "x${_enable_pf_api}" = "xyes" ; then
    _vjsave_CFLAGS="$CFLAGS"
    _vjsave_CPPFLAGS="$CPPFLAGS"
    _vjsave_INCLUDES="$INCLUDES"
    _vjsave_LDFLAGS="$LDFLAGS"
    _vjsave_LIBS="$LIBS"

    dnl # Ensure that /usr/include and /usr/lib are not included multiple
    dnl # times if $PFROOT is "/usr".
    if test "x${PFROOT}" != "x/usr" ; then
        CPPFLAGS="$CPPFLAGS -I${PFROOT}/include"
        INCLUDES="$INCLUDES -I${PFROOT}/include"
        LDFLAGS="-L${PFROOT}/lib${LIBBITSUF} $LDFLAGS"
    fi

    CFLAGS="$CFLAGS $INCLUDES ${_EXTRA_FLAGS}"

    dnl # We are using Performer 2.[23] as defined by the --with-pfver
    dnl # command-line argument.
    if test "x$PF_VER" = "x2.2" -o "x$PF_VER" = "x2.3" ; then
        pf_ext='_ogl'
    dnl # We are using Performer 2.4 or newer.
    else
        pf_ext=''
    fi

    dnl # On Linux, we have to link all the Performer libraries AND libdl to
    dnl # get the check for pfInit() in libpf to compile.
    if test "$PLATFORM" = "Linux" ; then
        LIBS="$LIBS -lpf$pf_ext -lpfdu$pf_ext -lpfui -lpfutil$pf_ext -ldl"
    fi

    dnl # If the Performer library was found, add the API object files to the
    dnl # files to be compiled and enable the Performer API compile-time
    dnl # option.
    AC_CHECK_LIB(pf, pfInit,
        AC_CHECK_HEADER(Performer/pf.h,
            [ PERFORMER_API="Y";
              LIBPERFORMER="-lpf$pf_ext -lpfdu$pf_ext -lpfui -lpfutil$pf_ext";
              AC_DEFINE(VJ_API_PERFORMER,) ],
            AC_MSG_WARN(*** Performer API will not be used (pf.h not found) ***)),
        AC_MSG_WARN(*** Performer API will not be used (library not found) ***))

    if test "x$PERFORMER_API" != "x" ; then
        case $PLATFORM in
            dnl # Under IRIX users will need -limage to load .flt files 
            dnl # referencing .sgi images.
            IRIX)
                LIBPERFORMER="$LIBPERFORMER -limage"
                ;;
            dnl Append -ldl to $LIBPERFORMER on Linux.
            Linux)
                LIBPERFORMER="$LIBPERFORMER -ldl"
                ;;
        esac
    dnl # No Performer API files were added, so restore $INCLUDES and $LDFLAGS
    dnl # so that no OpenGL stuff in included in them.
    else
        INCLUDES="${_vjsave_INCLUDES}"
        LDFLAGS="${_vjsave_LDFLAGS}"
    fi

    CFLAGS="${_vjsave_CFLAGS}"
    CPPFLAGS="${_vjsave_CPPFLAGS}"
    LIBS="${_vjsave_LIBS}"
fi

dnl # -----------
dnl # AudioWorks
dnl # -----------
AUDIO_WORKS='N'
AW_INC=''
AW_LIB=''

if test "x${_with_aw}" != "xno" ; then
    AC_LANG_SAVE
    AC_LANG_CPLUSPLUS

    _vjsave_CPPFLAGS="$CPPFLAGS"
    _vjsave_LDFLAGS="$LDFLAGS"
    _vjsave_LIBS="$LIBS"

    CPPFLAGS="$CPPFLAGS -I${_with_aw}/include/PSI"
    LDFLAGS="$LDFLAGS -L${_with_aw}/lib$LIBBITSUF/PSI"

    AC_CHECK_LIB(aw, awInitSys,
        AC_CHECK_HEADER(aw.h,
            AUDIO_WORKS='Y',
            AC_MSG_WARN(*** AudioWorks will not be used (aw.h not found) ***)),
        AC_MSG_WARN(*** AudioWorks will not be used (library not found) ***),
        -lawhwi -lpsi -laudiofile -lm)

    CPPFLAGS="${_vjsave_CPPFLAGS}"
    LDFLAGS="${_vjsave_LDFLAGS}"
    LIBS="${_vjsave_LIBS}"

    if test "$AUDIO_WORKS" = "Y" ; then
        AW_INC="-I${_with_aw}/include/PSI"
        AW_LIB="-L${_with_aw}/lib${LIBBITSUF}/PSI"

        dnl # This will be used later in test and sample application
        dnl # substitutions.
        _aw_libs='-law -lawhwi -lpsi -laudiofile'
    fi

    AC_LANG_RESTORE
fi

dnl # -----------
dnl # SL Library
dnl # -----------
SL='N'
SL_INC=''
SL_LIB=''

if test "x${_with_sl}" != "xno" ; then
    dnl # Default to 'Y' for this value since this will not actually be
    dnl # required by SL on all platforms.
    _have_audio='Y'

    dnl # If we are on IRIX, we need to check for the SGI Audio Library if
    dnl # we want to use SL.  If it is not found, ${_have_audio} is set to
    dnl # 'N', and the check for SL is not performed.
    if test "$PLATFORM" = "IRIX" ; then
        _vjsave_LIBS="$LIBS"

        AC_CHECK_LIB(audio, alNewConfig,
            AC_CHECK_HEADER(audio.h,
                _have_audio='Y',
                [ _have_audio='N' ;
                  AC_MSG_WARN(*** SGI Audio headers required for SL ***) ]),
            AC_MSG_WARN(*** SGI Audio library required for SL ***))

        LIBS="${_vjsave_LIBS}"
    fi

    dnl # Do not bother to check for SL unless ${_have_audio} is 'Y'.
    if test "${_have_audio}" = "Y" ; then
        AC_LANG_SAVE
        AC_LANG_CPLUSPLUS

        _vjsave_CPPFLAGS="$CPPFLAGS"
        _vjsave_LDFLAGS="$LDFLAGS"
        _vjsave_LIBS="$LIBS"

        CPPFLAGS="$CPPFLAGS -I${_with_sl}/include/sl"
        LDFLAGS="$LDFLAGS -L${_with_sl}/lib"
        LIBS="$LIBS -lsl -laudio -lm"

        AC_CACHE_CHECK(for slScheduler::getCurrent in -lsl,
            ac_cv_getCurrent_in_sl,
            AC_TRY_LINK([#include <sl.h> ],
                        [ slScheduler::getCurrent(); ],
                        [ ac_cv_getCurrent_in_sl='yes' ; rm -rf ./ii_files ;
                          SL='Y' ],
                        ac_cv_getCurrent_in_sl='no'))

        CPPFLAGS="${_vjsave_CPPFLAGS}"
        LDFLAGS="${_vjsave_LDFLAGS}"
        LIBS="${_vjsave_LIBS}"

        if test "$SL" = "Y" ; then
            SL_INC="-I${_with_sl}/include/sl"
            SL_LIB="-L${_with_sl}/lib"

            dnl # This will be used later in test and sample application
            dnl # substitutions.
            _sl_libs="-lsl"

            if test "$PLATFORM" = "IRIX" ; then
                _sl_libs="${_sl_libs} -laudio"
            fi
        else
            AC_MSG_WARN(*** SL library will not be used ***)
        fi

        AC_LANG_RESTORE
    fi
fi

dnl # -------------------------------------------------------------------------
dnl # Checks for header files.
dnl # -------------------------------------------------------------------------
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/file.h sys/ioctl.h	\
                 sys/time.h termios.h unistd.h sys/z8530.h		\
                 sys/capability.h sys/stdsyms.h inttypes.h)

dnl # All of the above header file checks may not be necessary ...

dnl # -------------------------------------------------------------------------
dnl # Checks for typedefs, structures, and compiler characteristics.
dnl # -------------------------------------------------------------------------
AC_TYPE_PID_T
AC_TYPE_SIZE_T

dnl # The following checks for availability of the socklen_t type.  Since it
dnl # is supposed to be defined in sys/socket.h, the usual AC_CHECK_TYPE
dnl # method will not work.
AC_CACHE_CHECK(for socklen_t, ac_cv_has_socklen_t,
    AC_TRY_COMPILE([#include <sys/types.h>
                    #include<sys/socket.h> ],
                   [ socklen_t var; ],
                   ac_cv_has_socklen_t='yes',
                   ac_cv_has_socklen_t='no'))

if test "x$ac_cv_has_socklen_t" = "xno" ; then
    AC_DEFINE(socklen_t, int)
fi

if test "$OS_TYPE" = "Win32" ; then
    AC_CHECK_TYPE(u_int, UINT)
    AC_CHECK_TYPE(int32_t, __int32)
    AC_CHECK_TYPE(int64_t, __int64)
else
    AC_CHECK_TYPE(u_int, unsigned int)
fi

AC_CHECK_TYPE(caddr_t, char*)

dnl # -------------------------------------------------------------------------
dnl # Checks for library functions.
dnl # -------------------------------------------------------------------------
AC_CHECK_FUNCS(gettimeofday sleep socket strcasecmp strdup strerror	\
               strtod usleep)

dnl # Ensure that we have sched_yield(3).  On Solaris, sched_yield(3) and its
dnl # synchronization friends are in libposix4.
_vjsave_LIBS="$LIBS"
AC_CHECK_FUNC(sched_yield, AC_DEFINE(HAVE_SCHED_YIELD),
              AC_CHECK_LIB(posix4, sched_yield,
                  [ _sched_lib='-lposix4' ; AC_DEFINE(HAVE_SCHED_YIELD) ]))
LIBS="${_vjsave_LIBS}"

dnl # In a Win32 environment with MS Visual C++ as the compiler, these math
dnl # functions are not in any special library.  Test for them normally.
if test "$OS_TYPE" = "Win32" -a "x${_use_gcc}" != "xyes" ; then
    AC_CHECK_FUNCS(sinf cosf sqrtf asinf acosf atan2f fabsf)
dnl # Otherwise, they are in libmath if they are anywhere.
else
    AC_CHECK_LIB(m, sinf, AC_DEFINE(HAVE_SINF))
    AC_CHECK_LIB(m, cosf, AC_DEFINE(HAVE_COSF))
    AC_CHECK_LIB(m, sqrtf, AC_DEFINE(HAVE_SQRTF))
    AC_CHECK_LIB(m, asinf, AC_DEFINE(HAVE_ASINF))
    AC_CHECK_LIB(m, acosf, AC_DEFINE(HAVE_ACOSF))
    AC_CHECK_LIB(m, atan2f, AC_DEFINE(HAVE_ATAN2F))
    AC_CHECK_LIB(m, fabsf, AC_DEFINE(HAVE_FABSF))
fi

dnl # All of the above function checks may not be necessary ...

dnl # -------------------------------------------------------------------------
dnl # Miscellaneous checks.
dnl # -------------------------------------------------------------------------

_vjsave_PATH="$PATH"
PATH="/usr/xpg4/bin:$PATH"

dnl # Set $OWNER_NAME here in case the check for the user-specified owner
dnl # failed.  This provides a simple fallback in that case.
OWNER_NAME=`id -un`

dnl # Make sure that the named install owner is actually available and can
dnl # be set by this user.  This is done by creating a file (conftest.c) and
dnl # setting the owner name to be what is in ${_install_owner}.  Any output
dnl # from chown(1) is redirected to chown_out.  If chown_out has non-zero
dnl # length, chown(1) gave error output, and thus the name is not avaialble.
if test "x${_install_owner}" != "x" ; then
    AC_CACHE_CHECK(for user ${_install_owner}, ac_cv_install_owner_available,
        [ touch conftest.c
          chown ${_install_owner} conftest.c >chown_out 2>&1
          if test -s chown_out ; then
              ac_cv_install_owner_available=no
          else
              ac_cv_install_owner_available=yes
          fi
          rm -f conftest.c chown_out
        ])

    if test "$ac_cv_install_owner_available" = "yes" ; then
        OWNER_NAME="${_install_owner}"
    fi
fi

dnl # Set $GROUP_NAME here in case the check for the user-specified group
dnl # failed.  This provides a simple fallback in that case.
GROUP_NAME=`id -gn`

dnl # Make sure that the named install group is actually available and can
dnl # be set by this user.  This is done by creating a file (conftest.c) and
dnl # setting the group name to be what is in ${_install_group}.  Any output
dnl # from chgrp(1) is redirected to chgrp_out.  If chgrp_out has non-zero
dnl # length, chgrp(1) gave error output, and thus the group is not avaialble.
if test "x${_install_group}" != "x" ; then
    AC_CACHE_CHECK(for ${_install_group} group, ac_cv_install_group_available,
        [ touch conftest.c
          chgrp ${_install_group} conftest.c >chgrp_out 2>&1
          if test -s chgrp_out ; then
              ac_cv_install_group_available=no
          else
              ac_cv_install_group_available=yes
          fi
          rm -f conftest.c chgrp_out
        ])

    if test "$ac_cv_install_group_available" = "yes" ; then
        GROUP_NAME="${_install_group}"
    fi
fi

PATH="${_vjsave_PATH}"

dnl # -------------------------------------------------------------------------
dnl # Do Makefile substitutions.
dnl # -------------------------------------------------------------------------
EXTRA_LINK_FLAGS=''		dnl # For use in linking Juggler applications

if test "$PLATFORM" = "IRIX" ; then
    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -woff 1183,3322 -w2"
    EXTRA_LINK_FLAGS="-all"
elif test "$OS_TYPE" = "Win32" -a "x${_use_gcc}" != "xyes" ; then
    CFLAGS="$CFLAGS -W3 -GR -GX -EHc -QIfdiv -QI0f"
    CXXFLAGS="$CXXFLAGS -W3 -GR -GX -EHc -QIfdiv -QI0f"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -MTd"
fi

if test "$ac_cv_CC_accepts_pthread" = "yes" ; then
    LDFLAGS="$LDFLAGS -pthread"
fi

dnl # If we are using pthreads, add the library containing the pthread calls to
dnl # $LIBS.  This must be done here because the $APP_VJ_LIBS* stuff below
dnl # uses $LIBS.
if test "x$THREADS" = "xPOSIX" -a "x${_pthread_lib}" != "x" ; then
    LIBS="$LIBS ${_pthread_lib}"
fi

dnl # Do the same if we are using POSIX semaphores.
if test "x$SEMAPHORE_SYS" = "xPOSIX" -a "x${_sem_lib}" != "x" ; then
    LIBS="$LIBS ${_sem_lib}"
fi

dnl # And do the same again if sched_yield(3) is in a special library (that
dnl # is not the same as ${_sem_lib}).
if test "x${_sched_lib}" = "x" -a "x${_sem_lib}" != "x${_sched_lib}" ; then
    LIBS="$LIBS ${_sched_lib}"
fi

DEPENDFLAGS=""
DEPEND_EXTRAS=""

dnl # For makedepend(1) to work properly on HP-UX with aCC, we have to
dnl # include these extra paths.
if test "$PLATFORM" = "HP" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="-I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "$OS_TYPE" = "Win32" ; then
    DEPEND_EXTRAS='-D_WIN32 -D_M_IX86 -D__cplusplus'
fi

dnl # $srcdir is the root directory of the juggler source tree.  To get a
dnl # value for $VJROOT_ABS, we cd there and save the value of running pwd.
dnl # Then return to the directory where configure is being run ($topdir).
topdir=`pwd`
cd "$srcdir"
VJROOT_ABS=`pwd`
cd "$topdir"

dnl # Define the base path to the source directory using ${VJROOT_ABS} as an
dnl # alternative to using ${srcdir}.
VJ_SRCDIR='${VJROOT_ABS}'
UNIX_VJROOT_ABS="$VJROOT_ABS"

dnl # Variables set in Makefiles found in the application trees.  All variables
dnl # listed are for use only in the Makefile.in's found in that tree unless
dnl # otherwise noted.  They are used in the following way:
dnl #
dnl #     * APP_EXTRA_FLAGS: Extra flags for the compiler and linker.
dnl #     * APP_EXTRA_FLAGS_PF: Extra flags for the compiler and linker when
dnl #       building Performer applications.
dnl #     * APP_VJ_INC_AW: The include path for the AudioWorks header files.
dnl #     * APP_VJ_INC_SL: The include path for hte SL header files.
dnl #     * APP_VJ_LIBS_BASIC: The basic VR Juggler library.
dnl #     * APP_VJ_LIBS_BASIC_INST: Same as the above but is for installed
dnl #       Makefiles.
dnl #     * APP_VJ_LIBS_GL: The VR Juggler OpenGL API library.
dnl #     * APP_VJ_LIBS_PF: The VR Juggler Performer API library.
dnl #     * APP_VJ_LIBS_AW: The VR Juggler AudioWorks API library.
dnl #     * APP_VJ_LIBS_SL: The VR Juggler SL API library.
dnl #     * APP_VJ_LIBS_UTILS: The VR Juggler general utilities library.
dnl #     * APP_LIBS_BASIC: The _most basic_ basic libraries needed for
dnl #       compiling (e.g., -lm).
dnl #     * APP_EXTRA_LIBS_BEGIN: Options used at the beginning of the list
dnl #       of extra libraries.
dnl #     * APP_EXTRA_LIBS_END: Options used at the end of the list of extra
dnl #       libraries.
dnl #     * APP_EXTRA_LIBS_BASIC: A basic set of extra libraries and linker
dnl #       flags needed for compiling.  These are put after those listed in
dnl #       the previous variables in the compile line.
dnl #     * APP_EXTRA_LIBS_GL: The OpenGL libraries needed for compiling with
dnl #       the OpenGL API.
dnl #     * APP_EXTRA_LIBS_PF: The Performer libraries needed for compiling
dnl #       with the Performer API.
dnl #     * APP_EXTRA_LIBS_AW: The AudioWorks libraries needed for compiling
dnl #       with the AudioWorks sound system.
dnl #     * APP_EXTRA_LIBS_SL: The SL libraries needed for compiling with the
dnl #       SL sound libraries.
dnl #
APP_EXTRA_FLAGS="${_EXTRA_FLAGS}"

dnl # If we have AudioWorks, make it available in the application makefiles.
if test "$AUDIO_WORKS" = "Y" ; then
    if test "$OS_TYPE" = "Win32" ; then
        APP_VJ_LIBS_AW='Juggler_aw.lib'
    else
        APP_VJ_LIBS_AW='-lJuggler_aw'
    fi

    APP_EXTRA_INC_AW="$AW_INC"
    APP_EXTRA_LIBS_AW="$AW_LIB ${_aw_libs}"
fi

dnl # If we have SL, make it available in the application makefiles.
if test "$SL" = "Y" ; then
    if test "$OS_TYPE" = "Win32" ; then
        APP_VJ_LIBS_SL='Juggler_sl.lib'
    else
        APP_VJ_LIBS_SL='-lJuggler_sl'
    fi

    APP_EXTRA_INC_SL="$SL_INC"
    APP_EXTRA_LIBS_SL="$SL_LIB ${_sl_libs}"
fi

if test "$OS_TYPE" = "UNIX" ; then
    if test "$PLATFORM" = "IRIX" ; then
        APP_VJ_LIBS_BEGIN="-B static -L\$(VJ_BASE_DIR)/lib${LIBBITSUF}"
        APP_VJ_LIBS_END=''
        APP_VJ_LIBS_BASIC='-lJuggler -lJuggler_utils'

        APP_VJ_LIBS_BEGIN_INST="-B dynamic -L\$(VJ_BASE_DIR)/lib${LIBBITSUF}"
        APP_VJ_LIBS_END_INST="-Wl,-rpath,\$(VJ_BASE_DIR)/lib$LIBBITSUF"
        APP_VJ_LIBS_BASIC_INST='-lJuggler -lJuggler_utils'

        APP_EXTRA_LIBS_BEGIN='-B dynamic'
        APP_EXTRA_LIBS_END='-lm'
    dnl # If we are compiling with GNU C++, we can pass -Bstatic and -Bdynamic
    dnl # to the GNU linker to link only the VR Juggler libs statically.
    elif test "x$GXX" = "xyes" ; then
        APP_VJ_LIBS_BEGIN="-Wl,-Bstatic -L\$(VJ_BASE_DIR)/lib${LIBBITSUF}"
        APP_VJ_LIBS_END=''
        APP_VJ_LIBS_BASIC='-lJuggler -lJuggler_utils'

        APP_VJ_LIBS_BEGIN_INST="-Wl,-Bdynamic -L\$(VJ_BASE_DIR)/lib${LIBBITSUF}"
        APP_VJ_LIBS_END_INST="-Wl,-rpath,\$(VJ_BASE_DIR)/lib$LIBBITSUF"
        APP_VJ_LIBS_BASIC_INST="$APP_VJ_LIBS_BASIC"

        APP_EXTRA_LIBS_BEGIN='-Wl,-Bdynamic'
        APP_EXTRA_LIBS_END="-lm"
    else
        dnl # For now, we are disabling static linking for the sample
        dnl # applications when compiled in a developer's build tree.  This
        dnl # is only the case on non-IRIX platforms.
        APP_VJ_LIBS_BEGIN="-L\$(VJ_BASE_DIR)/lib${LIBBITSUF}"
        APP_VJ_LIBS_END=''
        APP_VJ_LIBS_BASIC='-lJuggler -lJuggler_utils'

        APP_VJ_LIBS_BEGIN_INST="$APP_VJ_LIBS_BEGIN"
        APP_VJ_LIBS_END_INST="$APP_VJ_LIBS_END"
        APP_VJ_LIBS_BASIC_INST="$APP_VJ_LIBS_BASIC"

        APP_EXTRA_LIBS_END="-lm"
    fi

    dnl # FreeBSD needs to use libcompat for linking.
    if test "x$PLATFORM" = "xFreeBSD" ; then
        APP_EXTRA_LIBS_END="$APP_EXTRA_LIBS_END -lcompat"
    fi

    APP_VJ_LIBS_GL="-lJuggler_ogl"
    APP_VJ_LIBS_PF="-lJuggler_pf"
    APP_VJ_LIBS_UTILS="-lJuggler_utils"
    APP_EXTRA_LIBS_BASIC="$LDFLAGS $LIBS"
    APP_EXTRA_LIBS_GL="${_LIBOPENGL}"
    APP_EXTRA_LIBS_PF="$LIBPERFORMER"

    if test "x$PLATFORM" = "xLinux" ; then
        APP_EXTRA_FLAGS_PF="-O $APP_EXTRA_FLAGS_PF"
    fi
elif test "$OS_TYPE" = "Win32" ; then
    APP_VJ_LIBS_BEGIN="-link -libpath:\$(VJ_BASE_DIR)/lib/debug"
    APP_VJ_LIBS_END=''
    APP_VJ_LIBS_BASIC='Juggler.lib Juggler_utils.lib'
    APP_VJ_LIBS_BEGIN_INST="$APP_VJ_LIBS_BEGIN"
    APP_VJ_LIBS_END_INST="$APP_VJ_LIBS_END"
    APP_VJ_LIBS_BASIC_INST="$APP_VJ_LIBS_BASIC"
    APP_LIBS_BASIC='comctl32.lib user32.lib gdi32.lib ws2_32.lib'
    APP_VJ_LIBS_GL='Juggler_ogl.lib'
    APP_VJ_LIBS_PF='Juggler_pf.lib'
    APP_VJ_LIBS_UTILS='Juggler_utils.lib'
    APP_EXTRA_LIBS_BASIC="$LDFLAGS $LIBS"
    APP_EXTRA_LIBS_GL="${_LIBOPENGL}"
    APP_EXTRA_LIBS_PF="$LIBPERFORMER"
fi

dnl # Translate paths from UNIX-style to Win32.
if test "$OS_TYPE" = "Win32" ; then
    topdir=`unix2dos "$topdir"`
    SAFE_VJROOT_ABS=`unix2dos "$VJROOT_ABS"`
    VJ_SRCDIR=`unix2dos "$VJ_SRCDIR"`

    DEPEND_EXTRAS=`unix2dos "$DEPEND_EXTRAS"`
    INCLUDES=`unix2dos "$INCLUDES"`
    LIBS=`unix2dos "$LIBS"`
    LN_S='cp'
    MTREE_CMD=`unix2dos "$MTREE_CMD"`

    JDK_HOME=`unix2dos "$JDK_HOME"`

    APP_EXTRA_LIBS_BASIC=`unix2dos "$APP_EXTRA_LIBS_BASIC"`
    APP_EXTRA_LIBS_GL=`unix2dos "$APP_EXTRA_LIBS_GL"`
    APP_EXTRA_LIBS_PF=`unix2dos "$APP_EXTRA_LIBS_PF"`
    APP_EXTRA_LIBS_AW=`unix2dos "$APP_EXTRA_LIBS_AW"`
    APP_EXTRA_LIBS_SL=`unix2dos "$APP_EXTRA_LIBS_SL"`
else
    SAFE_VJROOT_ABS="$VJROOT_ABS"
fi

dnl # Set up some sed expressions that will help separate the share directory
dnl # from the full installation prefix.
_prefix_var_exp='s|^${prefix}/||'

if test "x$prefix" = "xNONE" ; then
    _prefix_exp="s|^$ac_default_prefix/||"
else
    _prefix_exp="s|^$prefix/||"
fi

dnl # Make a best-effort attempt to extract the actual share directory from
dnl # the full installation prefix.  This is not foolproof, but it will work
dnl # in almost all cases.  A person would have to be doing something
dnl # malicious or foolish to make it break.
VJ_SHARE_DIR=`echo "$datadir" | sed -e "${_prefix_var_exp}"`
VJ_SHARE_DIR=`echo "$VJ_SHARE_DIR" | sed -e "${_prefix_exp}"`

# Information needed to generate juggler-config.
case $THREADS in
    IRIX_SPROC)
        subsystem_cxxflags="$INCLUDES"
        subsystem_libs="${_sem_lib}"
        static_begin="-B static"
        static_end="-B dynamic"
        vrj_ldflags="-L\$prefix/lib\$LIBBITSUF"
        vrj_libs='-lJuggler -lJuggler_utils -lJuggler_ogl'
        ;;
    POSIX)
        subsystem_cxxflags="$INCLUDES"
        subsystem_libs="${_pthread_lib} ${_sem_lib}"

        if test "x$GXX" = "xyes" ; then
            static_begin="-Wl,-Bstatic"
            static_end="-Wl,-Bdynamic"
        else
            static_begin="-B static"
            static_end="-B dynamic"
        fi

        vrj_ldflags="-L\$prefix/lib\$LIBBITSUF"
        vrj_libs='-lJuggler -lJuggler_utils -lJuggler_ogl'
        ;;
    WIN32)
        subsystem_cxxflags="$INCLUDES"
        subsystem_libs="comctl32.lib user32.lib gdi32.lib ws2_32.lib"
        vrj_ldflags="-link -libpath:\$prefix/lib/debug $NSPR_LDFLAGS"
        vrj_libs='Juggler.lib Juggler_utils.lib Juggler_ogl.lib'
        ;;
esac

case $OS_TYPE in
    UNIX)
        Juggler_lib='-lJuggler'
        Juggler_utils_lib='-lJuggler_utils'
        Juggler_ogl_lib='-lJuggler_ogl'

        if test "x$PLATFORM" = "xIRIX" ; then
            vrj_n32_flags='-n32'
            vrj_64_flags='-64'
            vrj_libbitsuf_n32='32'
            vrj_libbitsuf_64='64'
        fi

        if test "x$PERFORMER_API" = "xY" ; then
            Juggler_pf_lib='-lJuggler_pf'
        fi

        if test "x$AUDIO_WORKS" = "xY" ; then
            Juggler_aw_lib='-lJuggler_aw'
        fi

        if test "x$SL" = "xY" ; then
            Juggler_sl_lib='-lJuggler_sl'
        fi
        ;;
    WIN32)
        Juggler_lib='Juggler.lib'
        Juggler_utils_lib='Juggler_utils.lib'
        Juggler_ogl_lib='Juggler_ogl.lib'
        ;;
esac

vrj_extra_ldflags="$APP_EXTRA_LIBS_BEGIN"
vrj_extra_libs="$APP_EXTRA_LIBS_BASIC $APP_EXTRA_LIBS_GL $APP_EXTRA_LIBS_END"

AC_SUBST(topdir)
AC_SUBST(UNIX_VJROOT_ABS)
AC_SUBST(SAFE_VJROOT_ABS)
AC_SUBST(VJ_SRCDIR)
AC_SUBST(VJ_SHARE_DIR)

AC_SUBST(AR)
AC_SUBST(ARFLAGS)
AC_SUBST(AR_NAME_FLAG)
AC_SUBST(CFLAGS)
AC_SUBST(CFLAGS_DYNLIB)
AC_SUBST(CXXFLAGS)
AC_SUBST(CXXFLAGS_DYNLIB)
AC_SUBST(DEP_GEN_FLAG)
AC_SUBST(DEPENDFLAGS)
AC_SUBST(DEPEND_EXTRAS)
AC_SUBST(EXTRA_LINK_FLAGS)
AC_SUBST(INCLUDES)
AC_SUBST(LD)
AC_SUBST(LIBS)
AC_SUBST(LDOPTS)
AC_SUBST(LDOPTS_DBG)
AC_SUBST(LDOPTS_OPT)
AC_SUBST(OBJ_FILE_SUFFIX)
AC_SUBST(OBJ_NAME_FLAG)
AC_SUBST(DBG_FLAGS)
AC_SUBST(OPT_FLAGS)
AC_SUBST(PERL)

AC_SUBST(OWNER_NAME)
AC_SUBST(GROUP_NAME)
AC_SUBST(FILE_PERMS)
AC_SUBST(EXEC_PERMS)
AC_SUBST(DIR_PERMS)

AC_SUBST(LIB_PREFIX)
AC_SUBST(STATICLIB_EXT)
AC_SUBST(SHAREDLIB_EXT)

AC_SUBST(ABI)
AC_SUBST(ISA)
AC_SUBST(ABI_LIST)
AC_SUBST(LIBBITSUF)
AC_SUBST(OS_TYPE)
AC_SUBST(PLATFORM)
AC_SUBST(DSOREGFILE)
AC_SUBST(DSOVERSION)
AC_SUBST(DSOVERSIONOPTS)

AC_SUBST(JDK_HOME)
AC_SUBST(JAVAC)
AC_SUBST(JAR)
AC_SUBST(BUILD_GUI)

AC_SUBST(OGLROOT)
AC_SUBST(PFROOT)

AC_SUBST(OPENGL_API)
AC_SUBST(PERFORMER_API)

AC_SUBST(SEMAPHORE_SYS)
AC_SUBST(SHMEM_SYS)
AC_SUBST(MUTEX_SYS)
AC_SUBST(THREAD_SYS)

AC_SUBST(AUDIO_WORKS)
AC_SUBST(AW_INC)
AC_SUBST(AW_LIB)
AC_SUBST(SL)
AC_SUBST(SL_INC)
AC_SUBST(SL_LIB)

AC_SUBST(APP_EXTRA_FLAGS)
AC_SUBST(APP_EXTRA_FLAGS_PF)
AC_SUBST(APP_EXTRA_INC_AW)
AC_SUBST(APP_EXTRA_INC_SL)
AC_SUBST(APP_VJ_LIBS_BEGIN)
AC_SUBST(APP_VJ_LIBS_END)
AC_SUBST(APP_VJ_LIBS_BASIC)
AC_SUBST(APP_VJ_LIBS_BEGIN_INST)
AC_SUBST(APP_VJ_LIBS_END_INST)
AC_SUBST(APP_VJ_LIBS_BASIC_INST)
AC_SUBST(APP_VJ_LIBS_GL)
AC_SUBST(APP_VJ_LIBS_PF)
AC_SUBST(APP_VJ_LIBS_AW)
AC_SUBST(APP_VJ_LIBS_SL)
AC_SUBST(APP_VJ_LIBS_UTILS)
AC_SUBST(APP_LIBS_BASIC)
AC_SUBST(APP_EXTRA_LIBS_BEGIN)
AC_SUBST(APP_EXTRA_LIBS_END)
AC_SUBST(APP_EXTRA_LIBS_BASIC)
AC_SUBST(APP_EXTRA_LIBS_GL)
AC_SUBST(APP_EXTRA_LIBS_PF)
AC_SUBST(APP_EXTRA_LIBS_AW)
AC_SUBST(APP_EXTRA_LIBS_SL)

AC_SUBST(subsystem_cxxflags)
AC_SUBST(subsystem_libs)
AC_SUBST(static_begin)
AC_SUBST(static_end)
AC_SUBST(vrj_ldflags)
AC_SUBST(vrj_libs)
AC_SUBST(Juggler_lib)
AC_SUBST(Juggler_utils_lib)
AC_SUBST(Juggler_ogl_lib)
AC_SUBST(Juggler_pf_lib)
AC_SUBST(Juggler_aw_lib)
AC_SUBST(Juggler_pf_lib)
AC_SUBST(vrj_extra_ldflags)
AC_SUBST(vrj_extra_libs)
AC_SUBST(vrj_n32_flags)
AC_SUBST(vrj_64_flags)
AC_SUBST(vrj_libbitsuf_n32)
AC_SUBST(vrj_libbitsuf_64)

dnl # -------------------------------------------------------------------------
dnl # Final file generation step.
dnl # -------------------------------------------------------------------------

dnl # Ensure that the release directory exists since configure would not
dnl # create it otherwise.
if test ! -d release ; then
    mkdir release
    mkdir release/mtree
fi

dnl # Create the VJ.lib.dist file in release/mtree.  This is generated from
dnl # scratch since it cannot be generalized into a template using our
dnl # library directory scheme.  The only time this file needs to be generated
dnl # is when configure is run, so it is not set up to be one of the commands
dnl # that config.status can execute.
_lib_file='release/mtree/VJ.lib.dist'
_set_line="/set type=dir mode=$DIR_PERMS uname=$OWNER_NAME gname=$GROUP_NAME"

dnl # Ensure that the file exists and has zero length.  Then write out the
dnl # /set line which is going to be there no matter what.
echo "creating ${_lib_file}"
echo >${_lib_file}
echo "${_set_line}" >>${_lib_file}
echo "" >>${_lib_file}

dnl # On IRIX, it's easy to compile for different ABI/ISA combinations, so
dnl # we just make cases for all -n32/-64/-mips3/-mips4 settings.
if test "x$PLATFORM" = "xIRIX" ; then
    cat >>${_lib_file} <<END_IRIX_DIST
.
    lib32
	mips3
	    debug
	    ..
	    opt
	    ..
	..
	mips4
	    debug
	    ..
	    opt
	    ..
	..
    ..
    lib64
	mips3
	    debug
	    ..
	    opt
	    ..
	..
	mips4
	    debug
	    ..
	    opt
	    ..
	..
    ..
..
END_IRIX_DIST
dnl # On HP-UX, the lib directory needs a 64-bit subdirectory.
elif test "x$PLATFORM" = "xHP" ; then
    cat >>${_lib_file} <<END_HP_DIST
.
    lib
	$ISA
	    debug
	    ..
	    opt
	    ..
	..
	pa20_64
	    $ISA
		debug
		..
		opt
		..
	    ..
	..
    ..
..
END_HP_DIST
dnl # If a value for $ISA has been set (which is the case for some platforms),
dnl # create a subdirectory in lib for that value.
elif test "x$ISA" != "x" ; then
    cat >>${_lib_file} <<END_ISA_DIST
.
    lib
	$ISA
	    debug
	    ..
	    opt
	    ..
	..
    ..
..
END_ISA_DIST
dnl # In all other cases, just make a simple directory tree for debugging and
dnl # optimized libraries.
else
    cat >>${_lib_file} <<END_DIST
.
    lib
	debug
	..
	opt
	..
    ..
..
END_DIST
fi

AC_OUTPUT(Makefile
          Makefile.base
          Config/Makefile
          Environment/Makefile
          GUI/Makefile
          Input/Makefile
          Input/Filter/Makefile
          Input/InputManager/Makefile
          Input/Multi/Makefile
          Input/ibox/Makefile
          Input/vjGesture/Makefile
          Input/vjGlove/Makefile
          Input/vjInput/Makefile
          Input/vjKeyboard/Makefile
          Input/vjPosition/Makefile
          Input/vjSim/Makefile
	      Input/intersense/Makefile
          Kernel/Makefile
          Kernel/GL/Makefile
		  Kernel/OSG/Makefile
          Kernel/Pf/Makefile
          Math/Makefile
          Performance/Makefile
          SharedMem/Makefile
          Sound/Makefile
          Sound/aw/Makefile
          Sound/sl/Makefile
          Sound/pf/Makefile
          Sync/Makefile
          Threads/Makefile
          Utils/Makefile
          samples/Makefile
          samples/ogl/Makefile
          samples/ogl/analog/Makefile
          samples/ogl/combo/Makefile
          samples/ogl/cones/Makefile
          samples/ogl/cubes/Makefile
          samples/ogl/glove/Makefile
          samples/ogl/digitalGlove/Makefile
          samples/ogl/simpleGlove/Makefile
          samples/ogl/texture/Makefile
          samples/ogl/torus/Makefile
          samples/ogl/wand/Makefile
		  samples/OSG/Makefile
		  samples/OSG/osgNav/Makefile
          samples/pf/Makefile
          samples/pf/pfConfigNav/Makefile
          samples/pf/pfNav/Makefile
          samples/tutorials/Makefile
          samples/tutorials/simpleInput/Makefile
          samples/tutorials/simplePf/Makefile
          test/Makefile 
          test/TestSuite/Makefile
          test/Math/Makefile 
          test/Matrix/Makefile 
          test/Quat/Makefile
          test/Sync/Makefile 
          test/input/Makefile
          test/testDynamicCastSTL/Makefile 
          test/threads/Makefile
          tools/Makefile
          Doc/Makefile
          release/mtree/VJ.data.dist
          release/mtree/VJ.include.dist
          release/mtree/VJ.install.dist
          release/mtree/VJ.samples.dist
          release/mtree/VJ.test.dist
          release/mtree/VJ.tools.dist
          VARS.pl)

dnl # Create a script for handy reconfiguration of a build tree.  It removes
dnl # configure's cache and status files and then runs configure with the
dnl # same arguments.
: ${RECONFIG=./reconfig}

echo "creating $RECONFIG"
rm -f $RECONFIG
cat > $RECONFIG <<RECONFIG_SCRIPT
rm -f config.status config.cache config.log
$0 $ac_configure_args
RECONFIG_SCRIPT
chmod 755 $RECONFIG

cat <<BUILD_INFO

 Remember that you need to build Juggler with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the Juggler distribution.

BUILD_INFO
