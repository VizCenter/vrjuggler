dnl #
dnl # VRJuggler
dnl #   Copyright (C) 1997,1998,1999,2000
dnl #   Iowa State University Research Foundation, Inc.
dnl #   All Rights Reserved
dnl #
dnl # Original Authors:
dnl #   Allen Bierbaum, Christopher Just,
dnl #   Patrick Hartling, Kevin Meinert,
dnl #   Carolina Cruz-Neira, Albert Baker
dnl #
dnl # This library is free software; you can redistribute it and/or
dnl # modify it under the terms of the GNU Library General Public
dnl # License as published by the Free Software Foundation; either
dnl # version 2 of the License, or (at your option) any later version.
dnl #
dnl # This library is distributed in the hope that it will be useful,
dnl # but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl # Library General Public License for more details.
dnl #
dnl # You should have received a copy of the GNU Library General Public
dnl # License along with this library; if not, write to the
dnl # Free Software Foundation, Inc., 59 Temple Place - Suite 330,
dnl # Boston, MA 02111-1307, USA.
dnl #
dnl # -----------------------------------------------------------------
dnl # File:          $RCSfile$
dnl # Date modified: $Date$
dnl # Version:       $Revision$
dnl # -----------------------------------------------------------------
dnl #

dnl # -------------------------------------------------------------------------
dnl # Base configure.in for VR Juggler.
dnl # -------------------------------------------------------------------------
dnl # This file is "compiled" by GNU autoconf to generate the configure script
dnl # that is actually run.
dnl # -------------------------------------------------------------------------

AC_REVISION($Revision$)
AC_INIT(vjConfig.h)
AC_CONFIG_HEADER(vjDefines.h)

dnl # -------------------------------------------------------------------------
dnl # Helper subroutines.
dnl # -------------------------------------------------------------------------

dnl # UNIX path translator.  This converts a UNIX-style path to a DOS/Win32
dnl # path.  With this routine, we can safely use UNIX paths for all Win32
dnl # variables while the configure script runs.  Then, immediately before
dnl # Makefile substitution is done, we can translate all the paths to
dnl # DOS-style for use in the Makefiles.
unix2dos ( ) {
    dnl # This expression changes a "//C" drive name to "C:".  It has a pair
    dnl # of surrounding []'s because those symbols have special meaning to
    dnl # m4(1).  Without them, the first pair of []'s in the regular
    dnl # expression will be lost.
    _drive_exp=['s/^\/\/\([[:alpha:]]\)/\1:/']
    _retval=`echo $1 | sed -e "${_drive_exp}"`

    echo "${_retval}"
}

dnl # DOS path translator.  This converts a DOS-style path to a UNIX path.
dos2unix ( ) {
    dnl # All expressions hers are enclosed in []'s because those symbols
    dnl # have special meaning to m4(1).  This is the same situation as
    dnl # above.

    dnl # This changes \'s to /'s and escapes any whitespace in the path.
    _slash_exp=['s/\\/\//g']
    _ws_esc_exp=['s/ /\\ /g']
    _unix_root=`echo "$1" | sed -e "${_slash_exp}" -e "${_ws_esc_exp}"`

    dnl # This changes the leading "C:" to "//C" (for the appropriate drive
    dnl # letter).
    _colon_rem_exp=['s/^\([[:alpha:]]\):/\/\/\1/']
    _retval=`echo "${_unix_root}" | sed -e "${_colon_rem_exp}"`

    echo "${_retval}"
}

dnl # -------------------------------------------------------------------------
dnl # Command-line arguments (--enable-option, --with-pkg=package_name).
dnl # -------------------------------------------------------------------------

dnl # -------------------------------------------- #
dnl # --with-pkg[=arg] and --without-pkg arguments #
dnl # -------------------------------------------- #

dnl # Force the use of GCC as the compiler.
dnl # NOTE: This is not fully implemented yet for any platform, but it is
dnl # partially usable on Windows.
AC_ARG_WITH(gcc,
            [  --with-gcc              Force the use of GCC as the compiler],
            _use_gcc="$withval")

dnl # Enable binary format.  Possible values are "O32", "N32" or "64".
dnl # The default is "N32".
AC_ARG_WITH(abi,
            [  --with-abi=<O32|N32_M3|N32_M4|64_M3|64_M4|HP|ALPHA|ELF_i386|WIN32_i386>
                          Define the Application Binary Interface to use],
            _abi_type="$withval")

dnl # Define which threading model to use.  Possible values are "IRIX_SPROC"
dnl # or "POSIX".
dnl # The default is "IRIX_SPROC".
AC_ARG_WITH(threads,
            [  --with-threads=<IRIX_SPROC|POSIX|WIN32>
                          Define threading implementation [default=IRIX_SPROC]],
            _thread_pkg="$withval", _thread_pkg='IRIX_SPROC')

dnl # Define the root directory for the Java installation.
dnl # The default is /usr/java or what the user has defined in his or her
dnl # $JDK_HOME environment variable.  ${_JDK_HOME_ALT_LIST} must be a
dnl # colon-separated list of bin directories that could contain javac(1)
dnl # and the other JDK utilities.
if test "x$JAVA_HOME" != "x" ; then
    _JDK_HOME_ALT_LIST="/usr/local/java/bin"
else
    _JDK_HOME_ALT_LIST="${JAVA_HOME}/bin:/usr/local/java/bin"
fi

AC_ARG_WITH(jdkhome,
            [  --with-jdkhome=<PATH>   JDK installation directory      [default=/usr/java]],
            JDK_HOME="$withval", JDK_HOME="${JDK_HOME-/usr/java}")

dnl # Define the root directory for the Performer installation.
dnl # The default is /usr.
AC_ARG_WITH(pfroot,
            [  --with-pfroot=<PATH>    Performer installation
                          directory                       [default=/usr]],
            PFROOT="$withval", PFROOT='/usr')

dnl # Define the root directory for the OpenGL installation.
dnl # The default is /usr.
AC_ARG_WITH(oglroot,
            [  --with-oglroot=<PATH>   OpenGL installation directory   [default=/usr]],
            OGLROOT="$withval", OGLROOT='/usr')

dnl # Specify a directory containing a working Perl 5.004 (or newer) binary.
dnl # There is no default since standard locations are always available.
AC_ARG_WITH(perl,
            [  --with-perl=<PATH>      Directory containing Perl 5.004
                          or newer binary                 [No default]],
            _user_perl_path="$withval")

dnl # Name the group used for setting ownership on installed files.
AC_ARG_WITH(install-group,
            [  --with-install-group=<GROUP NAME>
                          Installed file group name       [default=vrjuggler]],
            _install_group="$withval", _install_group='vrjuggler')

dnl # Provide permissions for installed (normal) files.
AC_ARG_WITH(file-perms,
            [  --with-file-perms=<FILE PERMISSIONS>
                          Installed file permissions      [default=0644]],
            FILE_PERMS="$withval", FILE_PERMS='0644')

dnl # Provide permissions for installed executable files.
AC_ARG_WITH(exec-perms,
            [  --with-exec-perms=<EXEC PERMISSIONS>
                          Installed executable permisions [default=0755]],
            EXEC_PERMS="$withval", EXEC_PERMS='0755')

dnl # Provide permissions for directories in the installation tree.
AC_ARG_WITH(dir-perms,
            [  --with-dir-perms=<DIRECTORY PERMISSIONS>
                          Installed directory permisions  [default=0755]],
            DIR_PERMS="$withval", DIR_PERMS='0755')

dnl # ------------------------------------------------------ #
dnl # --enable-feature[=arg] and --disable-feature arguments #
dnl # ------------------------------------------------------ #

dnl # Enable compilation of the OpenGL API.  Possible values are "yes" or
dnl # "no".  "yes" is set with --enable-gl-api and "no" is set with
dnl # --disable-gl-api.
dnl # The default is "yes".
AC_ARG_ENABLE(gl-api,
              [  --enable-gl-api         use OpenGL API                  [default=yes]],
              _enable_gl_api="$enableval", _enable_gl_api='yes')

dnl # Enable compilation of the Performer API.  Possible values are "yes" or
dnl # "no".  "yes" is set with --enable-pf-api and "no" is set with
dnl # --disable-pf-api.
dnl # The default is "yes".
AC_ARG_ENABLE(pf-api,
              [  --enable-pf-api         use Perfromer API               [default=yes]],
              _enable_pf_api="$enableval", _enable_pf_api='yes')

dnl # Enable performance testing.  Values that enable it are as follows:
dnl #
dnl #      SGI: Enable SGI IPC performance testing.  This defines
dnl #           VJ_PERFORMANCE to be VJ_PERF_SGI
dnl #    POSIX: Enable POSIX threads performance testing.  This defines
dnl #           VJ_PERFORMANCE to be VJ_PERF_POSIX
dnl #
dnl # Values that disable it are "no" or "NONE".  The default is "SGI".
AC_ARG_ENABLE(performance,
              [  --enable-performance=<SGI|POSIX|NONE>
                          enable performance testing      [default=SGI] ],
              [ if test "x$enableval" = "xyes" ; then
                    _enable_perf='SGI'
                elif test "x$enableval" = "xno" ; then
                    _enable_perf='NONE'
                else
                    _enable_perf="$enableval"
                fi
              ], _enable_perf='SGI')

dnl # Define a macro VJ_ABI_CFG for setting up the configuration parameters
dnl # for a given ABI.  The usage is:
dnl #
dnl #   VJ_ABI_CFG([ ABI [, ISA [, library suffix [, extra compiler flags]]]])
dnl #
dnl # All arguments are optional and will default to the empty string if not
dnl # provided.
AC_DEFUN(VJ_ABI_CFG, [ ABI=$1 ISA=$2 LIBBITSUF=$3 _EXTRA_FLAGS=$4 ; ])

dnl # Set default values for these before checking ${_abi_type}.  Currently,
dnl # these are for non-IRIX platforms.
ABI=''
LIBBITSUF=''

dnl # Based on the value of $abi_type, set $ABI for later use and the Makefile
dnl # substitution variables $LIBBITSUF and $ISA.
case "x${_abi_type}" in
    x64_M3)
        VJ_ABI_CFG('64', 'mips3', '64', '-64 -mips3')
        ;;
    x64_M4)
        VJ_ABI_CFG('64', 'mips4', '64', '-64 -mips4')
        ;;
    xN32_M3)
        VJ_ABI_CFG('N32', 'mips3', '32', '-n32 -mips3')
        ;;
    xN32_M4)
        VJ_ABI_CFG('N32', 'mips4', '32', '-n32 -mips4')
        ;;
    xO32)
        VJ_ABI_CFG('O32', 'mips2', , '-o32 -mips2')
        ;;
    xHP)
        VJ_ABI_CFG(HP, PA-RISC)
        ;;
    xALPHA)
        VJ_ABI_CFG(ALPHA)
        ;;
    xELF_i386)
        VJ_ABI_CFG('ELF', 'i386')
        ;;
    xWIN32_i386)
        VJ_ABI_CFG('WIN32')
        ;;
esac

dnl # -------------------------------------------------------------------------
dnl # System-dependent stuff.
dnl # -------------------------------------------------------------------------

dnl # We use AC_CANONICAL SYSTEM so that we can find out information about
dnl # the build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM

dnl # Operating system release information.  This may contain anything and
dnl # should be treated as a string.
_OS_REL_STR=`uname -r`

dnl # Operating system version number only (any miscellaneous text is
dnl # stripped).  This will only contain a number and can be treated as a
dnl # float-point value.
dnl # NOTE: It is currently not used in config.h.
_OS_REL_NUM=`uname -r | sed -e 's/^[^0-9]*\([0-9][0-9]*\.[0-9][0-9]*\)[^0-9]*$/\1/'`

dnl # Major and minor version numbers from ${_OS_REL_NUM} separated for use
dnl # with the C preprocessor.  Using cut(1) is kind of a hack, but at least
dnl # it's a clean one.
_OS_REL_NUM_MAJOR=`echo "${_OS_REL_NUM}" | cut -f1 -d'.'`
_OS_REL_NUM_MINOR=`echo "${_OS_REL_NUM}" | cut -f1 -d' ' | cut -f2 -d'.'`

dnl # These are used on all platforms.
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE, "${_OS_REL_STR}")
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE_MAJOR, ${_OS_REL_NUM_MAJOR})
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE_MINOR, ${_OS_REL_NUM_MINOR})

AR=''			dnl # Archive library command (generally ar(1))
ARFLAGS=''		dnl # Flags for $AR
AR_NAME_FLAG=''		dnl # Extra flag used to allow $AR to name its output
DEP_GEN_FLAG='-M'	dnl # Flag for the compiler to generate dependencies
LD=''			dnl # Shared library command (usually ld(1))
LDOPTS=''		dnl # More options for shared library generator
LDOPTS_DBG=''		dnl # Debugging options for shared library generator
LDOPTS_OPT=''		dnl # Optimization options for shared library generator
OBJ_FILE_SUFFIX='o'	dnl # Suffix for object file names
OBJ_NAME_FLAG='-o $@'	dnl # Flag used for naming a compiled object file

LIB_PREFIX='lib'	dnl # Prefix for library name
STATICLIB_EXT='a'	dnl # Extension for shared library names (usually 'a')
SHAREDLIB_EXT=''	dnl # Extension for shared library names (usually 'so')

DBG_FLAGS=''		dnl # Compiler debugging flags for object files
OPT_FLAGS=''		dnl # Compiler optimization flags for object files

DSOREGFILE=''
DSOVERSION=''
DSOVERSIONOPTS=''
ABI_LIST=''		dnl # List of supported ABIs on a given platform
OS_TYPE='UNIX'		dnl # General type of operating system (UNIX, Win32)
PLATFORM=''		dnl # Platform name

dnl # Depending on the target operating system, set various command options and
dnl # such.
case $target_os in
    dnl # SGI running IRIX [56].*.
    irix*)
        dnl # If no ABI has been set yet, default to N32_M3.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('N32', 'mips3', '32', '-n32 -mips3')
        fi

        dnl # Set compiler flags and the location of $DSOREGFILE depending on
        dnl # $ABI.
        if test "$ABI" = "64" ; then
            DSOREGFILE='/usr/lib64/so_locations'
            OPT_FLAGS='-OPT:Olimit=0'
        elif test "$ABI" = "N32" ; then
            DSOREGFILE='/usr/lib32/so_locations'
            OPT_FLAGS='-OPT:Olimit=0'
        elif test "$ABI" = "O32" ; then
            DSOREGFILE='/usr/lib/so_locations'
            OPT_FLAGS='-Olimit 0'
        fi

        AR='${CXX}'
        ARFLAGS='-J6 -ar -WR,-v -o'
        CXXFLAGS="-ptv $CXXFLAGS"
        DBG_FLAGS="-g -gslim"
        LD='${CXX} -shared'
        _LD_REGOPTS='-check_registry ${DSOREGFILE}'
        LDOPTS="$LDOPTS -all ${_LD_REGOPTS} -elf -rdata_shared"
        SHAREDLIB_EXT='so'

        DSOVERSION='sgi4.0'
        DSOVERSIONOPTS='-set_version ${DSOVERSION}'

        ABI_LIST='64_M4 64_M3 N32_M4 N32_M3'
        PLATFORM='IRIX'

        AC_DEFINE(VJ_OS_IRIX,)
        AC_DEFINE(_BSD_TYPES,)
        AC_DEFINE(_OLD_TERMIOS,)

        if test ${_OS_REL_NUM_MAJOR} -lt 6 ; then
            AC_DEFINE(IRIXREL, "IRIX5")
        else
            AC_DEFINE(IRIXREL, "IRIX6")
        fi
        ;;
    dnl # HP PA-RISC machine running HP-UX 10.20.
    hpux10.20)
        dnl # If no ABI has been set yet, default to HP PA-RISC.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('HP', 'PA-RISC')
        fi

        AR='ar'
        ARFLAGS='ru'
        CFLAGS="-Aa $CFLAGS"
        CXXFLAGS="+p $CXXFLAGS"
        LD='ld'
        LDFLAGS="$LDFLAGS -L/usr/lib/X11R6"
        LDOPTS='-b'
        DBG_FLAGS='-g'
        OPT_FLAGS='+inline_level 3'
        SHAREDLIB_EXT='sl'

        dnl # We have to use POSIX threads on HP-UX.
        if test "x${_thread_pkg}" != "xPOSIX" ; then
            AC_MSG_WARN(*** POSIX threads must be used on $host ***)
            _thread_pkg='POSIX'
        fi

        AC_DEFINE(VJ_OS_HPUX,)
        AC_DEFINE(_HPUX_SOURCE,)
        AC_DEFINE(_INCLUDE_TERMIO,)
        AC_DEFINE(_CMA_NOWRAPPERS_,)
        AC_DEFINE(notdef,)
        ABI_LIST='HP'
        PLATFORM='HP'
        ;;
    dnl # DEC Alpha running Digital UNIX 4.0.
    osf4.0)
        dnl # If no ABI has been set yet, default to ALPHA (whatever that
        dnl # means).
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('ALPHA')
        fi

        AR='ar'
        ARFLAGS='-ruv'
        INCLUDES="$INCLUDES -I/usr/include"
        LD='${CXX} -shared'
        LDOPTS=''
        OPT_FLAGS='-O2'
        SHAREDLIB_EXT='so'

        AC_DEFINE(VJ_OS_DUX,)
        ABI_LIST='ALPHA'
        PLATFORM='alpha-osf'
        ;;
    dnl # A machine running FreeBSD.  Currently only i386 is known to compile.
    freebsd*)
        dnl # If no ABI has been set yet, default to ELF with whatever the
        dnl # target CPU architecture is.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('ELF', "$target_cpu", '', '-elf')
        fi

        AR='ar'
        ARFLAGS='-ruv'
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"
        INCLUDES="$INCLUDES -I/usr/include"
        LD='${CXX} -shared'
        LDOPTS=''
        DBG_FLAGS='-g'
        OPT_FLAGS='-O2'
        SHAREDLIB_EXT='so'

        dnl # We have to use POSIX threads on FreeBSD.
        if test "x${_thread_pkg}" != "xPOSIX" ; then
            AC_MSG_WARN(*** POSIX threads must be used on $host ***)
            _thread_pkg='POSIX'
        fi

        AC_DEFINE(VJ_OS_FreeBSD,)
        ABI_LIST='ELF'
        PLATFORM='FreeBSD'
        ;;
    dnl # A machine running Linux.  Currently only i386 is known to work.
    linux*)
        dnl # If no ABI has been set yet, default to ELF with whatever the
        dnl # target CPU architecture is.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('ELF', "$target_cpu")
        fi

        AR='ar'
        ARFLAGS='-ruv'
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"
        INCLUDES="$INCLUDES -I/usr/include"
        LD='${CXX} -shared'
        LDFLAGS="$LDFLAGS -L/usr/X11R6/lib"
        LDOPTS=''
        OPT_FLAGS='-O2'
        DBG_FLAGS='-g'
        SHAREDLIB_EXT='so'

        dnl # We have to use POSIX threads on Linux.
        if test "x${_thread_pkg}" != "xPOSIX" ; then
            AC_MSG_WARN(*** POSIX threads must be used on $host ***)
            _thread_pkg='POSIX'
        fi

        AC_DEFINE(VJ_OS_Linux,)
        ABI_LIST='ELF'
        PLATFORM='Linux'
        ;;
    dnl # A machine running Solaris (aka SunOS).  Currently only i386 is
    dnl # known to work.
    solaris*)
        dnl # If no ABI has been set yet, default to ELF with whatever the
        dnl # target CPU architecture is.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('ELF', "$target_cpu")
        fi

        AR='ar'
        ARFLAGS='-ruv'
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"
        LD='${CXX} -G'
        LDOPTS=''
        DBG_FLAGS='-g'
        OPT_FLAGS='-O2'
        SHAREDLIB_EXT='so'

        dnl # We have to use POSIX threads on Solaris.
        if test "x${_thread_pkg}" != "xPOSIX" ; then
            AC_MSG_WARN(*** POSIX threads must be used on $host ***)
            _thread_pkg='POSIX'
        fi

        AC_DEFINE(VJ_OS_Solaris,)
        ABI_LIST='ELF'
        PLATFORM='Solaris'
        ;;
    dnl # i386-class machine running Windows {98,NT} with Cygnus GNU-Win32.
    cygwin)
        dnl # If no ABI has been set yet, default to WIN32 with whatever the
        dnl # target CPU architecture is.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG('WIN32')
        fi

        dnl # We have to use Win32 threads on Win32.
        if test "x${_thread_pkg}" != "xWIN32" ; then
            AC_MSG_WARN(*** WIN32 threads must be used on $host ***)
            _thread_pkg='WIN32'
        fi

        if test "x${_use_gcc}" = "xyes" ; then
            AR='ar'
            ARFLAGS='-ruv'
            CFLAGS="-mno-cygwin"
            CXXFLAGS="-mno-cygwin"
            DBG_FLAGS='-g'

            LD='${CXX} -shared'
        else
            AR='link -lib'
            ARFLAGS="$ARFLAGS -nologo"
            AR_NAME_FLAG='-out:'
            CFLAGS="-nologo"
            CXXFLAGS="-nologo"
            DBG_FLAGS='-Od -GZ -MTd'
            DEP_GEN_FLAG='-FD'
            OPT_FLAGS='-GB -MT'
            LD='link -dll'
            LDOPTS="$LDOPTS -nologo -out:\"${OBJDIR}/Juggler.lib\""
            LDOPTS_DBG='-LDd -MDd'
            LDOPTS_OPT='-LD -MD'
            OBJ_FILE_SUFFIX='obj'
            OBJ_NAME_FLAG='-Fo$@'
        fi

        LIB_PREFIX=''
        STATICLIB_EXT='lib'
        SHAREDLIB_EXT='dll'

        AC_DEFINE(VJ_OS_Win32,)
        ABI_LIST='WIN32'
        OS_TYPE='Win32'

        _sys_name=`uname -s`

        dnl # Determine the value for $PLATFORM based on what uname(1) tells
        dnl # us.  We define our own values because Cygnus' uname(1) returns
        dnl # somewhat annoying names.
        case ${_sys_name} in
            dnl # Windows NT 4.0.
            *NT-4.0)
                PLATFORM='WinNT'
                ;;
            dnl # Windows 95 and 98.
            *WIN_9*-4.*)
                PLATFORM='Win9x'
                ;;
            dnl # Unknown version of Windows that may not yet be supported.
            *)
                AC_MSG_ERROR(Unknown Windows type ${_sys_name}!)
                ;;
        esac

        AC_DEFINE(WIN32,)
        AC_DEFINE(_MBCS,)
        ;;
    dnl # Unkown operating system (to config.guess).
    unknown)
        dnl # If no ABI has been set yet, default to the target OS (which
        dnl # will be 'unknown') with whatever the target CPU architecture is.
        if test "$ABI" = "" ; then
            VJ_ABI_CFG("$target_os", "$target_cpu")
        fi

        AC_DEFINE(VJ_OS_GENERIC,)
        PLATFORM='UNKNOWN'
        ;;
esac

dnl # --------------------------------------------------------------------
dnl # Depending on host type and the value in ${_enable_perf}, define the
dnl # settings for the performance code.
dnl # --------------------------------------------------------------------
if test "$PLATFORM" != "IRIX" -a "${_enable_perf}" != "NONE" ; then
    _enable_perf='POSIX'
fi

dnl # Define unique values for each type of performance testing option.
dnl # Only one of these may be used for the value to which VJ_PERFORMANCE
dnl # is set.
AC_DEFINE(VJ_PERF_NONE, 0)
AC_DEFINE(VJ_PERF_SGI, 1)
AC_DEFINE(VJ_PERF_POSIX, 2)

dnl # Define VJ_PERFORMANCE based on ${_enable_perf}.  Default to
dnl # VJ_PERF_SGI if ${_enable_perf} has some unknown value.
if test "x${_enable_perf}" = "xSGI" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_SGI)
elif test "x${_enable_perf}" = "xPOSIX" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_POSIX)
elif test "x${_enable_perf}" = "xNONE" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_NONE)
else
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_SGI)
fi

dnl # -------------------------------------------------------------------------
dnl # Checks for programs.
dnl # -------------------------------------------------------------------------

_vjsave_CFLAGS="$CFLAGS"
_vjsave_CXXFLAGS="$CXXFLAGS"

dnl # On HP-UX, we have to use the aCC C++ compiler.
if test "$PLATFORM" = "HP" ; then
    AC_CHECK_PROG(CXX, aCC, aCC,
        AC_MSG_ERROR(*** The library requires the HP-UX aCC C++ compiler ***))
dnl # On Windows, we have to use the Microsoft Visual C++ compiler CL.EXE.
elif test "$OS_TYPE" = "Win32" -a "x${_use_gcc}" != "xyes" ; then
    AC_CHECK_PROG(CXX, cl, cl,
        AC_MSG_ERROR(*** The library requires the MS Visual C++ compiler ***))
    CC=$CXX
dnl # On IRIX, we have to use cc and CC (not gcc or g++).
elif test "$PLATFORM" = "IRIX" ; then
    AC_CHECK_PROG(CC, cc, cc,
        AC_MSG_ERROR(*** The library requires the IRIX cc C compiler ***))
    AC_CHECK_PROG(CXX, CC, CC,
        AC_MSG_ERROR(*** The library requires the IRIX CC C++ compiler ***))
fi

CFLAGS="$CFLAGS ${_EXTRA_FLAGS}"
CXXFLAGS="$CXXFLAGS ${_EXTRA_FLAGS}"

AC_PROG_CC
AC_PROG_CXX

dnl # On FreeBSD, we need to use egcs 1.1.2-release or newer for the C and C++
dnl # compilers (especially for C++).
if test "$PLATFORM" = "FreeBSD" ; then
    AC_CACHE_CHECK(if $CC is egcs 1.1.2 or newer,
        ac_cv_CC_is_egcs,
        [ _val=`$CC -v 2>&1 | grep -e '^gcc version' | cut -f4 -d' '` ;
          if test $_val -ge 19990314 ; then
              ac_cv_CC_is_egcs='yes' ;
          else
              ac_cv_CC_is_egcs='no' ;
          fi
        ])

    dnl # If the $CC binary is not egcs 1.1.2 or newer, check for egcc.  If
    dnl # it exists, we will assume that it is new enough.
    if test "$ac_cv_CC_is_egcs" = "no" ; then
        AC_CHECK_PROG(CC, egcc, egcc,
            AC_MSG_ERROR(*** The library requires the egcc C compiler ***))
        AC_CHECK_PROG(CXX, eg++, eg++,
            AC_MSG_ERROR(*** The library requires the eg++ C++ compiler ***))
    fi
fi

dnl # At this point, we know what threading package we will be using and what
dnl # C compiler we have available.  Now check to see if the compiler accepts
dnl # the -pthread option.
if test "x${_thread_pkg}" = "xPOSIX" ; then
    AC_CACHE_CHECK(whether $CC accepts -pthread,
        ac_cv_CC_accepts_pthread,
        [ echo 'void f(){}' > conftest.c
          if test -z "`${CC} -pthread -c conftest.c 2>&1`" ; then
              ac_cv_CC_accepts_pthread='yes'
          else
              ac_cv_CC_accepts_pthread='no'
          fi
          rm -f conftest*
        ])
fi

dnl # Ensure that the C++ compiler we've found is capable of compiling the
dnl # newer C++ features that we need.
_vjsave_CC="$CC"
CC="$CXX"

dnl # When compiling on Windows, we need to force the compiler to treat the
dnl # source file as a .cpp file even though it will end in .c.
if test "$OS_TYPE" = "Win32" -a "x${_use_gcc}" != "xyes" ; then
    CC="$CC -TP"
fi

AC_CACHE_CHECK(whether the C++ compiler handles templates properly,
    ac_cv_CXX_is_current,
    AC_TRY_COMPILE([#include <map> ],
                   [ std::map<const char*, int> test_map; ],
                   ac_cv_CXX_is_current='yes',
                   [ ac_cv_CXX_is_current='no' ;
                     AC_MSG_ERROR(*** The library requires a current C++ compiler) ]))

CC="${_vjsave_CC}"

AC_PROG_CPP
AC_PROG_CXXCPP

CFLAGS="${_vjsave_CFLAGS}"
CXXFLAGS="${_vjsave_CXXFLAGS}"

JAVAC=''
JAR=''

dnl # Check for the JDK (specifically try to find javac(1) in $JDK_HOME or
dnl # in ${_JDK_HOME_ALT_LIST}).
AC_PATH_PROG(JAVAC, javac, no, $PATH:${JDK_HOME}/bin:${_JDK_HOME_ALT_LIST})

dnl # If there is still no value in $JAVAC, then warn that the GUI will not be
dnl # built.
if test "$JAVAC" = "no" ; then
    AC_MSG_WARN(*** The GUI requires javac -- it will not be built ***)
    BUILD_GUI='N'
dnl # Otherwise, set $JAR to the path to jar(1) and continue.
else
    if test "$OS_TYPE" = "Win32" ; then
        JAVAC=`unix2dos "$JAVAC"`
    fi

    JAR="${JAVAC%javac}jar"
    BUILD_GUI='Y'
fi

dnl # If we are on a Win32 system, use $ac_install_sh for the install
dnl # program.  This prevents problems with paths if an install program is
dnl # found elsewhere on the system.
dnl # XXX: This may not be a safe value to use since it is internal to the
dnl # generated configure script.  (patrick 1/10/2000)
if test "$OS_TYPE" = "Win32" ; then
    INSTALL="$ac_install_sh"
dnl # Otherwise, use the safe AC_PROG_INSTALL macro.
else
    AC_PROG_INSTALL
fi

dnl # Ensure that a version of Perl greater than or equal to 5.004 is
dnl # available.
chkPerl ( ) {
    if test -x "$1" ; then
        retval=`$1 -e "printf("%s\n", (($] >= 5.004) ? 0 : 1))"`
    else
        retval=1
    fi

    echo $retval
}

_PERL_PATH='/usr/local/bin /usr/bin C:/Perl/bin'

dnl # If ${_user_perl_path} has a value, prepend that on ${_PERL_PATH} so that
dnl # it will be checked before the standard places.
if test "x${_user_perl_path}" != "x" ; then
    _PERL_PATH="${_user_perl_path} ${_PERL_PATH}"
fi

AC_CACHE_CHECK(for Perl version >= 5.004,
               ac_cv_perl_version,
               [ ac_cv_perl_version='no' ;
                 for _dir in ${_PERL_PATH} ; do
                     if eval "test \"`chkPerl ${_dir}/perl`\" -eq 0" ; then
                         ac_cv_perl_version="${_dir}/perl"
                         break
                     elif eval "test \"`chkPerl ${_dir}/perl5`\" -eq 0" ; then
                         ac_cv_perl_version="${_dir}/perl5"
                         break
                     fi
                 done
               ])

PERL="$ac_cv_perl_version"

AC_CHECK_PROG(MTREE_CMD, mtree, mtree, \${PERL} \${scriptdir}/mtree.pl)
AC_PROG_MAKE_SET

dnl # While ranlib(1) is not part of the base IRIX installation, the VRAC SGIs
dnl # have a ranlib(1) installed that does very bad things to ar archives.
if test "$PLATFORM" = "IRIX" ; then
    RANLIB=':'
else
    AC_PROG_RANLIB
fi

AC_PROG_LN_S

dnl # -------------------------------------------------------------------------
dnl # Checks for libraries.
dnl # -------------------------------------------------------------------------

THREADS=''

dnl # Test for libpthread or for libcma if libpthread is not present.
dnl # If the library is found, check for pthread_kill().  If it is present,
dnl # Draft 10 (the "final" draft) of the POSIX threads standard is in place.
dnl # If not, Draft 4 is available.
if test "x${_thread_pkg}" = "xPOSIX" ; then
    _vjsave_CFLAGS="$CFLAGS"
    _vjsave_CXXFLAGS="$CXXFLAGS"

    if test "$ac_cv_CC_accepts_pthread" = "yes" ; then
        CFLAGS="$CFLAGS -pthread"
        CXXFLAGS="$CXXFLAGS -pthread"
    fi

    AC_CHECK_LIB(pthread, pthread_create,
        AC_CHECK_HEADER(pthread.h,
            [ THREADS='POSIX'; LIBS="$LIBS -lpthread"; ],
            AC_MSG_WARN(*** POSIX threads will not be used (header file not found) ***)))

    dnl # On HP-UX 10.20, the pthreads library is in the cma library rather
    dnl # than pthreads, so test for that if $THREADS was not set above.
    if test "x$THREADS" = "x" ; then
        AC_CHECK_LIB(cma, pthread_create,
            AC_CHECK_HEADER(pthread.h,
                [ THREADS='POSIX'; LIBS="$LIBS -lcma"; ],
                AC_MSG_WARN(*** POSIX threads will not be used (header file not found) ***)))
    fi

    dnl # On FreeBSD, the pthreads stuff is in libc_r.
    if test "x$THREADS" = "x" ; then
        AC_CHECK_LIB(c_r, pthread_create,
            AC_CHECK_HEADER(pthread.h,
                [ THREADS='POSIX'; LIBS="$LIBS -lc_r" ],
                AC_MSG_WARN(*** POSIX threads will not be used (header file not found) ***)))
    fi

    dnl # If $THREADS is equal to "POSIX" at this point, then the pthread
    dnl # libraries needed are in $LIBS, so now we make a check for the draft
    dnl # revision being used.  This is done by determining if pthread_kill()
    dnl # is in the library.  If it is, Draft 10 is in use.  Otherwise, assume
    dnl # it is Draft 4.
    if test "$THREADS" = "POSIX" ; then
        AC_CACHE_CHECK(POSIX threads draft revision,
            ac_cv_pthread_version,
            AC_TRY_LINK([ #include <pthread.h> ],
                [ pthread_t t; pthread_kill(t, 1); ],
                ac_cv_pthread_version='Draft 10',
                ac_cv_pthread_version='Draft 4'))

        if test "$ac_cv_pthread_version" = "Draft 10" ; then
            AC_DEFINE(_PTHREADS_DRAFT_10,)
        else
            AC_DEFINE(_PTHREADS_DRAFT_4,)
        fi

        dnl # Define the default thread scope depending on the platform.  On
        dnl # IRIX, only process scope is avaiable without special
        dnl # configuration options.  Other systems may support system scope.
        if test "$PLATFORM" = "IRIX" ; then
            AC_DEFINE(VJ_THREAD_SCOPE, PTHREAD_SCOPE_PROCESS)
        else
            AC_DEFINE(VJ_THREAD_SCOPE, PTHREAD_SCOPE_SYSTEM)
        fi

        dnl # Define the appropriate value for _POSIX_C_SOURCE on the current
        dnl # platform.
        if test "$PLATFORM" = "IRIX" -o "$PLATFORM" = "Linux" -o "$PLATFORM" = "Solaris" ; then
            AC_DEFINE(VJ_POSIX_C_SOURCE, 199506L)
        else
            AC_DEFINE(VJ_POSIX_C_SOURCE, 2)
        fi
    else
        AC_MSG_WARN(*** POSIX threads will not be used (no library found) ***)
    fi

    dnl # Restore these in case any changes were made above.
    CFLAGS="${_vjsave_CFLAGS}"
    CXXFLAGS="${_vjsave_CXXFLAGS}"
dnl # We are using WIN32 threads.
elif test "x${_thread_pkg}" = "xWIN32" ; then
    THREADS='WIN32'

dnl # If we are not using POSIX threads, we must be using the IRIX sproc(2)
dnl # model, but we test ${_thread_pkg} just to be sure it is set right.
elif test "x${_thread_pkg}" = "xIRIX_SPROC" ; then
    AC_CHECK_HEADERS(sys/prctl.h,
        THREADS='IRIX_SPROC',
        AC_MSG_WARN(*** IRIX sproc(2) threading will not be used (no headers found) ***))
fi

dnl # Shared memory and synchronization primitives.
SEMAPHORE_SYS=''		# POSIX, IRIX_SPROC, WIN32
MUTEX_SYS=''			# POSIX, IRIX_SPROC, WIN32
SHMEM_SYS=''			# POSIX, IRIX_SPROC, WIN32
THREAD_SYS=''			# POSIX, IRIX_SPROC, WIN32

dnl # Define various CPP macros depending on which threads implementation will
dnl # be used.  If no implementation was defined above, exit configure.
if test "$THREADS" = "POSIX" ; then
    dnl # Do not define _POSIX_C_SOURCE here because it will cause problems
    dnl # when compiling on IRIX.  Instead, define that in the source files
    dnl # where appropriate.
    AC_DEFINE(VJ_USE_PTHREADS,)
    AC_DEFINE(_THREAD_SAFE,)
    AC_DEFINE(RWSTD_MULTI_THREAD,)
    AC_DEFINE(RW_MULTI_THREAD,)

    dnl # On Linux, defining _THREAD_SAFE is the same as defining _REENTRANT,
    dnl # so we will not define both.
    if test "x$PLATFORM" != "xLinux" ; then
        AC_DEFINE(_REENTRANT,)
    fi

    dnl # Use POSIX threading, mutexes and shared memory.
    MUTEX_SYS='POSIX'
    SHMEM_SYS='POSIX'
    THREAD_SYS='POSIX'

    dnl # If we have sem_init(3), we can use POSIX semaphores.  If not, exit
    dnl # with a fatal error.  If we are using POSIX threads, we need to have
    dnl # working POSIX semaphores too.
    AC_CHECK_FUNC(sem_init,
        [ SEMAPHORE_SYS='POSIX' ; AC_DEFINE(VJ_POSIX_SEMAPHORES,) ],
        AC_CHECK_LIB(posix4, sem_init,
            [ LIBS="$LIBS -lposix4"
              SEMAPHORE_SYS='POSIX' ;
              AC_DEFINE(VJ_POSIX_SEMAPHORES,)
            ],
            AC_MSG_ERROR(*** POSIX semaphores are required for POSIX threads ***)))
elif test "$THREADS" = "WIN32" ; then
    dnl # Set to Win32 threading, synchronization and shared memory.
    SEMPANORE_SYS='WIN32'
    THREAD_SYS='WIN32'
    MUTEX_SYS='WIN32'
    SHMEM_SYS='WIN32'
elif test "$THREADS" = "IRIX_SPROC" ; then
    AC_DEFINE(VJ_IRIX_SPROC,)

    dnl # Set to IRIX_SPROC threading
    THREAD_SYS='IRIX_SPROC'

    SEMAPHORE_SYS='IRIX_SPROC'
    SHMEM_SYS='IRIX_SPROC'
    MUTEX_SYS='IRIX_SPROC'
elif test "x$THREADS" = "x" ; then
    AC_MSG_ERROR(No threading package defined!)
fi

dnl # Get the path to the X-Window libraries and header files.  We will need
dnl # these for all UNIX applications.
AC_PATH_X

dnl # ------------
dnl # OpenGL API.
dnl # ------------
OPENGL_API=''			dnl # 'Y' then we are using OpenGL

_LIBOPENGL=''
_SYSTEM_OPENGL=''

dnl # Test for the OpenGL library if the OpenGL API was enabled.
if test "x${_enable_gl_api}" = "xyes" ; then
    dnl # Save these values in case they need to be restored later.
    _vjsave_CFLAGS="$CFLAGS"
    _vjsave_CPPFLAGS="$CPPFLAGS"
    _vjsave_INCLUDES="$INCLUDES"
    _vjsave_LDFLAGS="$LDFLAGS"

    if test "$PLATFORM" = "FreeBSD" ; then
        LDFLAGS="$LDFLAGS -lX11 -lXext -lICE -lm"
    fi

    dnl # Add the user-specified OpenGL installation directory to these paths.
    dnl # Ensure that /usr/include and /usr/lib are not included multiple times
    dnl # if $OGLROOT is "/usr".
    if test "x${OGLROOT}" != "x/usr" ; then
        CPPFLAGS="$CPPFLAGS -I${OGLROOT}/include"
        INCLUDES="$INCLUDES -I${OGLROOT}/include"
        LDFLAGS="-L${OGLROOT}/lib${LIBBITSUF} $LDFLAGS"
    fi

    CFLAGS="$CFLAGS ${_EXTRA_FLAGS}"

    dnl # On HP-UX, we have to compile the test code with aCC (which is
    dnl # required by an above test) because the HP-UX OpenGL 1.1
    dnl # implementation mandates this.
    if test "$PLATFORM" = "HP" ; then
        _vjsave_CC="$CC"
        _vjsave_LIBS="$LIBS"
        CC="$CXX"
        LIBS="$LIBS -lGL"

        dnl # Check the cache in case this test was run previously and if not,
        dnl # compile the given code and try to link it against the GL
        dnl # library.  We don't need to test for the existence of GL/gl.h
        dnl # after linking because the test program already includes it.
        AC_CACHE_CHECK(for glEnable in -lGL, ac_cv_glEnable_available,
            AC_TRY_LINK([#include <GL/gl.h>], [glEnable(GL_CULL_FACE)],
                ac_cv_glEnable_available='yes',
                [ LIBS="${_vjsave_LIBS}";
                  AC_MSG_ERROR(*** OpenGL API will not be used (library not found) ***) ] ))

        dnl # If the library was found, add the OpenGL API object files to
        dnl # the files to be compiled and enable the OpenGL API compile-time
        dnl # option.
        if test "$ac_cv_glEnable_available" = "yes" ; then
            OPENGL_API="Y"
            AC_DEFINE(VJ_API_OPENGL,)
        fi

        CC="${_vjsave_CC}"
    elif test "$OS_TYPE" = "Win32" ; then
        AC_MSG_WARN(Assuming that OpenGL is available in a standard location)
        OPENGL_API="Y"
        AC_DEFINE(VJ_API_OPENGL,)
    else
        dnl # If the OpenGL library was found, add the API object files to the
        dnl # files to be compiled and enable the OpenGL API compile-time
        dnl # option.
        AC_CHECK_LIB(GL, glEnable,
            AC_CHECK_HEADER(GL/gl.h,
                [ OPENGL_API="Y";
                  AC_DEFINE(VJ_API_OPENGL,) ],
                AC_MSG_ERROR(*** OpenGL API will not be used (header not found) ***)),
            AC_MSG_ERROR(*** OpenGL API will not be used (library not found) ***),
            -lGLU -lm -lX11 -lXext -lXt)
    fi

    dnl # Restore $CFLAGS and $CPPFLAGS now that we are done testing.
    CFLAGS="${_vjsave_CFLAGS}"
    CPPFLAGS="${_vjsave_CPPFLAGS}"

    dnl # If OpenGL API files were added, define this extra stuff that is
    dnl # used in some Makefiles.
    if test "x$OPENGL_API" != "x" ; then
        if test "x" = "x$x_libraries" ; then
            _x_lib_path=''
        else
            _x_lib_path="-L$x_libraries"
        fi

        if test "$OS_TYPE" = "UNIX" ;  then
            _LIBOPENGL="-L${OGLROOT} -lGLU -lGL ${_x_lib_path} -lX11 -lXext"
        else
            _LIBOPENGL='opengl32.lib glu32.lib'
        fi

        if test "$PLATFORM" = "IRIX" -a "$ABI" = "O32" ; then
            _SYSTEM_OPENGL="-lmpc -lGLw ${_LIBOPENGL} -lfpe -lXm -lXt -lmalloc"
        else
            _SYSTEM_OPENGL="${_LIBOPENGL}"
        fi
    dnl # No OpenGL API files were added, so restore $INCLUDES and $LDFLAGS so
    dnl # that no OpenGL stuff in included in them.
    else
        INCLUDES="${_vjsave_INCLUDES}"
        LDFLAGS="${_vjsave_LDFLAGS}"
    fi
fi

dnl # --------------------
dnl # IRIS Performer API.
dnl # --------------------
PERFORMER_API=''		dnl # 'Y' then we are using Performer

dnl # Test for the Performer library if the Performer API was enabled.
if test "x${_enable_pf_api}" = "xyes" ; then
    _vjsave_CFLAGS="$CFLAGS"
    _vjsave_INCLUDES="$INCLUDES"
    _vjsave_LDFLAGS="$LDFLAGS"

    dnl # Ensure that /usr/include and /usr/lib are not included multiple
    dnl # times if $PFROOT is "/usr".
    if test "x${PFROOT}" != "x/usr" ; then
        INCLUDES="$INCLUDES -I\${PFROOT}/include"
        LDFLAGS="-L\${PFROOT}/lib\${LIBBITSUF} $LDFLAGS"
    fi

    CFLAGS="$CFLAGS $INCLUDES ${_EXTRA_FLAGS}"

    dnl # On Linux, we have to link all the Performer libraries AND libdl to
    dnl # get the check for pfInit() in libpf to compile.
    if test "$PLATFORM" = "Linux" ; then
        _vjsave_LIBS="$LIBS"
        LIBS="$LIBS -lpf_ogl -lpfdu_ogl -lpfui -lpfutil_ogl -ldl"
    fi

    dnl # If the Performer library was found, add the API object files to the
    dnl # files to be compiled and enable the Performer API compile-time
    dnl # option.
    AC_CHECK_LIB(pf, pfInit,
        AC_CHECK_HEADER(Performer/pf.h,
            [ PERFORMER_API="Y";
              _PFOGLLIB='-lpf_ogl -lpfdu_ogl -lpfui -lpfutil_ogl';
              AC_DEFINE(VJ_API_PERFORMER,) ],
            AC_MSG_WARN(*** Performer API will not be used (pf.h not found) ***)),
        AC_MSG_WARN(*** Performer API will not be used (library not found) ***))

    dnl # Restore $LIBS to its original value if we are using Linux (it was
    dnl # modified before the previous check block).  Also append -ldl to
    dnl # $LIBS if the Performer library was found.
    if test "$PLATFORM" = "Linux" ; then
        LIBS="${_vjsave_LIBS}"

        if test "x$PERFORMER_API" != "x" ; then
            _PFOGLLIB="${_PFOGLLIB} -ldl"
        fi
    fi

    dnl # Restore $CFLAGS now that we are done testing.
    CFLAGS="${_vjsave_CFLAGS}"

    dnl # No Performer API files were added, so restore $INCLUDES and $LDFLAGS
    dnl # so that no OpenGL stuff in included in them.
    if test "x$PERFORMER_API" = "x" ; then
        INCLUDES="${_vjsave_INCLUDES}"
        LDFLAGS="${_vjsave_LDFLAGS}"
    fi
fi

dnl # -------------------------------------------------------------------------
dnl # Checks for header files.
dnl # -------------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/file.h sys/ioctl.h	\
                 sys/time.h termios.h unistd.h sys/z8530.h sys/stdsyms.h)

dnl # All of the above header file checks may not be necessary ...

dnl # -------------------------------------------------------------------------
dnl # Checks for typedefs, structures, and compiler characteristics.
dnl # -------------------------------------------------------------------------
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_HEADER_TIME

if test "$OS_TYPE" = "Win32" ; then
    AC_CHECK_TYPE(u_int, UINT)
    AC_CHECK_TYPE(int32_t, __int32)
    AC_CHECK_TYPE(int64_t, __int64)
else
    AC_CHECK_TYPE(u_int, unsigned int)
fi

dnl # -------------------------------------------------------------------------
dnl # Checks for library functions.
dnl # -------------------------------------------------------------------------
AC_CHECK_FUNCS(gettimeofday sleep socket strcasecmp strdup strerror	\
               strtod usleep)

dnl # Ensure that we have sched_yield(3).  On Solaris, sched_yield(3) and its
dnl # synchronization friends are in libposix4.
AC_CHECK_FUNC(sched_yield, AC_DEFINE(HAVE_SCHED_YIELD),
              AC_CHECK_LIB(posix4, sched_yield,
                  [ LIBS="$LIBS -lposix4" ; AC_DEFINE(HAVE_SCHED_YIELD) ]))

dnl # In a Win32 environment with MS Visual C++ as the compiler, these math
dnl # functions are not in any special library.  Test for them normally.
if test "$OS_TYPE" = "Win32" -a "x${_use_gcc}" != "xyes" ; then
    AC_CHECK_FUNCS(sinf sqrtf asinf atan2f)
dnl # Otherwise, they are in libmath if they are anywhere.
else
    AC_CHECK_LIB(m, sinf, AC_DEFINE(HAVE_SINF))
    AC_CHECK_LIB(m, sqrtf, AC_DEFINE(HAVE_SQRTF))
    AC_CHECK_LIB(m, asinf, AC_DEFINE(HAVE_ASINF))
    AC_CHECK_LIB(m, atan2f, AC_DEFINE(HAVE_ATAN2F))
fi

dnl # All of the above function checks may not be necessary ...

dnl # -------------------------------------------------------------------------
dnl # Miscellaneous checks.
dnl # -------------------------------------------------------------------------

dnl # Make sure that the named install group is actually available and can
dnl # be set by this user.  This is done by creating a file (conftest.c) and
dnl # setting the group name to be what is in ${_install_group}.  Any output
dnl # from chgrp(1) is redirected to chgrp_out.  If chgrp_out has non-zero
dnl # length, chgrp(1) gave error output, and thus the group is not avaialble.
AC_CACHE_CHECK(for ${_install_group} group, ac_cv_install_group_available,
    [ touch conftest.c
      chgrp ${_install_group} conftest.c >chgrp_out 2>&1
      if test -s chgrp_out ; then
          ac_cv_install_group_available=no
      else
          ac_cv_install_group_available=yes
      fi
      rm conftest.c chgrp_out
    ])

GROUP_NAME=''

if test "$ac_cv_install_group_available" = "yes" ; then
    GROUP_NAME="${_install_group}"
fi

dnl # -------------------------------------------------------------------------
dnl # Do Makefile substitutions.
dnl # -------------------------------------------------------------------------
EXTRA_LINK_FLAGS=''		dnl # For use in linking Juggler applications

if test "$PLATFORM" = "IRIX" ; then
    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -woff 3322 -w2"
elif test "$OS_TYPE" = "Win32" -a "x${_use_gcc}" != "xyes" ; then
    CFLAGS="$CFLAGS -W3 -Gm -GR -GX -ZI -EHc -QIfdiv -QI0f"
    CXXFLAGS="$CXXFLAGS -W3 -Gm -GR -GX -ZI -EHc -QIfdiv -QI0f"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -MTd"
fi

if test "$ac_cv_CC_accepts_pthread" = "yes" ; then
    CFLAGS="$CFLAGS -pthread"
    CXXFLAGS="$CXXFLAGS -pthread"
fi

DEPENDFLAGS=""
DEPEND_EXTRAS=""

dnl # For makedepend(1) to work properly on HP-UX with aCC, we have to
dnl # include these extra paths.
if test "$PLATFORM" = "HP" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="-I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "$OS_TYPE" = "Win32" ; then
    DEPEND_EXTRAS='-D_WIN32 -D_M_IX86'
fi

dnl # $srcdir is the root directory of the juggler source tree.  To get a
dnl # value for $VJROOT_ABS, we cd there and save the value of running pwd.
dnl # Then return to the directory where configure is being run ($topdir).
topdir=`pwd`
cd "$srcdir"
VJROOT_ABS=`pwd`
cd "$topdir"

dnl # Define the base path to the source directory using ${VJROOT_ABS} as an
dnl # alternative to using ${srcdir}.
VJ_SRCDIR='${VJROOT_ABS}'
UNIX_VJROOT_ABS="$VJROOT_ABS"

dnl # Variables set in Makefiles found in the test tree.  All variables
dnl # listed are for use only in the Makefile.in's found in that tree unless
dnl # otherwise noted.  They are used in the following way:
dnl #
dnl #     * TEST_VJ_LIBS_BASIC: The basic VR Juggler library.
dnl #     * TEST_VJ_LIBS_GL: The VR Juggler OpenGL API library.
dnl #     * TEST_VJ_LIBS_PF: The VR Juggler Performer API library.
dnl #     * TEST_LIBS_BASIC: The _most basic_ basic libraries needed for
dnl #       compiling (e.g., -lC).
dnl #     * TEST_EXTRA_LIBS_BASIC: A basic set of extra libraries and linker
dnl #       flags needed for compiling.  These are put after those listed in
dnl #       the previous variables in the compile line.
dnl #     * TEST_VJ_LIBS_GL: The OpenGL libraries needed for compiling with
dnl #       the OpenGL API.
dnl #     * TEST_VJ_LIBS_PF: The Performer libraries needed for compiling
dnl #       with the Performer API.
dnl #
if test "$OS_TYPE" = "UNIX" ; then
    if test "$PLATFORM" = "IRIX" ; then
        TEST_VJ_LIBS_BASIC="-B static -L\$(VJ_BASE_DIR)/lib${LIBBITSUF} -lJuggler"
        TEST_LIBS_BASIC="-B dynamic -lm -lC"
    else
        dnl # For now, we are disabling static linking for the sample
        dnl # applications when compiled in a developer's build tree.  This
        dnl # is only the case on non-IRIX platforms.
        TEST_VJ_LIBS_BASIC="-L\$(VJ_BASE_DIR)/lib${LIBBITSUF} -lJuggler"
        TEST_LIBS_BASIC="-lm"
    fi

    TEST_VJ_LIBS_GL="-lJuggler_ogl"
    TEST_VJ_LIBS_PF="-lJuggler_pf"
    TEST_EXTRA_LIBS_BASIC="$LDFLAGS $LIBS"
    TEST_EXTRA_LIBS_GL="-L${OGLROOT}/lib${LIBBITSUF} ${_SYSTEM_OPENGL}"
    TEST_EXTRA_LIBS_PF="${_PFOGLLIB}"
elif test "$OS_TYPE" = "Win32" ; then
    TEST_VJ_LIBS_BASIC="-link -libpath:\$(VJ_BASE_DIR)/lib/debug Juggler.lib"
    TEST_LIBS_BASIC='comctl32.lib user32.lib gdi32.lib ws2_32.lib'
    TEST_VJ_LIBS_GL='Juggler_ogl.lib'
    TEST_VJ_LIBS_PF='Juggler_pf.lib'
    TEST_EXTRA_LIBS_BASIC="$LDFLAGS $LIBS"
    TEST_EXTRA_LIBS_GL="${_SYSTEM_OPENGL}"
    TEST_EXTRA_LIBS_PF="${_PFOGLLIB}"
fi

dnl # Translate paths from UNIX-style to Win32.
if test "$OS_TYPE" = "Win32" ; then
    topdir=`unix2dos "$topdir"`
    SAFE_VJROOT_ABS=`unix2dos "$VJROOT_ABS"`
    VJ_SRCDIR=`unix2dos "$VJ_SRCDIR"`

    DEPEND_EXTRAS=`unix2dos "$DEPEND_EXTRAS"`
    INCLUDES=`unix2dos "$INCLUDES"`
    LIBS=`unix2dos "$LIBS"`
    MTREE_CMD=`unix2dos "$MTREE_CMD"`

    JDK_HOME=`unix2dos "$JDK_HOME"`

    TEST_EXTRA_LIBS_BASIC=`unix2dos "$TEST_EXTRA_LIBS_BASIC"`
    TEST_EXTRA_LIBS_GL=`unix2dos "$TEST_EXTRA_LIBS_GL"`
    TEST_EXTRA_LIBS_PF=`unix2dos "$TEST_EXTRA_LIBS_PF"`
else
    SAFE_VJROOT_ABS="$VJROOT_ABS"
fi

AC_SUBST(topdir)
AC_SUBST(UNIX_VJROOT_ABS)
AC_SUBST(SAFE_VJROOT_ABS)
AC_SUBST(VJ_SRCDIR)

AC_SUBST(AR)
AC_SUBST(ARFLAGS)
AC_SUBST(AR_NAME_FLAG)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(DEP_GEN_FLAG)
AC_SUBST(DEPENDFLAGS)
AC_SUBST(DEPEND_EXTRAS)
AC_SUBST(EXTRA_LINK_FLAGS)
AC_SUBST(GROUP_NAME)
AC_SUBST(FILE_PERMS)
AC_SUBST(EXEC_PERMS)
AC_SUBST(DIR_PERMS)
AC_SUBST(INCLUDES)
AC_SUBST(LD)
AC_SUBST(LIBS)
AC_SUBST(LDOPTS)
AC_SUBST(LDOPTS_DBG)
AC_SUBST(LDOPTS_OPT)
AC_SUBST(OBJ_FILE_SUFFIX)
AC_SUBST(OBJ_NAME_FLAG)
AC_SUBST(DBG_FLAGS)
AC_SUBST(OPT_FLAGS)
AC_SUBST(PERL)

AC_SUBST(LIB_PREFIX)
AC_SUBST(STATICLIB_EXT)
AC_SUBST(SHAREDLIB_EXT)

AC_SUBST(ABI)
AC_SUBST(ISA)
AC_SUBST(ABI_LIST)
AC_SUBST(LIBBITSUF)
AC_SUBST(OS_TYPE)
AC_SUBST(PLATFORM)
AC_SUBST(DSOREGFILE)
AC_SUBST(DSOVERSION)
AC_SUBST(DSOVERSIONOPTS)

AC_SUBST(JDK_HOME)
AC_SUBST(JAVAC)
AC_SUBST(JAR)
AC_SUBST(BUILD_GUI)

AC_SUBST(OGLROOT)
AC_SUBST(PFROOT)

AC_SUBST(OPENGL_API)
AC_SUBST(PERFORMER_API)

AC_SUBST(SEMAPHORE_SYS)
AC_SUBST(SHMEM_SYS)
AC_SUBST(MUTEX_SYS)
AC_SUBST(THREAD_SYS)

AC_SUBST(TEST_VJ_LIBS_BASIC)
AC_SUBST(TEST_VJ_LIBS_GL)
AC_SUBST(TEST_VJ_LIBS_PF)
AC_SUBST(TEST_LIBS_BASIC)
AC_SUBST(TEST_EXTRA_LIBS_BASIC)
AC_SUBST(TEST_EXTRA_LIBS_GL)
AC_SUBST(TEST_EXTRA_LIBS_PF)

dnl # -------------------------------------------------------------------------
dnl # Final file generation step.
dnl # -------------------------------------------------------------------------
AC_OUTPUT(Makefile Makefile.base Config/Makefile Environment/Makefile
          GUI/Makefile Input/Makefile Input/InputManager/Makefile
          Input/ibox/Makefile Input/vjGesture/Makefile Input/vjGlove/Makefile
          Input/vjInput/Makefile Input/vjKeyboard/Makefile
          Input/vjPosition/Makefile Input/vjSim/Makefile Kernel/Makefile
          Kernel/Pf/Makefile Kernel/GL/Makefile Math/Makefile
          Performance/Makefile SharedMem/Makefile Sync/Makefile
          Threads/Makefile
          test/Makefile test/CfgTest/Makefile test/GLWindow/Makefile
          test/Math/Makefile test/Matrix/Makefile test/Performance/Makefile
          test/Performance/analyzer/Makefile
          test/Performance/perfdatabuffer-test/Makefile test/Quat/Makefile
          test/Sync/Makefile test/input/Makefile
          test/testDynamicCastSTL/Makefile test/threads/Makefile
          samples/Makefile samples/pfNav/Makefile samples/ogl/Makefile
          samples/ogl/combo/Makefile samples/ogl/cubes/Makefile
          samples/ogl/glove/Makefile samples/ogl/simpleGlove/Makefile
          samples/ogl/torus/Makefile samples/ogl/wand/Makefile
          tools/Makefile
          VARS.pl)

cat <<BUILD_INFO

 Remember that you need to build Juggler with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the Juggler distribution.

BUILD_INFO
