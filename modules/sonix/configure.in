# ***************** <SNX heading BEGIN do not edit this line> *****************
#
# sonix
#
# Original Authors:
#   Kevin Meinert
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# ****************** <SNX heading END do not edit this line> ******************

# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998, 1999, 2000, 2001 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# *************** <auto-copyright.pl END do not edit this line> ***************

AC_INIT
AC_CONFIG_AUX_DIR(../../share/config)
DPP_PREREQ([1.5.1])
DPP_INIT

dnl make the nice reconfig script.
DPP_GEN_RECONFIG


# -----------------------------------------------------------------------------
# Command-line arguments (--enable-option, --with-pkg=package_name).
# -----------------------------------------------------------------------------

# ------------------------------------------------------ #
# --enable-feature[=arg] and --disable-feature arguments #
# ------------------------------------------------------ #
DPP_STD_CPP(yes)

dnl does the user want OpenAL?
AC_ARG_ENABLE(openal,
              [  --enable-openal         Compile in OpenAL support       [default=yes]],
              [OPENAL_ENABLED="$enableval"], [OPENAL_ENABLED='yes'])

dnl does the user want Subsynth?
AC_ARG_ENABLE(subsynth,
              [  --enable-subsynth       Compile in Subsynth support     [default=yes]],
              [SUBSYNTH_ENABLED="$enableval"], [SUBSYNTH_ENABLED='yes'])

dnl does the user want AudioWorks?
AC_ARG_ENABLE(audioworks,
              [  --enable-audioworks     Compile in AudioWorks support   [default=yes]],
              [AUDIOWORKS_ENABLED="$enableval"], [AUDIOWORKS_ENABLED='yes'])

# -------------------------------------------- #
# --with-pkg[=arg] and --without-pkg arguments #
# -------------------------------------------- #

# Override the C compiler that configure would otherwise find itself.
AC_ARG_WITH(cc, [  --with-cc=<PATH>        Alternate C compiler ],
            _alt_cc="$withval", _alt_cc='none')

# Override the C++ compiler that configure would otherwise find itself.
AC_ARG_WITH(cxx, [  --with-cxx=<PATH>       Alternate C++ compiler ],
            _alt_cxx="$withval", _alt_cxx='none')


# Define the binary format.
DPP_ABI_SETUP

# -----------------------------------------------------------------------------
# Path setup.
# -----------------------------------------------------------------------------
DPP_WIN32_SETUP

# $srcdir is the root directory of the SNX source tree.  To get a value
# for $VPRROOT_ABS, we cd there and save the value of running pwd.  Then
# return to the directory where configure is being run ($topdir).
cd "$srcdir"
SNXROOT_ABS=`pwd`

cd "$SNXROOT_ABS/../.."
UNIX_JUGGLERROOT_ABS=`pwd`
cd "$topdir"

if test "x$CYGPATH" != "xno" ; then
   JUGGLERROOT_ABS=`cygpath -w "$UNIX_JUGGLERROOT_ABS" | sed -e 's/\\\\/\\//g'`
else
   JUGGLERROOT_ABS="$UNIX_JUGGLERROOT_ABS"
fi

# We use AC_CANONICAL SYSTEM so that we can find out information about the


# Force the use of GCC as the compiler.
# NOTE: This is not fully implemented yet for any platform, but it is
# partially usable on Windows.
DPP_WITH_GCC(no)




# build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM
DPP_SYSTEM_SETUP

# -----------------------------------------------------------------------------
# Checks for programs.
# -----------------------------------------------------------------------------
VJ_COMPILER_SETUP
VJ_PROG_CC_PROF_FLAG(yes)
VJ_PROG_CXX_PROF_FLAG(yes)

# Ensure that the C++ compiler we've found is capable of compiling the newer
# newer C++ features that we need.
DPP_CXX_NAMESPACE([AC_MSG_ERROR([*** Sonix requires C++ namespace support ***])])
DPP_CXX_TEMPLATES([AC_MSG_ERROR([*** Sonix requires C++ template support ***])])
DPP_CXX_INLINE([AC_MSG_ERROR([*** Sonix requires C++ inline support ***])])

AC_CHECK_PROG([MTREE_CMD], [mtree], [mtree], [\$(PERL) \$(scriptdir)/mtree.pl])

# -----------------------------------------------------------------------------
# Checks for libraries.
# -----------------------------------------------------------------------------

# ignore the nasty paths appended by the config scripts...
saveCXXFLAGS="$CXXFLAGS"
saveINCLUDES="$INCLUDES"

#VPR_PATH(0.4.1, , AC_MSG_ERROR(*** VPR required for sonix***))
#CXXFLAGS="$VPR_CXXFLAGS $CXXFLAGS"

dnl ignore the nasty paths appended by the config scripts...
#CXXFLAGS="$saveCXXFLAGS"
#INCLUDES="-I${VJ_BASE_DIR}/include -I${VPR_BASE_DIR}/include  $saveINCLUDES"
#if test "x$PLATFORM" = "xIRIX" ; then
#   INCLUDES="-I${VPR_BASE_DIR}/include/boost/compatibility/cpp_c_headers $INCLUDES"
#fi

# find and append GMTL flags...
vjsave_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $STDFLAGS"
GMTL_PATH(0.1.9, [$JUGGLERROOT_ABS/external/GMTL],
          [$JUGGLERROOT_ABS/external/GMTL], ,
          [AC_MSG_ERROR([*** GMTL required for sonix ***])])
CPPFLAGS="$vjsave_CPPFLAGS"
CXXFLAGS="$CXXFLAGS $GMTL_INCLUDES"

# Ensure that a version of Perl greater than or equal to 5.004 is available.
DPP_PERL_VER(5.004, , , [AC_MSG_ERROR([*** Perl is required ***])])
DPP_BASIC_PROGS([$PLATFORM], [$OS_TYPE])
DPP_PROG_INSTALL

# -----------------------------------------------------------------------------
# Miscellaneous checks.
# -----------------------------------------------------------------------------

# Macros:
#     DPP_INSTALLER - Set up the installer configuration. 
# Variables defined:
#     OWNER_NAME - The owner of everything installed.
#     GROUP_NAME - The group of everything installed.
#     FILE_PERMS - The UNIX-style octal permissions of normal files.
#     EXEC_PERMS - The UNIX-style octal permissions of executable files.
#     DIR_PERMS  - The UNIX-style octal permissions of directories.
DPP_INSTALLER(sonix, 0644, 0755, 0755)

# For use in linking applications.
EXTRA_LINK_FLAGS=''

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -woff 3322 -w2"
    EXTRA_LINK_FLAGS="-all"
elif test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
    CXXFLAGS="$CXXFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS /MTd"
    DBG_FLAGS="$DBG_FLAGS /MDd"
    OPT_FLAGS="$OPT_FLAGS /MD"
fi

# For makedepend(1) to work properly on HP-UX with aCC, we have to include
# these extra paths.
if test "x$PLATFORM" = "xHP" -a "x$USE_GCC" != "xyes" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
    DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

# Define the base path to the source directory using $SNXROOT_ABS as an
# alternative to using $srcdir.
SNX_SRCDIR='$(SNXROOT_ABS)'
UNIX_SNXROOT_ABS="$SNXROOT_ABS"

# Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
    LN_S='cp -pr'
    RM_LN='rm -rf'
    SAFE_SNXROOT_ABS=`dospath -p "$SNXROOT_ABS"`
    SAFE_JUGGLERROOT_ABS=`dospath -p "$JUGGLERROOT_ABS"`
    SNX_SRCDIR=`dospath "$SNX_SRCDIR"`

    if test "x$DEPEND_EXTRAS" != "x" ; then
        DEPEND_EXTRAS=`dospath "$DEPEND_EXTRAS"`
    fi

    if test "x$INCLUDES" != "x" ; then
        INCLUDES=`dospath "$INCLUDES"`
    fi

    if test "x$LIBS" != "x" ; then
        LIBS=`dospath "$LIBS"`
    fi

    MTREE_CMD=`dospath "$MTREE_CMD"`

    APP_EXTRA_LIBS_BASIC=`dospath "$APP_EXTRA_LIBS_BASIC"`
else
    RM_LN='rm -f'
    SAFE_JUGGLERROOT_ABS="$JUGGLERROOT_ABS"
    SAFE_SNXROOT_ABS="$SNXROOT_ABS"
fi

# See if we have vapor
VPR_PATH(, [HAVE_VAPOR='Y'], [HAVE_VAPOR='N'], )
VPR_SUBSYSTEM=
if test "x$HAVE_VAPOR" = "xY"; then
   VPR_SUBSYSTEM=`$VPR_CONFIG --subsystem`
fi

dnl append the openal stuff...
OPENAL_API='N'
if test "x$OPENAL_ENABLED" = "xno" ; then
# do nothing...
   true
else
   DPP_HAVE_OPENAL( /usr/local, AC_MSG_RESULT(+ Found OpenAL), )
   if test "x$OPENAL" = "xyes" ; then
      if test "x$HAVE_VAPOR" = "xY" -a "x$VPR_SUBSYSTEM" != "xSPROC"; then
         DPP_PTHREAD_FINISH
         OPENAL_API='Y'
         echo "+ added OpenAL to the compile and link paths"
      else
         AC_MSG_WARN([*** OpenAL cannot be used with a VPR installation using SPROC. ***])
      fi
   else
      if test "x$OPENAL_ENABLED" = "xyes" ; then
         AC_MSG_WARN(*** you requested to use OpenAL as one of your audio subsystems, but it was not found. ***)
      fi
   fi
fi


dnl append the subsynth stuff...
SUBSYNTH_API='N'
if test "x$SUBSYNTH_ENABLED" = "xno" ; then
# do nothing...
   true
else
#   VPR_PATH(0.4.1, , AC_MSG_ERROR(*** VPR required for subsynth***))
   snx_dep_scripts="vpr-config"
   DPP_HAVE_SUBSYNTH( /usr, AC_MSG_RESULT(+ Found Subsynth), AC_MSG_RESULT(+ Subsynth not found) )
   if test "x$SUBSYNTH" = "xyes" ; then
      SUBSYNTH_API='Y'
      echo "+ added Subsynth to the compile and link paths"
   else
      if test "x$SUBSYNTH_ENABLED" = "xyes" ; then
         AC_MSG_WARN(*** you requested to use Subsynth as one of your audio subsystems, but it was not found. ***)
      fi
   fi
fi

dnl append the openal stuff...
AUDIOWORKS_API='N'
if test "x$AUDIOWORKS_ENABLED" = "xno" ; then
# do nothing...
   true
else
   DPP_HAVE_AUDIOWORKS( /usr, AC_MSG_RESULT(+ Found AudioWorks), )
   if test "x$AUDIOWORKS" = "xyes" ; then
      if test "x$HAVE_VAPOR" = "xY" -a "x$VPR_SUBSYSTEM" = "xSPROC"; then
         AUDIOWORKS_API='Y'
         echo "+ added AudioWorks to the compile and link paths"
      else
         AC_MSG_WARN([*** AudioWorks cannot be used with a VPR installation that does not use SPROC. ***])
      fi
   else
      if test "x$AUDIOWORKS_ENABLED" = "xyes" ; then
         AC_MSG_WARN(*** you requested to use AudioWorks as one of your audio subsystems, but it was not found. ***)
      fi
   fi
fi

dnl -------------------------------------------------------------
dnl external stuff (like sample apps, also for those who use sonix-config)....
dnl -------------------------------------------------------------
sample_application_includes="$sample_application_includes -I\${SNX_BASE_DIR}/include $INCLUDES"
sample_application_ldflags="$sample_application_ldflags $LDFLAGS"


if test "x$OS_TYPE" = "xWin32" ; then
   snx_ldflags_compiler="$snx_ldflags_compiler /link /libpath:\$prefix/lib"
   snx_ldflags_linker="$snx_ldflags_linker /libpath:\$prefix/lib"
   snx_lib='sonix.lib'
   snx_libs="$snx_libs sonix.lib"
   sample_application_libs="$sample_application_libs /LIBPATH:\$(SNX_BASE_DIR)/lib$LIBBITSUF/sonix.lib $LIBS"

   DYLIB_DEPS='comctl32.lib user32.lib gdi32.lib ws2_32.lib'
   DYLIB_PROF_DEPS="$DYLIB_DEPS"
else
   if test "x$GXX" = "xyes" ; then
      static_begin="-Wl,-Bstatic"
      static_end="-Wl,-Bdynamic"
   else
      static_begin="-B static"
      static_end="-B dynamic"
   fi

   snx_ldflags_compiler="$snx_ldflags_compiler -L\$prefix/lib$LIBBITSUF"
   snx_ldflags_linker="$snx_ldflags_compiler"
   snx_lib='-lsonix'
   snx_libs="$snx_libs -lsonix"
   sample_application_libs="$sample_application_libs -L\$(SNX_BASE_DIR)/lib$LIBBITSUF -lsonix $LIBS $VPR_LIBS_CC -lm"

   DYLIB_DEPS=''
   DYLIB_PROF_DEPS="$DYLIB_DEPS"
fi

#sample_application_libs="$sample_application_libs"

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
    snx_n32_flags='-n32'
    snx_64_flags='-64'
fi

dnl ===================================================
dnl  Just extra stuff here (non-sonic stuff)
dnl ===================================================
snx_extra_cxxflags="$snx_extra_cxxflags $GMTL_INCLUDES"
snx_extra_include_dirs="$snx_extra_include_dirs"
snx_extra_ldflags="$snx_extra_ldflags $APP_EXTRA_LIBS_BEGIN"
#snx_extra_libs="$snx_extra_libs $LDFLAGS $VPR_LIBS_CC_MIN $LIBS $APP_EXTRA_LIBS_END"
snx_extra_libs="$snx_extra_libs $LDFLAGS $LIBS $APP_EXTRA_LIBS_END"

AC_SUBST(DYLIB_DEPS)
AC_SUBST(DYLIB_PROF_DEPS)

AC_SUBST(static_begin)
AC_SUBST(static_end)
AC_SUBST(snx_lib)
AC_SUBST(snx_libs)
AC_SUBST(snx_n32_flags)
AC_SUBST(snx_64_flags)
AC_SUBST(snx_extra_cxxflags)
AC_SUBST(snx_extra_include_dirs)
AC_SUBST(snx_extra_ldflags)
AC_SUBST(snx_extra_libs)
AC_SUBST(snx_ldflags_compiler)
AC_SUBST(snx_ldflags_linker)
AC_SUBST(sample_application_includes)
AC_SUBST(sample_application_ldflags)
AC_SUBST(sample_application_libs)
AC_SUBST(snx_dep_scripts)
AC_SUBST(AUDIOWORKS_API)
AC_SUBST(OPENAL_API)
AC_SUBST(SUBSYNTH_API)
AC_SUBST(SAFE_SNXROOT_ABS)
AC_SUBST(SAFE_JUGGLERROOT_ABS)

dnl debugging output...
dnl echo "+ setting snx_includes == $snx_includes"
dnl echo "+ setting snx_ldflags == $snx_ldflags"
dnl echo "+ setting snx_libs == $snx_libs"
dnl -------------------------------------------------------------

VJ_VERSION_GROK(VERSION)

DPP_SUBST
DPP_GET_PROJECTDIR

# Export variables defined above.
AC_SUBST(topdir)
AC_SUBST(RM_LN)
AC_SUBST(EXTRA_LINK_FLAGS)

VJ_MTREE_LIB_GEN(SNX, mtree, $PLATFORM, $ISA)

AC_OUTPUT(
          snx/Makefile
          snx/plugins/Makefile
          snx/plugins/AudioWorks/Makefile
          snx/plugins/OpenAL/Makefile
          snx/plugins/Subsynth/Makefile
          samples/Makefile
          samples/opengl/Makefile
          test/Makefile
          test/apps/Makefile
          test/TestSuite/Makefile
          Makefile 
          common.defs.mk
          make.defs.mk
          mtree/SNX.include.dist
          mtree/SNX.install.dist
          sonix-config,
          [chmod a+x sonix-config])

cat <<BUILD_INFO

 Remember that you need to build with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the distribution.

BUILD_INFO
