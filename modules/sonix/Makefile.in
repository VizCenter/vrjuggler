# ***************** <SNX heading BEGIN do not edit this line> *****************
#
# sonix
#
# Original Authors:
#   Kevin Meinert, Carolina Cruz-Neira
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# ****************** <SNX heading END do not edit this line> ******************
# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998, 1999, 2000, 2001 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# *************** <auto-copyright.pl END do not edit this line> ***************


default: debug



# This is a hack to deal with GNU make's ignorance about defined targets.
# Without this, the 'default' set in dpp.subdir.mk becomes the default
# target, and that's not what we want.
DEFAULT_SET	= 1
SRC_MKFILES	= Makefile

include @topdir@/make.defs.mk

includedir           = @includedir@
instlinks            = $(topdir)/install-clone

SNX_LIBRARY           = @LIB_PREFIX@sonix
SNX_LIB_STATIC        = $(SNX_LIBRARY).$(STATICLIB_EXT)
SNX_LIB_DYNAMIC       = $(SNX_LIBRARY).$(DYNAMICLIB_EXT)

# setup the list of libs to be built...
LIBS        = $(SNX_LIBRARY)
STATIC_LIBS    = $(LIBS)
DYNAMIC_LIBS   = $(LIBS)

# Subdirectories used for recursion through the source tree.
SUBDIR          = snx

# needed for compiling the DSO
EXTRA_LIBS      = @LIBS@ -lm

# Version information.
BRANCH		= HEAD
CANON_NAME	= Mario
VER_ARGS	= -f $(ROOT_ABS)/VERSION -s @SUBSYSTEM@ -b $(BRANCH)	\
                  -i $(ROOT_ABS)/snx/snxParam.h.in -o snx/snxParam.h		\
                  -d "`date '+%b %e, %Y %H:%M:%S'`" -n "$(CANON_NAME)"

ifdef VERSION
    VER_ARGS	+= -v $(VERSION)
endif


# -----------------------------------------------
# Construct the static version of the libraries.
# -----------------------------------------------
$(LIBDIR)/$(SNX_LIB_STATIC): $(OBJDIR)/*.$(OBJEXT)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(AR) $(AR_NAME_FLAG)$@ $(OBJDIR)/*.$(OBJEXT)
	$(RANLIB) $@
	cd $(LIBDIR_BASE) && rm -f $(notdir $@) && $(LN_S) $@ ./
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"

# ------------------------------------------------
# Construct the dynamic version of the libraries.
# ------------------------------------------------
$(LIBDIR)/$(SNX_LIB_DYNAMIC): $(OBJDIR)/*.$(OBJEXT)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(LD) $(LDOPTS) -o $@ $(OBJDIR)/*.$(OBJEXT)
	cd $(LIBDIR_BASE) && rm -f $(notdir $@) && $(LN_S) $@ ./
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"


# =============================================================================
# Library targets.
# =============================================================================


# libs.mk calls these two...
BEFOREBUILD	= beforebuild
AFTERBUILD	= afterbuild

# Things to do before the object files and library are built.
beforebuild:
	@chmod +x $(topdir)/sonix-config
	@$(SHELL) $(scriptdir)/make-ver.sh $(VER_ARGS)
	@$(PERL) $(scriptdir)/incvt.pl -i $(topdir)/config.status \
            -t $(ROOT_ABS)/sonix-config.in -v$(ROOT_ABS)/VERSION \
            -o $(topdir)/sonix-config
	@chmod +x $(topdir)/sonix-config

# Things to do after the object files and library are built.
afterbuild:
	@$(MAKE) links
   
# =============================================================================
# Make links for developer use that provide the needed functionality for
# the $SNX_BASE_DIR environment variable to be used when needed.  $VJ_BASE_DIR
# should be set to $(instlinks).
# =============================================================================
links:
	@echo "------------------------------------------------"
	@echo "Setting up developer installation links"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(instlinks)
	$(SHELL) $(MKINSTALLDIRS) $(instlinks)/include
	$(SHELL) $(MKINSTALLDIRS) $(instlinks)/bin
	$(SHELL) $(MKINSTALLDIRS) $(instlinks)/$(LIBDIR_BASE)
	cd $(instlinks)/include &&                                      \
          for dir in $(SUBDIR) ; do                                     \
              rm -f ./$$dir ;                                           \
              ln -s $(ROOT_ABS)/$$dir ./$$dir ;                       \
          done
	for lib in $(LIBS) ; do 					\
            cd $(instlinks)/$(LIBDIR_NAME) && rm -f $$lib* &&		\
              $(LN_S) $(LIBDIR_BASE)/$$lib* ./ ;			\
          done
	cd $(instlinks) && rm -rf ./share &&                  \
       	  $(SHELL) $(MKINSTALLDIRS) ./share/sonix && \
           ln -s $(ROOT_ABS)/data ./share/sonix/data
	cd $(instlinks)/share/sonix &&                          \
          ln -s $(topdir)/samples ./src
	cd $(instlinks)/share/sonix &&                          \
          ln -s $(topdir)/README.txt ./
	$(PERL) $(scriptdir)/incvt.pl -i $(topdir)/config.status	\
            -t $(ROOT_ABS)/sonix-config.in -p 'use_base_dir=yes'	\
            -v $(ROOT_ABS)/VERSION -o $(instlinks)/bin/sonix-config -x
	@echo "\n\n"
	@echo "---------------------------------------------------------------"
	@echo 'You should now set $$SNX_BASE_DIR to:'
	@cd $(instlinks) && echo "  `pwd`"
	@echo "---------------------------------------------------------------"

# Remove the links in $(instlinks).
clean-links:
	@echo "------------------------------------------------"
	@echo "Removing developer installation links"
	@echo "------------------------------------------------"
	rm -rf $(instlinks)


# =============================================================================
# Installation targets.  The default (what is done by 'install') is to install
# the static debugging version of the libraries.  The steps taken for a full
# installation are:
#
#     1) Create the full installation directory hierarchy.
#     2) Install the libraries.
#     3) Install the header files.
#     4) Install the test programs.
#     5) Install the contents of the Data directory.
#     6) Install the Java-based config editor (if possible).
# =============================================================================

BEFOREINSTALL	= beforeinstall
AFTERINSTALL	= afterinstall

# Steps to take before beginning the installation process.  This target is
# independent of the current ABI.
beforeinstall:
	@$(MAKE) hier

# Make the full directory hierarchy for the installation.
hier:
	@echo "------------------------------------------------"
	@echo "Making hierarchy"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(prefix)
	$(SHELL) $(MKINSTALLDIRS) $(bindir)
	$(SHELL) $(MKINSTALLDIRS) $(includedir)/snx
	$(SHELL) $(MKINSTALLDIRS) $(projdatadir)/sonix/src
	$(SHELL) $(MKINSTALLDIRS) $(projdatadir)/sonix/data
	@for lib in $(ABI_LIST) ; do					\
            $(MAKE) dppABI=$$lib hier-abi ;   \
          done

hier-abi:
	$(SHELL) $(MKINSTALLDIRS) $(prefix)/$(LIBDIR_NAME)/$(ISA)/$(DBG_DIR)
	$(SHELL) $(MKINSTALLDIRS) $(prefix)/$(LIBDIR_NAME)/$(ISA)/$(OPT_DIR)

# Steps to take after the installation process is complete.  This target is
# independent of the current ABI.
afterinstall:
	@echo "==============================================================="
	@echo "sonix installation complete"
	@echo "==============================================================="


#PREINSTALL	= pre-install
POSTINSTALL	= post-install



# Do everything needed after installing the library binaries.
post-install:
	@$(MAKE) install-share
	@$(MAKE) install-test
	$(INSTALL) -m $(EXEC_PERMS) $(GROUP_OPT_UNIX)			\
          $(topdir)/sonix-config $(bindir)

install-share:
	cp -r $(ROOT_ABS)/data/*.wav $(projdatadir)/sonix/data
	cp -r $(ROOT_ABS)/samples/*.cpp $(topdir)/samples/Makefile $(projdatadir)/sonix/src
	cp $(ROOT_ABS)/README.txt $(projdatadir)/sonix

install-test:

include $(MKPATH)/dpp.libs.mk

# -----------------------------------------------------------------------------
# Clean-up.
# -----------------------------------------------------------------------------
include $(MKPATH)/dpp.clean.mk
CLEAN_DIRS      += $(BUILDDIR_BASE) $(LIBDIR_NAME) $(instlinks)
CLOBBER_DIRS    += $(BUILDDIR_BASE) $(LIBDIR_NAME)


# this is for "ooops! i configured in the root dir of my project..."
cleanconfigure:
	rm config.cache configure config.status reconfig simple_config.h make.defs.mk config.log aclocal.m4 Makefile

# -------------------------------------
# Build all versions of the libraries.
# -------------------------------------
buildworld: all

# ------------------------------------------------------------------------
# Do a full installation all versions of the libraries and the associated
# files.
# ------------------------------------------------------------------------
installworld: install-all

# =============================================================================
# Automatically generated documentation.
# =============================================================================
docs: doc-internal doc-public

include $(MKPATH)/dpp.subdir.mk
