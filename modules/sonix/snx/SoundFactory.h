
/****************** <SNX heading BEGIN do not edit this line> *****************
 *
 * sonix
 *
 * Original Authors:
 *   Kevin Meinert
 *
 * -----------------------------------------------------------------
 * File:          $RCSfile$
 * Date modified: $Date$
 * Version:       $Revision$
 * -----------------------------------------------------------------
 *
 ****************** <SNX heading END do not edit this line> ******************/
/*************** <auto-copyright.pl BEGIN do not edit this line> **************
 *
 * VR Juggler is (C) Copyright 1998, 1999, 2000, 2001 by Iowa State University
 *
 * Original Authors:
 *   Allen Bierbaum, Christopher Just,
 *   Patrick Hartling, Kevin Meinert,
 *   Carolina Cruz-Neira, Albert Baker
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 *************** <auto-copyright.pl END do not edit this line> ***************/




/* Generated by Together */

#ifndef SNXSOUNDFACTORY_H
#define SNXSOUNDFACTORY_H

#include <iostream>
#include <string>
#include <fstream>
#include "snx/xdl.h"
#include "snx/PluginAPI.h"
#include "snx/dirlist.h"
#include "snx/ReplaceEnvVars.h"
#include "snx/Singleton.h"
#include "snx/ISoundImplementation.h"

namespace snx
{

class SoundFactory : public snx::Singleton<SoundFactory>
{
public:
   SoundFactory() : snx::Singleton<SoundFactory>()
   {
      std::vector<std::string> search_paths;
      search_paths.push_back( "${SNX_BASE_DIR}/share/sonix/plugins" );
      search_paths.push_back( "${HOME}/.sonix/plugins" );

      std::vector<std::string> filelist;
      for (unsigned int x = 0; x < search_paths.size(); ++x)
      {
         search_paths[x] = snx::replaceEnvVars( search_paths[x] );
         std::cout << "[snx]SoundFactory| Finding plugins in: \n"
                   << " + " << search_paths[x].c_str() << std::endl;
      //   std::string test_file = search_paths[x] + "/.testjunk";
         if (xdl::isDir(search_paths[x].c_str()))
         {
            xdl::dirlist( search_paths[x].c_str(), filelist );
            this->filterOutPluginFileNames( search_paths[x].c_str(), filelist, filelist );
            this->loadPlugins( search_paths[x], filelist );
            for(unsigned int i=0;i<filelist.size();i++){
               std::cout << "filelist: " << filelist[i] << ", " << std::endl;
            }
         }
      }
   }

   void errorOutput(std::string filename, const char* test)
   {
      std::cout << "[snx]Plugin: " << filename << " does not export symbol: " << test << std::endl;
   }
   
   
   bool isPlugin( std::string filename )
   {  
      xdl::Library lib;
      if (lib.open( filename.c_str(), xdl::NOW ) == false){
         std::cout << "Plugin: " << filename << " has invalid name." << std::endl;
         return false;
      }
      if (lib.lookup( "newPlugin" ) == NULL){
         errorOutput(filename, "newPlugin");
         return false;
      }  
      if (lib.lookup( "deletePlugin" ) == NULL){
         errorOutput(filename, "deletePlugin");
         return false;
      }
      if (lib.lookup( "getVersion" ) == NULL){
         errorOutput(filename, "getVersion");
         return false;
      }
      if (lib.lookup( "getName" ) == NULL){
         errorOutput(filename, "getName");
         return false;
      }

      // @todo give sonix an internal version number string!
      //getVersionFunc getVersion = (getVersionFunc)lib.lookup( "getVersion" );
      //if (getVersion != NULL && getVersion() != snx::version) return false;

      lib.close();
      std::cout << "Plugin: " << filename << " is a valid sonix plugin." << std::endl;
      return true;
   }

   void filterOutPluginFileNames( const char* dir,
                                  std::vector<std::string> srclist,
                                  std::vector<std::string>& destlist )
   {
      destlist.clear();
      std::string temp;
      
      std::cout << "[snx]Checking Plugins validity..." << std::endl;
      for (unsigned int x = 0; x < srclist.size(); ++x)
      {
         temp = dir + std::string("/") + srclist[x];
         if (this->isPlugin( temp/*srclist[x]*/ ))
         {
            destlist.push_back( srclist[x] );
         }
      }
   }
   
   void loadPlugins( std::string prefix, std::vector<std::string> filelist )
   {
      unloadPlugins();
      mPlugins.clear();
      mPlugins.resize( filelist.size() );
      for (unsigned int x = 0; x < filelist.size(); ++x)
      {
         std::string full_path = prefix + std::string( "/" ) + filelist[x];
         
         // open the library
         mPlugins[x].open( full_path.c_str(), xdl::NOW );

         // get the name..
         getNameFunc getName = (getNameFunc)mPlugins[x].lookup( "getName" );
         std::string name;
         if (getName != NULL)
         {
            name = getName();
            std::cout << "   o  Got plugin: " << name << " registering..." << std::endl;
         
            // create the implementation
            newPluginFunc newPlugin = (newPluginFunc)mPlugins[x].lookup( "newPlugin" );
            ISoundImplementation* si = NULL;
            if (newPlugin != NULL)
            {
               si = newPlugin();
               if (NULL != si)
               {
                  this->reg( name, si );
               }
            }
         }
      }
   }

   void unloadPlugins()
   {
      for (unsigned int x = 0; x < mPlugins.size(); ++x)
      {
         // get the name..
         getNameFunc getName = (getNameFunc)mPlugins[x].lookup( "getName" );
         std::string name;
         ISoundImplementation* impl = NULL;
         if (getName != NULL)
         {
            name = getName();
            impl = mRegisteredImplementations[name];
             
            // unreg it.
            this->reg( name, NULL );
         }

         // delete the memory using the delete func that comes with the library...
         deletePluginFunc deletePlugin = (deletePluginFunc)mPlugins[x].lookup( "deletePlugin" );
         if (NULL != deletePlugin && NULL != impl)
            deletePlugin( impl );
         
         // close the library
         mPlugins[x].close();
      }
      mPlugins.clear();
   }

   /**
    * @input name of api to create
    * @output an implementation is returned for you to use (new memory, you delete)
    * @postconditions if apiName is not known, then a stub implementation is returned
    * @semantics factory function used to create an implementation of a sound API 
    */
   void createImplementation( const std::string& apiName,
                              snx::ISoundImplementation* &mImplementation );

   // pass valid pointer to a sound implementation with a name it's refered to
   // or... pass NULL to unregister/delete apiName...
   void reg( const std::string& apiName, snx::ISoundImplementation* impl )
   {
      if (impl != NULL)
      {
         std::cout<<"[snx]SoundFactory| NOTICE: Registering sound API: "<<apiName<<" ["<<(int)impl<<"]\n"<<std::flush;
         impl->setName( apiName );
         mRegisteredImplementations[apiName] = impl;
      }
      else
      {
         mRegisteredImplementations.erase( apiName );
         std::cout<<"[snx]SoundFactory| NOTICE: UnRegistered sound API: "<<apiName<<" ["<<(int)impl<<"]\n"<<std::flush;
      }      
      
   }
   
   std::map< std::string, snx::ISoundImplementation* > mRegisteredImplementations;
   std::vector<xdl::Library> mPlugins;
private:  
   /** @link dependency */
   /*#  snx::ISoundImplementation lnkSoundImplementation; */

   /** @link dependency */
   /*#  snx::StubSoundImplementation lnksnx::StubSoundImplementation; */

   /** @link dependency */
   /*#  snx::AudioWorksSoundImplementation lnksnx::AudioWorksSoundImplementation; */

   /** @link dependency */
   /*#  snx::OpenALSoundImplementation lnksnx::OpenALSoundImplementation; */

   /** @link aggregation 
    * @clientCardinality 1
    * @supplierCardinality 0..*
    * @directed */
   /*#  snx::ISoundImplementation lnkSoundImplementation1; */
};

template <class _type>
class SoundFactoryReg
{
public:
   _type mSoundAPI;
   std::string mNameOfAPI;
   SoundFactoryReg( const std::string& apiName ) : mSoundAPI(), mNameOfAPI( apiName )
   {
      mSoundAPI.setName( mNameOfAPI );
      snx::SoundFactory::instance()->reg( mNameOfAPI, &mSoundAPI );
   }
   virtual ~SoundFactoryReg()
   {
      mSoundAPI.setName( "unavailable/deleted/nomore" );
      snx::SoundFactory::instance()->reg( mNameOfAPI, NULL );
   }   
};

}; // end namespace


#endif //SNXSOUNDFACTORY_H
