#!/bin/sh

# ***************** <VPR heading BEGIN do not edit this line> *****************
#
# VR Juggler Portable Runtime
#
# Original Authors:
#   Allen Bierbaum, Patrick Hartling, Kevin Meinert, Carolina Cruz-Neira
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# ****************** <VPR heading END do not edit this line> ******************

# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2002 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# *************** <auto-copyright.pl END do not edit this line> ***************

%{
%}

subsystem_cxxflags="@subsystem_cxxflags@"
subsystem_libs="@subsystem_libs@"
vpr_extra_cxxflags="@vpr_extra_cxxflags@"
vpr_libs="@vpr_libs@"

vpr_extra_include_dirs="@vpr_extra_include_dirs@"

vpr_default_abi="@ABI@"
vpr_default_isa="@ISA@"
vpr_n32_flags="@vpr_n32_flags@"
vpr_64_flags="@vpr_64_flags@"
LIBBITSUF='@LIBBITSUF@'

USE_GCC='@USE_GCC@'

if [ "x$vpr_default_abi" = "xN32" ]; then
    vpr_abi_flags="$vpr_n32_flags"
elif [ "x$vpr_default_abi" = "x64" ]; then
    vpr_abi_flags="$vpr_64_flags"
else
    vpr_abi_flags=''
fi

vpr_isa_flags=''

if [ "x$USE_GCC" != "xyes" ]; then
   if [ "x$vpr_default_isa" = "xmips3" -o "x$vpr_default_isa" = "xmips4" ]
   then
      vpr_isa_flags="-$vpr_default_isa"
   fi
fi

prefix=@prefix@
exec_prefix=@exec_prefix@
prefix_set='no'
exec_prefix_set='no'
print_all='no'
use_linker='no'

usage()
{
    if test "x$2" != "x" ; then
       echo "Unrecognized option '$2'"
    fi

    cat <<EOF
Usage: vpr-config [OPTIONS] [LIBRARIES]
Options:
        [--basedir]             Use \$VPR_BASE_DIR when printing paths
        [--prefix[=DIR]]        Print the installation prefix or set an
                                alternate prefix to use when printing paths
        [--exec-prefix[=DIR]]   Print the executable prefix or set an
                                alternate executable prefix to use when
                                printing paths
        [--version]             Print the installed VPR's version number
        [--cxxflags [N32|64]]   Print the VPR-specific flags for the C++
                                compiler
        [--libs [N32|64]]       Print the basic VPR-specific libraries
        [--extra-libs [N32|64]] Print the extra linker options needed for
                                making an executable
        [--all]                 Print all the flags used for compiling or
                                linking (depending on other options)
        [--linker]              Print libraries as direct arguments to the
                                linker rather than to the compiler
        [--subsystem]           Print the OS abstraction layer being used
EOF

    exit $1
}

if test $# -eq 0; then
    usage 1 1>&2
fi

while test $# -gt 0; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case $1 in
        --help)
            usage 0 1>&2
            ;;
        --all)
            print_all='yes'
            ;;
        --basedir)
            use_base_dir=yes
            ;;
        --prefix=*)
            prefix=$optarg
            prefix_set='yes'

            if test $exec_prefix_set = no ; then
                exec_prefix=$optarg
            fi
            ;;
        --prefix)
            echo_prefix=yes
            ;;
        --exec-prefix=*)
            exec_prefix=$optarg
            exec_prefix_set=yes
            ;;
        --exec-prefix)
            echo_exec_prefix=yes
            ;;
        --version)
            echo @MAJOR_VERSION@.@MINOR_VERSION@.@MICRO_VERSION@
            ;;
        --cxxflags)
            echo_cxxflags=yes
            case $2 in
                --*)
                    # This is another option flag, so leave it alone.
                    ;;
                N32)
                    vpr_extra_cxxflags="$vpr_extra_cxxflags $vpr_n32_flags $vpr_isa_flags"
                    shift
                    ;;
                64)
                    vpr_extra_cxxflags="$vpr_extra_cxxflags $vpr_64_flags $vpr_isa_flags"
                    shift
                    ;;
                *)
                    vpr_extra_cxxflags="$vpr_extra_cxxflags $vpr_abi_flags $vpr_isa_flags"
                    if [ "x$2" != "x" ] ; then
                        shift
                    fi
                    ;;
            esac
            ;;
        --subsystem)
            echo @SUBSYSTEM@
            ;;
        --libs)
            echo_libs=yes
            case $2 in
                --*)
                    # This is another option flag, so leave it alone.
                    ;;
                N32)
                    ldflags="$vpr_n32_flags $vpr_isa_flags"
                    LIBBITSUF='32'
                    shift
                    ;;
                64)
                    ldflags="$vpr_64_flags $vpr_isa_flags"
                    LIBBITSUF='64'
                    shift
                    ;;
                *)
                    ldflags="$vpr_abi_flags $vpr_isa_flags"
                    if [ "x$2" != "x" ] ; then
                        shift
                    fi
                    ;;
            esac
            ;;
        --extra-libs)
            echo_extra_libs=yes
            case $2 in
                --*)
                    # This is another option flag, so leave it alone.
                    ;;
                N32)
                    LIBBITSUF='32'
                    shift
                    ;;
                64)
                    LIBBITSUF='64'
                    shift
                    ;;
                *)
                    if [ "x$2" != "x" ] ; then
                        shift
                    fi
                    ;;
            esac
            ;;
        --linker)
            use_linker=yes
            ;;
        --static)
            echo_static=yes
            ;;
        *)
            usage 1 1>&2
            ;;
    esac
    shift
done

# If we are using $VPR_BASE_DIR, overwrite $prefix and $exec_prefix unless
# they were set explicitly on the command line.
if test "$use_base_dir" = "yes" ; then
    if test "$prefix_set" = "no" ; then
        prefix="$VPR_BASE_DIR"
    fi

    if test "$exec_prefix_set" = "no" ; then
        exec_prefix="$VPR_BASE_DIR"
    fi
fi

if test "$echo_prefix" = "yes"; then
    echo $prefix
fi

if test "$echo_exec_prefix" = "yes"; then
    echo $exec_prefix
fi

if test "$echo_cxxflags" = "yes"; then
    if [ "x$vpr_extra_include_dirs" != "x" ]; then
        for dir in $vpr_extra_include_dirs ; do
            vpr_extra_includes="$vpr_extra_includes -I@includedir@/$dir"
            vpr_basedir_extra_includes="$vpr_basedir_extra_includes -I$VPR_BASE_DIR/include/$dir"
        done
    fi

    if test "$use_base_dir" = "yes"; then
        echo @vpr_cxxflags@ $vpr_extra_cxxflags $subsystem_cxxflags -I$VPR_BASE_DIR/include $vpr_basedir_extra_includes
    else
        echo @vpr_cxxflags@ $vpr_extra_cxxflags $subsystem_cxxflags -I@includedir@ $vpr_extra_includes
    fi
fi

if test "$echo_static" = "yes" ; then
    static_begin='@static_begin@'
    static_end='@static_end@'
fi

if test "$echo_libs" = "yes"; then
    if test "$use_base_dir" = "yes"; then
        ldflags="$ldflags -L$VPR_BASE_DIR/lib$LIBBITSUF"
    else
        if test "$use_linker" = "yes" ; then
            ldflags="$ldflags @vpr_ldflags_linker@"
        else
            ldflags="$ldflags @vpr_ldflags_compiler@"
        fi
    fi

    echo $ldflags $static_begin $vpr_libs $static_end
fi      

if test "x$echo_extra_libs" = "xyes"; then
    my_subsystem_libs=

    for i in $subsystem_libs ; do
        if test $i != -L@libdir@ ; then
            if test -z "$my_subsystem_libs" ; then
                my_subsystem_libs="$i"
            else
                my_subsystem_libs="$my_subsystem_libs $i"
            fi
        fi
    done

    vpr_extra_libs="@vpr_extra_libs@"

    if test "$use_linker" = "yes" ; then
        extra_ldflags="$ldflags @vpr_extra_ldflags_linker@"
    else
        extra_ldflags="$ldflags @vpr_extra_ldflags_compiler@"
    fi

    echo $extra_ldflags $vpr_extra_libs $my_subsystem_libs
fi

exit 0
