# make sure build defaults to all, 
# otherwise the build may start before 
# all directories are created.
default:prebuild build

# Juggler params
VJ_INCLUDES	=  -I$(VJ_BASE_DIR)/include -I./nav -I. -I$(VJ_BASE_DIR)/../
VJ_LIBS		= -B static -L$(VJ_BASE_DIR)/lib32 -L/usr/lib32 -lJuggler -B dynamic -lm -lC

VJ_COMPILE_OPTS = -DHAVE_CONFIG_H -ptv -woff 3322 -w2 -g -gslim
VJ_LINK_OPTS = -ptv  -woff 3322 -w2

# defines the locations for the various sound APIs
include Makefile.locations

# Normal definitions
SHELL = sh
CXX_COMPILE = CC
INCLUDE_PATHS =  -I. -I../src -I../../samples/pfNav $(VJ_INCLUDES) $(ADDITIONAL_INCLUDES)
LIB_PATHS = -L.
XLIBS = -lXmu -lXext -lX11
LIBS = $(ADDITIONAL_LIBS) $(VJ_LIBS) -lm -lC
CXX_COMPILE = CC
CXX_FLAGS = -n32 -mips3 -c -DHAVE_SLEEP -DHAVE_USLEEP $(VJ_COMPILE_OPTS)
EXE_LINKER = CC
EXE_FLAGS = -n32 -mips3 $(VJ_LINK_OPTS)
SO_LINKER = CC
SO_FLAGS = -shared -KPIC -all
DEFS = -DUNIX
WARNINGS_FLAGS = -woff 3303,1001
OUTPUT_OBJ_FLAG = -o $@
OBJ_FILE_SUFFIX = o
FILENAME = $(PROJECT_NAME)
OUTPUT_FILE = -o $(FILENAME)
LIB_FILENAME = lib$(PROJECT_NAME).so
OUTPUT_LIB = -o $(LIB_FILENAME)

# add a directory prefix to each source file
OBJS := ${addprefix ${OBJDIR}/,$(SRCS)}

# change each source file extension to the correct object file extension
OBJS := ${OBJS:.c=.${OBJ_FILE_SUFFIX}}
OBJS := ${OBJS:.C=.${OBJ_FILE_SUFFIX}}
OBJS := ${OBJS:.cpp=.${OBJ_FILE_SUFFIX}}
OBJS := ${OBJS:.cxx=.${OBJ_FILE_SUFFIX}}
OBJS := ${OBJS:.c++=.${OBJ_FILE_SUFFIX}}

# create a list of .d files (dependency Makefiles)
# one for each source.
DEPEND_FILES := ${SRCS:.cxx=.d}
DEPEND_FILES := ${DEPEND_FILES:.cpp=.d}
DEPEND_FILES := ${DEPEND_FILES:.c++=.d}
DEPEND_FILES := ${DEPEND_FILES:.c=.d}
DEPEND_FILES := ${DEPEND_FILES:.C=.d}

# Generated automatically from Makefile.rules.in by configure.
# Rules for compiling
CREATE_OBJ_FILE_COMMAND = $(CXX_COMPILE) $(CXX_FLAGS) $(DEFS) $(WARNINGS_FLAGS) $(INCLUDE_PATHS) $< $(OUTPUT_OBJ_FLAG) 

$(OBJDIR)/%.$(OBJ_FILE_SUFFIX): %.c
	$(CREATE_OBJ_FILE_COMMAND)

$(OBJDIR)/%.$(OBJ_FILE_SUFFIX): %.cxx
	$(CREATE_OBJ_FILE_COMMAND)

$(OBJDIR)/%.$(OBJ_FILE_SUFFIX): %.c++
	$(CREATE_OBJ_FILE_COMMAND)

$(OBJDIR)/%.$(OBJ_FILE_SUFFIX): %.C
	$(CREATE_OBJ_FILE_COMMAND)

$(OBJDIR)/%.$(OBJ_FILE_SUFFIX): %.cpp
	$(CREATE_OBJ_FILE_COMMAND)

$(OBJDIR)/%.$(OBJ_FILE_SUFFIX): %.C
	$(CREATE_OBJ_FILE_COMMAND)

# Search path for source code and object files.
vpath
vpath %.c .
vpath %.C .
vpath %.cpp .
vpath %.cxx .
vpath %.c++ .
vpath %.${OBJ_FILE_SUFFIX} ${OBJDIR}


# Remove the compiled stuff from the system
clean: cleandepend
	-@echo ""
	-@echo "-------------------------------------------"
	-@echo "Removing compiled stuff from the system	 "
	-@echo "-------------------------------------------"
	-rm -r $(OBJS) $(FILENAME) $(OBJDIR) *.ncb *.opt *.plg Debug/ Release/

clobber: clean cleandepend
	-@echo ""
	-@echo "-------------------------------------------"
	-@echo "Removing autoconf generated stuff from the system	 "
	-@echo "-------------------------------------------"
#	-rm configure config.cache config.log config.status VARS.pl
#	-rm Makefile.defs
#	-rm Makefile.rules
#	-rm Makefile
#	-rm */Makefile

depend: $(DEPEND_FILES)
	-@echo "-------------------------------------------"
	-@echo "Created the dependency Makefiles (.d)      "
	-@echo "-------------------------------------------"
	-@echo ""


# set up build rules for the dependency Makefiles.
DEP_GEN_FLAG = -M
DEPENDFLAGS = ${INCLUDE_PATHS}
DEPEND_EXTRAS = ${INCLUDE_PATHS}


cleandepend:
	-@echo ""
	-@echo "-------------------------------------------"
	-@echo "Removing dependency files (.d's)	 "
	-@echo "-------------------------------------------"
	-rm -f *.d
