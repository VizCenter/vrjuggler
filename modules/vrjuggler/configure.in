# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2002 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Base configure.in for VR Juggler.
# -----------------------------------------------------------------------------
# This file is "compiled" by GNU autoconf to generate the configure script
# that is actually run.
# -----------------------------------------------------------------------------

AC_REVISION($Revision$)
AC_INIT(vrj/vrjConfig.h)
AC_CONFIG_AUX_DIR(../../share/config)
AC_CONFIG_HEADER(vrj/vrjDefines.h)
DPP_PREREQ([1.5.1])
DPP_INIT

# Generate the reconfig script first so that it's easy to run configure again
# if it fails later on.
DPP_GEN_RECONFIG

# -----------------------------------------------------------------------------
# Command-line arguments (--enable-option, --with-pkg=package_name).
# -----------------------------------------------------------------------------

# ------------------------------------------------------ #
# --enable-feature[=arg] and --disable-feature arguments #
# ------------------------------------------------------ #

DPP_STD_CPP(yes)

# Enable compilation of the OpenGL API.  Possible values are "yes" or "no".
# "yes" is set with --enable-gl-api and "no" is set with --disable-gl-api.
# The default is "yes".
AC_ARG_ENABLE(gl-api,
              [  --enable-gl-api         Use OpenGL API                  [default=yes]],
              _enable_gl_api="$enableval", _enable_gl_api='yes')

# Enable compilation of the Performer API.  Possible values are "yes" or "no".
# "yes" is set with --enable-pf-api and "no" is set with --disable-pf-api.
# The default is "yes".
AC_ARG_ENABLE(pf-api,
              [  --enable-pf-api         Use Perfromer API               [default=yes]],
              _enable_pf_api="$enableval", _enable_pf_api='yes')

# Enable compilation of the OpenScenegraph API.  Possible values are "yes" or
# "no".  "yes" is set with --enable-osg-api and "no" is set with
# --disable-osg-api.
# The default is "yes".
AC_ARG_ENABLE(osg-api,
              [  --enable-osg-api        Use OpenScenegraph API          [default=yes]],
              _enable_osg_api="$enableval", _enable_osg_api='yes')

# -------------------------------------------- #
# --with-pkg[=arg] and --without-pkg arguments #
# -------------------------------------------- #

# Force the use of GCC as the compiler.
# NOTE: This is not fully implemented yet for any platform, but it is partially
# usable on Windows.
DPP_WITH_GCC(no)

# Define the binary format.
DPP_ABI_SETUP

# -----------------------------------------------------------------------------
# System-dependent stuff.
# -----------------------------------------------------------------------------
DPP_WIN32_SETUP

# We use AC_CANONICAL SYSTEM so that we can find out information about the
# build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM
DPP_SYSTEM_SETUP

# Depending on the target operating system, set various command options and
# such.
case $target_os in
    # SGI running IRIX 6.*.
    irix6*)
        if test "x$USE_GCC" != "xyes" ; then
            DBG_FLAGS="$DBG_FLAGS -gslim"
        fi

        AC_DEFINE(_BSD_TYPES,)
        ;;
    # HP PA-RISC machine running HP-UX 10.20.
    hpux10.20)
        AC_DEFINE(VJ_HPUX_VERSION, 10)
        ;;
    # HP PA-RISC machine running HP-UX 11.x.
    hpux11*)
        AC_DEFINE(VJ_HPUX_VERSION, 11)
        ;;
    darwin1.*)
        AC_DEFINE(_BSD_TYPES,) 
        ;;
esac

# -----------------------------------------------------------------------------
# Path setup.
# -----------------------------------------------------------------------------

# $srcdir is the root directory of the juggler source tree.  To get a value for
# $VJROOT_ABS, we cd there and save the value of running pwd.  Then return to
# the directory where configure is being run ($topdir).
cd "$srcdir"
VJROOT_ABS=`pwd`
cd "$VJROOT_ABS/../.."
UNIX_JUGGLERROOT_ABS=`pwd`
cd "$topdir"

if test "x$CYGPATH" != "xno" ; then
   JUGGLERROOT_ABS=`cygpath -w "$UNIX_JUGGLERROOT_ABS" | sed -e 's/\\\\/\\//g'`
else
   JUGGLERROOT_ABS="$UNIX_JUGGLERROOT_ABS"
fi

# -----------------------------------------------------------------------------
# Checks for programs.
# -----------------------------------------------------------------------------
VJ_COMPILER_SETUP
VJ_PROG_CC_PROF_FLAG(yes)
VJ_PROG_CXX_PROF_FLAG(yes)

# Ensure that the C++ compiler we've found is capable of compiling the newer
# newer C++ features that we need.
DPP_CXX_NAMESPACE(AC_MSG_ERROR(*** The library requires C++ namesapce support ***))
DPP_CXX_HAVE_STD
DPP_CXX_INLINE(AC_MSG_ERROR(*** The library requires C++ inline support ***))
DPP_CXX_RTTI(AC_MSG_ERROR(*** The library requires C++ RTTI support ***))
DPP_CXX_STATIC_CAST(AC_MSG_ERROR(*** The library requires C++ static_cast<> ***))
DPP_CXX_DYNAMIC_CAST(AC_MSG_ERROR(*** The library requires C++ dynamic_cast<> ***))

# Check for the JDK
DPP_PATH_JAVA

# If there is still no value in $JAVAC, then warn that VRJConfig will not be
# built
BUILD_JAVA='Y'
if test "x$JAVAC" = "xno" ; then
    AC_MSG_WARN([*** VRJConfig requires javac -- it will not be built ***])
    BUILD_JAVA='N'
fi

# Make sure ant is available to build the java sources
if test "x$BUILD_JAVA" = "xY"; then
   ANT_HOME=$UNIX_JUGGLERROOT_ABS/external/ant
   AC_PATH_PROG([ANT], [ant], [no], [${ANT_HOME}/bin])
   if test "x$ANT" == "xno"; then
      AC_MSG_WARN([*** VRJConfig requires ant to build the java sources -- it will not be built ***])
      BUILD_JAVA='N'
   else
      ANT="JAVA_HOME=$JDK_HOME $ANT"
   fi
fi

# Ensure that a version of Perl greater than or equal to 5.004 is available.
DPP_PERL_VER(5.004, , , [AC_MSG_ERROR([*** Perl is required ***])])
AC_CHECK_PROG([MTREE_CMD], [mtree], [mtree], [\$(PERL) \$(scriptdir)/mtree.pl])
DPP_BASIC_PROGS($PLATFORM, $OS_TYPE)
DPP_PROG_INSTALL

# -----------------------------------------------------------------------------
# Checks for libraries.
# -----------------------------------------------------------------------------
VPR_PATH([0.15.0], , [AC_MSG_ERROR(*** VPR required for VR Juggler ***)])
VPR_SUBSYSTEM=`$VPR_CONFIG --subsystem`
JCCL_PATH_CXX([0.9.0], ,
              [AC_MSG_ERROR(*** JCCL C++ API required for VR Juggler ***)])
GADGETEER_PATH([0.2.3], ,
               [AC_MSG_ERROR(*** Gadgeteer required for VR Juggler ***)])
SNX_PATH([0.0.3], [vrj_sonix_config='sonix-config'],
         [AC_MSG_ERROR(*** Sonix required for VR Juggler ***)])

if test "x$BUILD_JAVA" = "xY" ; then
   TWEEK_PATH_JAVA([0.10.0],
                   [JCCL_PATH_JAVA([0.9.0], ,
                       [AC_MSG_WARN([*** JCCL Java API required for VRJConfig ***])
                       BUILD_JAVA='N'])],
                   [AC_MSG_WARN(*** Tweek Java API required for VRJConfig ***)
                    BUILD_JAVA='N'])
fi

vjsave_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $STDFLAGS"
GMTL_PATH(0.1.9, [$JUGGLERROOT_ABS/external/GMTL],
          [$JUGGLERROOT_ABS/external/GMTL], ,
          [AC_MSG_ERROR([*** GMTL required for VR Juggler ***])])
CPPFLAGS="$vjsave_CPPFLAGS"

# If we are not using GMTL from the external directory, we have a locally
# installed copy.
if test "x$GMTL_ROOT" != "x$JUGGLERROOT_ABS/external/GMTL" ; then
    LOCAL_GMTL='Y'
fi

# ------------
# OpenGL API.
# ------------
OPENGL_API=''			# 'Y' then we are using OpenGL

# Test for the OpenGL library if the OpenGL API was enabled.
if test "x${_enable_gl_api}" = "xyes" ; then
    DPP_HAVE_OPENGL(/usr, no,
        [ OPENGL_API='Y' ;
          AC_DEFINE(VJ_API_OPENGL,) ],
        [AC_MSG_ERROR(*** OpenGL API will not be used (GL files not found) ***)])
fi

# --------------------
# IRIS Performer API.
# --------------------
PERFORMER_API=''		# 'Y' then we are using Performer

# Test for the Performer library if the Performer API was enabled.
if test "x${_enable_pf_api}" = "xyes" ; then
    DPP_HAVE_PERFORMER(/usr, 2.4,
        [ PERFORMER_API='Y' ;
          AC_DEFINE(VJ_API_PERFORMER,) ],
        [AC_MSG_WARN(*** Performer API will not be used (files not found) ***)])
fi

# --------------------
# OpenScenegraph API.
# --------------------
OSG_API=''		# 'Y' then we are using OpenScenegraph

# Test for the OpenScenegraph library if the OpenScenegraph API was enabled.
if test "x${_enable_osg_api}" = "xyes" ; then
    # Define the root directory for the OpenScenegraph installation.
    AC_ARG_WITH(osgroot,
                [  --with-osgroot=<PATH>   OpenScenegraph installation
                          directory                       [default=\$OSGHOME
                                                           then /usr]],
                OSGROOT="$withval", OSGROOT="${OSGHOME-/usr}")

    _vjsave_CFLAGS="$CFLAGS"
    _vjsave_CPPFLAGS="$CPPFLAGS"
    _vjsave_INCLUDES="$INCLUDES"
    _vjsave_LDFLAGS="$LDFLAGS"
    _vjsave_LIBS="$LIBS"

    # Ensure that /usr/include and /usr/lib are not included multiple times
    # if $OSGROOT is "/usr".
    if test "x$OSGROOT" != "x/usr" ; then
        CPPFLAGS="-I$OSGROOT/include $CPPFLAGS"
        INCLUDES="-I$OSGROOT/include $INCLUDES"
        LDFLAGS="-L$OSGROOT/lib $LDFLAGS"
    fi

    CFLAGS="$CFLAGS $INCLUDES ${_EXTRA_FLAGS}"
    LDFLAGS="$LDFLAGS $X_LDFLAGS"

    vj_have_osg='no'

    DPP_LANG_SAVE
    DPP_LANG_CPLUSPLUS

    _vjsave_CPPFLAGS="$CPPFLAGS"
    CPPFLAGS="$CPPFLAGS $STDFLAGS"

    AC_CHECK_LIB([osg], [osgGetVersion],
        [AC_CHECK_HEADER([osg/Vec3], [vj_have_osg='yes'], [vj_have_osg='no'])],
        [vj_have_osg='no'], [-lX11 -lXext])

    CPPFLAGS="${_vjsave_CPPFLAGS}"

    DPP_LANG_RESTORE

    if test "x$vj_have_osg" = "xyes" ; then
        OSG_API='Y'
        AC_DEFINE(VJ_API_OPENSCENEGRAPH,)
    else
        OSG_API='N'
        OSGROOT='$(OSGHOME)'
    fi

    OSG_INCLUDES="-I$OSGROOT/include"

    if test "x$OS_TYPE" = "xWin32" ; then
        OSG_LDFLAGS="/libpath:$OSGROOT/lib"
        LIBOSG='osg.lib osgGLUT.lib osgUtil.lib osgDB.lib'
    else
        OSG_LDFLAGS="-L$OSGROOT/lib"
        LIBOSG='-losg -losgGLUT -losgUtil -losgDB'
    fi

    CFLAGS="${_vjsave_CFLAGS}"
    CPPFLAGS="${_vjsave_CPPFLAGS}"
    INCLUDES="${_vjsave_INCLUDES}"
    LDFLAGS="${_vjsave_LDFLAGS}"
    LIBS="${_vjsave_LIBS}"
fi

# -----------------------------------------------------------------------------
# Checks for header files.
# -----------------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(strings.h sys/time.h unistd.h)

DPP_LANG_SAVE
DPP_LANG_CPLUSPLUS
AC_CHECK_HEADERS([ext/functional])
DPP_LANG_RESTORE

# -----------------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
# -----------------------------------------------------------------------------
AC_TYPE_SIZE_T

# -----------------------------------------------------------------------------
# Miscellaneous checks.
# -----------------------------------------------------------------------------
DPP_INSTALLER(vrjuggler, 0644, 0755, 0755)

# -----------------------------------------------------------------------------
# Finalize substitution settings.
# -----------------------------------------------------------------------------

# Add these C++ options when compiling with G++.
if test "x$GXX" = "xyes" ; then
#    CXXFLAGS="-fhonor-std -Wall -Werror-implicit-function-declaration $CXXFLAGS"
    CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"
fi

CXXFLAGS="$CXXFLAGS $VPR_CXXFLAGS_MIN $JCCL_CXXFLAGS_MIN $GADGET_CXXFLAGS_MIN $SNX_CXXFLAGS $GMTL_INCLUDES"
EXTRA_LINK_FLAGS="$STDFLAGS $EXTRA_LINK_FLAGS"
DEPEND_FLAGS="$VPR_INCLUDES_MIN $JCCL_INCLUDES_MIN $GADGET_INCLUDES_MIN $SNX_INCLUDES_MIN $GMTL_INCLUDES"
vrj_cxxflags="$STDFLAGS"

# List the scripts vrjuggler-config will call to get flags.  This should be
# in the order used for linking.  That means the dependencies are satisfied
# right to left.
vrj_dep_scripts="$vrj_sonix_config gadgeteer-config jccl-config vpr-config"

# Compiler-specific settings when GCC is not being used.
if test "x$USE_GCC" != "xyes" ; then
   if test "x$PLATFORM" = "xIRIX" ; then
      CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
      CXXFLAGS="$CXXFLAGS -woff 1388,3322 -w2"
      EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -J4 -all"
   elif test "x$OS_TYPE" = "xWin32" ; then
      vc_cxxflags='/W3 /GR /GX /EHc /QIfdiv /QI0f'
      CFLAGS="$CFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
      CXXFLAGS="$CXXFLAGS $vc_cxxflags"
      EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS /nologo /incremental:no"
      DBG_FLAGS="$DBG_FLAGS /MDd"
      OPT_FLAGS="$OPT_FLAGS /MD"
      vrj_cxxflags="$vc_cxxflags $vrj_cxxflags"
   fi
fi

if test "x$LOCAL_GMTL" = "xY" ; then
   INCLUDES="$INCLUDES $GMTL_INCLUDES"
   vrj_cxxflags="$vrj_cxxflags $GMTL_INCLUDES"
fi

if test "x$x_includes" != "xNONE" -a "x$x_includes" != "x" ; then
   INCLUDES="$INCLUDES -I$x_includes"
   vrj_cxxflags="$vrj_cxxflags -I$x_includes"
fi

if test "x$OGL_INCLUDES" != "x" ; then
   INCLUDES="$INCLUDES $OGL_INCLUDES"
   vrj_cxxflags="$vrj_cxxflags $OGL_INCLUDES"
fi

if test "x$PF_INCLUDES" != "x" ; then
   INCLUDES="$INCLUDES $PF_INCLUDES"
   vrj_cxxflags="$vrj_cxxflags $PF_INCLUDES"
fi

if test "x$OSG_INCLUDES" != "x" -a "x$OSG_API" = "xY" ; then
   INCLUDES="$INCLUDES $OSG_INCLUDES"
   vrj_cxxflags="$vrj_cxxflags $OSG_INCLUDES"
fi

# For makedepend(1) to work properly on HP-UX with aCC, we have to include
# these extra paths.
if test "x$PLATFORM" = "xHP" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
    DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

VJ_APP_CXXFLAGS='$(VRJ_CXX_FLAGS)'
VJ_APP_EXTRA_LIBS='$(VRJ_EXTRA_LIBS_STATIC)'
VJ_APP_EXTRA_LIBS_INST='$(VRJ_EXTRA_LIBS)'

# Variables set in Makefiles found in the application trees.  All variables
# listed are for use only in the Makefile.in's found in that tree unless
# otherwise noted.  They are used in the following way:
#
#     * APP_EXTRA_LIBS_GL: The OpenGL libraries needed for compiling with the
#       OpenGL API.
#     * APP_EXTRA_LIBS_PF: The Performer libraries needed for compiling with
#       the Performer API.
#     * APP_EXTRA_LIBS_OSG: The OpenScenegraph libraries needed for compiling
#       with the OpenScenegraph API.

# Put together the basic information needed to compile VR Juggler applications.
VJ_APP_COMPILER($CC, $CFLAGS, $CXX, $VJ_APP_CXXFLAGS, $DBG_FLAGS, $OPT_FLAGS,
                VJ_BASE_DIR, $DEFS, , ${_EXTRA_FLAGS})
VJ_APP_LINKER_DOOZER(["$CXX"], ["$EXTRA_LINK_FLAGS"], ["$LDOPTS_DBG"],
                     ["$LDOPTS_OPT"], ['$(VRJ_LIBS_MIN)'],
                     ["$VJ_APP_EXTRA_LIBS"])

APP_BASE_DIR='$(topdir)/instlinks'
APP_BASE_DIR_INST='$(VJ_BASE_DIR)'

if test "$OS_TYPE" = "UNIX" ; then
    REQ_EXTRA_LIBS="$LDFLAGS $GADGET_LIBS_CC_MIN $JCCL_LIBS_CC_MIN $JCCL_EXTRA_LIBS_CC $LIBS -lm"
    DYLIB_DEPS_VJ="$SNX_LIBS_CC $REQ_EXTRA_LIBS"
    DYLIB_DEPS_GL="-L\$(LIBDIR) -lJuggler $OGL_LDFLAGS $LIBOPENGL $REQ_EXTRA_LIBS"
    DYLIB_DEPS_PF="-L\$(LIBDIR) -lJuggler $PF_LDFLAGS $LIBPERFORMER $REQ_EXTRA_LIBS"

    REQ_EXTRA_PROF_LIBS="$LDFLAGS $GADGET_PROF_LIBS_CC_MIN $JCCL_PROF_LIBS_CC_MIN $JCCL_EXTRA_LIBS_CC $LIBS -lm"
    DYLIB_PROF_DEPS_VJ="$SNX_PROF_LIBS_CC $REQ_EXTRA_PROF_LIBS"
    DYLIB_PROF_DEPS_GL="-L\$(LIBDIR) -lJuggler_p $OGL_LDFLAGS $LIBOPENGL $REQ_EXTRA_PROF_LIBS"
    DYLIB_PROF_DEPS_PF="-L\$(LIBDIR) -lJuggler_p $PF_LDFLAGS $LIBPERFORMER $REQ_EXTRA_PROF_LIBS"

    APP_EXTRA_LIBS_X11="$X_LDFLAGS -lX11 -lXext"

    if test "x$OGL_LDFLAGS" != "x" ; then
        if test "x$PLATFORM" = "xDarwin" ; then
            osx_frameworks='-framework AGL -framework Carbon -framework ApplicationServices'
            APP_EXTRA_LIBS_GL="$OGL_LDFLAGS $osx_frameworks"
            DYLIB_DEPS_GL="$DYLIB_DEPS_GL $osx_frameworks"
        else
            APP_EXTRA_LIBS_GL="-L$OGLROOT/lib$LIBBITSUF $LIBOPENGL"
        fi
    else
        APP_EXTRA_LIBS_GL="$LIBOPENGL"
    fi

    if test "x$PF_LDFLAGS" != "x" ; then
        APP_EXTRA_LIBS_PF="-L$PFROOT/lib$LIBBITSUF $LIBPERFORMER"
    else
        APP_EXTRA_LIBS_PF="$LIBPERFORMER"
    fi

    if test "x$OSG_LDFLAGS" != "x" ; then
        APP_EXTRA_LIBS_OSG="-L$OSGROOT/lib $LIBOSG"
    else
        APP_EXTRA_LIBS_OSG="$LIBOSG"
    fi
elif test "$OS_TYPE" = "Win32" ; then
    REQ_EXTRA_LIBS="$LDFLAGS $GADGET_LIBS_LD_MIN $SNX_LIBS_LD $JCCL_LIBS_LD_MIN $JCCL_EXTRA_LIBS_LD $LIBS"
    BASIC_WIN32_LIBS='comctl32.lib user32.lib gdi32.lib ws2_32.lib'
    DYLIB_DEPS_BASIC="$REQ_EXTRA_LIBS $BASIC_WIN32_LIBS"
    DYLIB_DEPS_VJ="/libpath:\$(LIBDIR) $DYLIB_DEPS_BASIC"
    DYLIB_DEPS_GL="/libpath:\$(LIBDIR) Juggler.lib $DYLIB_DEPS_BASIC $OGL_LDFLAGS $LIBOPENGL"
    DYLIB_PROF_DEPS_VJ="$DYLIB_DEPS_VJ"
    DYLIB_PROF_DEPS_GL="$DYLIB_DEPS_GL"

    APP_EXTRA_LIBS_GL="$OGL_LDFLAGS $LIBOPENGL"
    APP_EXTRA_LIBS_PF="$PF_LDFLAGS $LIBPERFORMER"
    APP_EXTRA_LIBS_OSG="$OSG_LDFLAGS $LIBOSG"
fi

# Define the base path to the source directory using $(VJROOT_ABS) as an
# alternative to using $(srcdir).
UNIX_VJROOT_ABS="$VJROOT_ABS"

# Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
    VJROOT_ABS=`dospath -p "$VJROOT_ABS"`
    JUGGLERROOT_ABS=`dospath -p "$JUGGLERROOT_ABS"`

    DEPEND_EXTRAS=`dospath "$DEPEND_EXTRAS"`
    INCLUDES=`dospath "$INCLUDES"`
    LIBS=`dospath "$LIBS"`
    LN_S='cp -r'
    RM_LN='rm -rf'
    MTREE_CMD=`dospath "$MTREE_CMD"`

    JDK_HOME=`dospath -p "$JDK_HOME"`

#    APP_EXTRA_LIBS=`dospath "$APP_EXTRA_LIBS"`
    APP_EXTRA_LIBS_GL=`dospath "$APP_EXTRA_LIBS_GL"`
    APP_EXTRA_LIBS_PF=`dospath "$APP_EXTRA_LIBS_PF"`
    APP_EXTRA_LIBS_OSG=`dospath "$APP_EXTRA_LIBS_OSG"`
else
    RM_LN='rm -f'
    VJROOT_ABS="$VJROOT_ABS"
    JUGGLERROOT_ABS="$JUGGLERROOT_ABS"
fi

# Set up some sed expressions that will help separate the share directory from
# the full installation prefix.
if test "x$prefix" = "xNONE" ; then
    _prefix_exp="s|^$ac_default_prefix/||"
else
    _prefix_exp="s|^$prefix/||"
fi

# Make a best-effort attempt to extract the actual share directory from the
# full installation prefix.  This is not foolproof, but it will work in almost
# all cases.  A person would have to be doing something malicious or foolish
# to make it break.
VJ_SHARE_DIR=`echo "$datadir/vrjuggler" | sed -e 's|^${prefix}/||'`
VJ_SHARE_DIR=`echo "$VJ_SHARE_DIR" | sed -e "${_prefix_exp}"`

# Information needed to generate vrjuggler-config.
# $vrj_extra_libs only lists the external (non-Juggler) libraries needed by
# VR Juggler.
case $OS_TYPE in
    UNIX)
        vrj_ldflags_compiler="-L\$prefix/lib\$LIBBITSUF"
        vrj_ldflags_linker="$vrj_ldflags_compiler"
        vrj_libs='-lJuggler -lJuggler_ogl'
        vrj_prof_libs='-lJuggler_p -lJuggler_ogl_p'
        vrj_extra_libs="$LDFLAGS $APP_EXTRA_LIBS_GL $APP_EXTRA_LIBS_X11 $LIBS"

        Juggler_lib='-lJuggler'
        Juggler_prof_lib='-lJuggler_p'
        Juggler_ogl_lib='-lJuggler_ogl'
        Juggler_ogl_prof_lib='-lJuggler_ogl_p'

        if test "x$PERFORMER_API" = "xY" ; then
            Juggler_pf_lib='-lJuggler_pf'
            Juggler_pf_prof_lib='-lJuggler_pf_p'
            Juggler_pf_extra_libs="$APP_EXTRA_LIBS_PF"
        fi

        # XXX: Ideally, -lm would not be added "manually" like this.
        Juggler_extra_libs="$LDFLAGS $APP_EXTRA_LIBS_X11 $LIBS -lm"
        Juggler_ogl_extra_libs="$APP_EXTRA_LIBS_GL"
        ;;
    Win32)
        vrj_ldflags_compiler="/link /libpath:\$prefix/lib/debug "
        vrj_ldflags_linker="/libpath:\$prefix/lib/debug "
        vrj_libs='Juggler.lib Juggler_ogl.lib'
        vrj_prof_libs="$vrj_libs"
        vrj_extra_libs="$LDFLAGS $APP_EXTRA_LIBS_GL $BASIC_WIN32_LIBS $LIBS"

        Juggler_lib='Juggler.lib'
        Juggler_prof_lib='Juggler.lib'
        Juggler_ogl_lib='Juggler_ogl.lib'
        Juggler_ogl_prof_lib='Juggler_ogl.lib'
        Juggler_extra_libs="$LDFLAGS $BASIC_WIN32_LIBS $LIBS"
        Juggler_ogl_extra_libs="$APP_EXTRA_LIBS_GL"
        ;;
esac

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
    vrj_n32_flags='-n32'
    vrj_64_flags='-64'
fi

vrj_extra_ldflags_compiler="$APP_EXTRA_LIBS_BEGIN"
vrj_extra_ldflags_linker="$vrj_extra_ldflags_compiler"

# -----------------------------------------------------------------------------
# Do Makefile substitutions.
# -----------------------------------------------------------------------------

VJ_VERSION_GROK(VERSION)

DPP_SUBST

AC_SUBST(topdir)
AC_SUBST(UNIX_VJROOT_ABS)
AC_SUBST(UNIX_JUGGLERROOT_ABS)
AC_SUBST(VJROOT_ABS)
AC_SUBST(JUGGLERROOT_ABS)
AC_SUBST(VJ_SHARE_DIR)

AC_SUBST(RM_LN)
AC_SUBST(EXTRA_LINK_FLAGS)
AC_SUBST(VPR_SUBSYSTEM)

AC_SUBST(BUILD_JAVA)

AC_SUBST(OPENGL_API)
AC_SUBST(PERFORMER_API)
AC_SUBST(OSGROOT)
AC_SUBST(OSG_API)
AC_SUBST(OSG_INCLUDES)

AC_SUBST(APP_BASE_DIR)
AC_SUBST(APP_BASE_DIR_INST)

AC_SUBST(DYLIB_DEPS_VJ)
AC_SUBST(DYLIB_DEPS_GL)
AC_SUBST(DYLIB_DEPS_PF)
AC_SUBST(DYLIB_PROF_DEPS_VJ)
AC_SUBST(DYLIB_PROF_DEPS_GL)
AC_SUBST(DYLIB_PROF_DEPS_PF)

AC_SUBST(VJ_APP_EXTRA_LIBS_INST)
AC_SUBST(APP_EXTRA_LIBS_OSG)

AC_SUBST(vrj_dep_scripts)
AC_SUBST(vrj_cxxflags)
AC_SUBST(vrj_extra_cxxflags)
AC_SUBST(vrj_ldflags_compiler)
AC_SUBST(vrj_ldflags_linker)
AC_SUBST(vrj_libs)
AC_SUBST(vrj_prof_libs)
AC_SUBST(vrj_extra_ldflags_compiler)
AC_SUBST(vrj_extra_ldflags_linker)
AC_SUBST(vrj_extra_libs)
AC_SUBST(vrj_n32_flags)
AC_SUBST(vrj_64_flags)

AC_SUBST(Juggler_lib)
AC_SUBST(Juggler_ogl_lib)
AC_SUBST(Juggler_pf_lib)
AC_SUBST(Juggler_prof_lib)
AC_SUBST(Juggler_ogl_prof_lib)
AC_SUBST(Juggler_pf_prof_lib)
AC_SUBST(Juggler_extra_libs)
AC_SUBST(Juggler_ogl_extra_libs)
AC_SUBST(Juggler_pf_extra_libs)

# -----------------------------------------------------------------------------
# Final file generation step.
# -----------------------------------------------------------------------------

VJ_MTREE_LIB_GEN(VJ, mtree, $PLATFORM, $ISA)

AC_OUTPUT(vrjuggler-config
          Makefile
          Makefile.inc
          common.defs.mk
          make.defs.mk
          vrj/Makefile
          vrj/Display/Makefile
          vrj/Draw/Makefile
          vrj/Draw/OGL/Makefile
          vrj/Draw/OSG/Makefile
          vrj/Draw/OpenSG/Makefile
          vrj/Draw/Pf/Makefile
          vrj/Kernel/Makefile
          vrj/Sound/Makefile
          vrj/Sound/pf/Makefile
          vrj/Util/Makefile
          vrj.appdefs.mk
          vrjconfig/build.xml
          vrjconfig/Makefile
          vrjconfig/Makefile.inc
          samples/Makefile
          samples/OGL/Makefile
          samples/OGL/advanced/Makefile
          samples/OGL/advanced/glove/Makefile
          samples/OGL/simple/Makefile
          samples/OGL/simple/MPApp/Makefile
          samples/OGL/simple/SimpleApp/Makefile
          samples/OGL/simple/contextApp/Makefile
          samples/OGL/simple/simpleInput/Makefile
          samples/OSG/Makefile
          samples/OSG/simple/Makefile
          samples/OSG/simple/osgNav/Makefile
          samples/OpenSG/Makefile
          samples/OpenSG/simple/Makefile
          samples/OpenSG/simple/OpenSGNav/Makefile
          samples/Pf/Makefile
          samples/Pf/advanced/Makefile
          samples/Pf/advanced/pfConfigNav/Makefile
          samples/Pf/advanced/pfNav/Makefile
          samples/Pf/simple/Makefile
          samples/Pf/simple/simplePf/Makefile
          samples/sound/Makefile
          samples/sound/simple/Makefile
          samples/sound/simple/sonix/Makefile
          samples/sound/simple/soundManager/Makefile
          test/Makefile 
          test/Draw/Makefile
          test/Draw/OGL/Makefile
          test/Draw/OGL/analog/Makefile
          test/Draw/OGL/combo/Makefile
          test/Draw/OGL/cubes/Makefile
          test/Draw/OGL/digitalGlove/Makefile
          test/Draw/OGL/simpleGlove/Makefile
          test/Draw/OGL/texture/Makefile
          test/Draw/OGL/torus/Makefile
          test/Draw/OGL/wand/Makefile
          test/RTRC/Makefile
          test/TestSuite/Makefile
          test/TestSuite/test.defs.mk
          test/TestSuite/TestCases/Makefile
          test/TestSuite/TestCases/Pf/Makefile
          tools/Makefile
          mtree/VJ.data.dist
          mtree/VJ.include.dist
          mtree/VJ.install.dist
          mtree/VJ.samples.dist
          mtree/VJ.test.dist
          mtree/VJ.tools.dist
          VARS.pl,
    [chmod a+x vrjuggler-config])

cat <<BUILD_INFO

 Remember that you need to build Juggler with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the Juggler distribution.

BUILD_INFO
