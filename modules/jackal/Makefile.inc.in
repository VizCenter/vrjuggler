# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2003 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Specialized include file for the top-level makefile.  Targets and variables
# needed for building the whole source tree are provided here.  This file
# should only be included by the top-level makefile.  It is written in such a
# way that no assumptions are made by this file about what the including file
# provides except that it includes make.defs.mk.
#
# Generated for use on @PLATFORM@
# -----------------------------------------------------------------------------

# Variables whose values are specific to this file.
includedir=	@includedir@
instlinks=	$(topdir)/instlinks
srcdir=		@srcdir@
top_srcdir=	@top_srcdir@

# Extra compiler and linker options needed only by this file.
DBG_FLAGS=	-D_DEBUG @DBG_FLAGS@
OPT_FLAGS=	-D_OPT -DNDEBUG @OPT_FLAGS@

HAVE_TWEEK_CXX=	@HAVE_TWEEK_CXX@

BUILD_JAVA=	@BUILD_JAVA@
JDOM_JAR=	@JDOM_JAR@

# =============================================================================
# Build and installation directory naming and ownership information.
# =============================================================================
DEFAULT_DIR=	$(OPT_DIR)

# If we have a name for the install group, define group-setting options for
# UNIX commands (chown(1), chgrp(1)) and for local Perl scripts
# (makefiles-gen.pl in particular).
ifdef GROUP_NAME
    _GROUP_OPT_PL=	--gname="$(GROUP_NAME)"
endif

# --------------------------------------------
# Library build information.
# --------------------------------------------

SHLIB_MAJOR=	@MAJOR_VERSION@
SHLIB_MINOR=	@MINOR_VERSION@
SHLIB_MICRO=	@MICRO_VERSION@

# We do not do version numbering for dynamic libraries on Win32.
ifneq (@OS_TYPE@, Win32)
DYNAMICLIB_VER=	.$(SHLIB_MAJOR).$(SHLIB_MINOR).$(SHLIB_MICRO)
# But we will name the static libraries differently than the dynamic libraries.
else
STATIC_SUFFIX=	_s
endif

# Add extra linking options on Darwin/OS X.
ifeq (@PLATFORM@, Darwin)
LDOPTS+=	-compatibility_version $(SHLIB_MAJOR).$(SHLIB_MINOR)
LDOPTS+=	-current_version $(SHLIB_MAJOR).$(SHLIB_MINOR).$(SHLIB_MICRO)
LDOPTS+=	-flat_namespace
endif

STATICLIB_EXT=	@STATICLIB_EXT@
DYNAMICLIB_EXT=	@DYNAMICLIB_EXT@

# Full list of the libraries to build.
LIBS=		$(JCCL_LIBRARY)
STATIC_LIBS=	$(LIBS)
DYNAMIC_LIBS=	$(LIBS)

# Dependencies for each of the various dynamic libraries we build.
DYLIB_DEPS_JCCL=	@DYLIB_DEPS_JCCL@
DYLIB_PROF_DEPS_JCCL=	@DYLIB_PROF_DEPS_JCCL@
JCCL_LIB_STATIC=	$(JCCL_LIBRARY)$(STATIC_SUFFIX).$(STATICLIB_EXT)
JCCL_LIB_DYNAMIC=	$(JCCL_LIBRARY).$(DYNAMICLIB_EXT)
JCCL_PROF_LIB_STATIC=	$(JCCL_LIBRARY)$(PROFLIB_EXT)$(STATIC_SUFFIX).$(STATICLIB_EXT)
JCCL_PROF_LIB_DYNAMIC=	$(JCCL_LIBRARY)$(PROFLIB_EXT).$(DYNAMICLIB_EXT)

# Version information.
PARAM_HEADER=	common/jccl/jcclParam.h
BRANCH=		HEAD
CANON_NAME=	Bride of Chucky
VER_ARGS=	-f $(JCCLROOT_ABS)/VERSION -s @VPR_SUBSYSTEM@		\
		-b $(BRANCH) -o $(PARAM_HEADER) -n "$(CANON_NAME)"	\
		-i $(JCCLROOT_ABS)/common/jccl/jcclParam.h.in		\
		-d "`date '+%b %e, %Y %H:%M:%S'`"

ifdef VERSION
   VER_ARGS+=	-v $(VERSION)
endif

# =============================================================================
# Library targets.
# =============================================================================

BEFOREBUILD=	beforebuild
AFTERBUILD=	afterbuild

# Things to do before the object files and library are built.
beforebuild:
	@$(MAKE) $(PARAM_HEADER)

$(PARAM_HEADER): $(JCCLROOT_ABS)/$(PARAM_HEADER).in $(JCCLROOT_ABS)/VERSION
	@$(SHELL) $(scriptdir)/make-ver.sh $(VER_ARGS)

# Things to do after the object files and library are built.
afterbuild:
	@$(MAKE) links

# -----------------------------------------------
# Construct the static version of the libraries.
# -----------------------------------------------
$(LIBDIR)/$(JCCL_LIB_STATIC) $(LIBDIR)/$(JCCL_PROF_LIB_STATIC): $(OBJDIR)/../*/*.$(OBJEXT)
	@echo BUILDDIR_BASE=$(BUILDDIR_BASE)
	@echo BUILDDIR=$(BUILDDIR)
	@echo BASE_OBJDIR=$(BASE_OBJDIR)
	@echo OBJDIR=$(OBJDIR)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(AR) $(AR_NAME_FLAG)$@ $(OBJDIR)/../*/*.$(OBJEXT)
	$(RANLIB) $@
	cd $(LIBDIR_BASE) && $(RM_LN) $(notdir $@) && $(LN_S) $@ ./
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"

# ------------------------------------------------
# Construct the dynamic version of the libraries.
# ------------------------------------------------
$(LIBDIR)/$(JCCL_LIB_DYNAMIC): $(OBJDIR)/../*/*.$(OBJEXT)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(CXX_DLL) $(LDOPTS) $(DYLIB_NAME_FLAG)				\
          $(OBJDIR)/../*/*.$(OBJEXT) $(DYLIB_DEPS_JCCL)
ifeq (@OS_TYPE@, Win32)
	cd $(LIBDIR_BASE) && cp $(LIBDIR)/* .
else
	cd $(LIBDIR_BASE) && $(RM_LN) $(notdir $@) && $(LN_S) $@ ./
endif
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"

#ifeq (@OS_TYPE@, Win32)
#	cd $(LIBDIR_BASE) && $(RM_LN) $(JCCL_LIB_STATIC) &&		\
#            $(LN_S) $(LIBDIR)/$(JCCL_LIB_STATIC) ./
#	cd $(LIBDIR_BASE) && $(RM_LN) $(JCCL_LIBRARY).exp &&			\
#            $(LN_S) $(LIBDIR)/$(JCCL_LIBRARY).exp ./
#endif

# ---------------------------------------------------------
# Construct the profiled dynamic version of the libraries.
# ---------------------------------------------------------
$(LIBDIR)/$(JCCL_PROF_LIB_DYNAMIC): $(OBJDIR)/../*/*.$(OBJEXT)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(CXX_DLL) $(LDOPTS) $(DYLIB_NAME_FLAG)				\
          $(OBJDIR)/../*/*.$(OBJEXT) $(DYLIB_PROF_DEPS_JCCL)
ifeq (@OS_TYPE@, Win32)
	cd $(LIBDIR_BASE) && cp $(LIBDIR)/* .
else
	cd $(LIBDIR_BASE) && $(RM_LN) $(notdir $@) && $(LN_S) $@ ./
endif
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"

# =============================================================================
# Make links for developer use that provide the needed functionality for
# the $JCCL_BASE_DIR environment variable to be used when needed.  $JCCL_BASE_DIR
# should be set to $(instlinks).
# =============================================================================
links:
	@echo "------------------------------------------------"
	@echo "Setting up developer installation"
	@echo "------------------------------------------------"
ifdef BUILD_TYPE
	$(MAKE) links-$(BUILD_TYPE)
else
	$(MAKE) links-dbg
endif
	@echo ""
	@echo "---------------------------------------------------------------"
	@echo 'You should now set $$JCCL_BASE_DIR to:'
	@cd $(instlinks) && echo "  `pwd`"
	@echo "---------------------------------------------------------------"

links-all:
	@$(MAKE) EXTRA_INSTALL_ARGS=-l prefix="$(instlinks)" installworld

links-dbg:
	@$(MAKE) EXTRA_INSTALL_ARGS=-l prefix="$(instlinks)" install-debug

links-opt:
	@$(MAKE) EXTRA_INSTALL_ARGS=-l prefix="$(instlinks)" install-optim

links-prof:
	@$(MAKE) EXTRA_INSTALL_ARGS=-l prefix="$(instlinks)" install-profiled

# Remove the links in $(instlinks).  We cannot do this in the global build,
# however, because it would blow away links set up by our dependencies.
clean-links:
ifndef GLOBAL_BUILD
	@echo "------------------------------------------------"
	@echo "Removing developer installation links"
	@echo "------------------------------------------------"
	rm -rf $(instlinks)
endif

# =============================================================================
# Installation targets.  The default (what is done by 'install') is to install
# the static debugging version of the libraries.  The steps taken for a full
# installation are:
#
#     1) Create the full installation directory hierarchy.
#     2) Install the libraries.
#     3) Install the header files.
#     4) Install the test programs.
#     5) Install the contents of the data directory.
#     6) Install the Java-based config editor (if possible).
# =============================================================================

BEFOREINSTALL=	beforeinstall
AFTERINSTALL=	afterinstall

# Steps to take before beginning the installation process.  This target is
# independent of the current ABI.
beforeinstall:
	@$(MAKE) hier

# Make the full directory hierarchy for the installation.
hier:
	@echo "------------------------------------------------"
	@echo "Making hierarchy"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(prefix)
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.install.dist -p $(prefix)
	$(SHELL) $(MKINSTALLDIRS) $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.data.dist -p $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.include.dist -p $(prefix)
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.lib.dist -p $(prefix)
#	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.samples.dist -p $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.test.dist -p $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.tools.dist -p $(projdatadir)

# Steps to take after the installation process is complete.  This target is
# independent of the current ABI.
afterinstall:
	@echo "==============================================================="
	@echo "Jackal installation complete"
	@echo "==============================================================="

PREINSTALL=	pre-install
POSTINSTALL=	post-install

pre-install:
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.lib.dist -p $(prefix)

# Do everything needed after installing the library binaries.
post-install:
	@$(MAKE) install-java
#	@$(MAKE) install-samples
#	@$(MAKE) install-test
	@$(MAKE) install-tools
	@$(MAKE) install-data
	@$(MAKE) install-m4
	$(INSTALL) -m $(EXEC_PERMS) $(GROUP_OPT_UNIX)			\
          $(EXTRA_INSTALL_ARGS) $(topdir)/jccl-config $(bindir)

PREINSTALL_HEADERS=	pre-install-headers
POSTINSTALL_HEADERS=	post-install-headers

pre-install-headers:
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.include.dist -p $(prefix)

post-install-headers:
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(EXTRA_INSTALL_ARGS)						\
          $(JCCLROOT_ABS)/common/jccl/jcclConfig.h $(includedir)/jccl/
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(EXTRA_INSTALL_ARGS) $(topdir)/common/jccl/jcclDefines.h	\
          $(includedir)/jccl/
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(EXTRA_INSTALL_ARGS) $(topdir)/common/jccl/jcclParam.h	\
          $(includedir)/jccl/

install-java:
	for dir in $(SUBDIR) ; do					\
            $(MAKE) -C $$dir java-install ;				\
          done

# Install the sample applications.
install-samples:
	@echo "------------------------------------------------"
	@echo "Installing sample applications"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.samples.dist -p $(projdatadir)
	$(PERL) $(scriptdir)/install-src.pl -i $(top_srcdir)/samples	\
          -m $(FILE_PERMS) $(GROUP_OPT_UNIX) -o $(projdatadir)/samples
	$(PERL) $(scriptdir)/makefiles-gen.pl				\
          --vars="$(topdir)/VARS.pl" --startdir="$(top_srcdir)/samples"	\
          --mode="$(FILE_PERMS)" $(_GROUP_OPT_PL) --srcdir="."		\
          --prefix="$(projdatadir)/samples"

# Install the test programs.
install-test:
	@echo "------------------------------------------------"
	@echo "Installing test programs"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.test.dist -p $(projdatadir)
	$(PERL) $(scriptdir)/install-src.pl -i $(top_srcdir)/test	\
          -m $(FILE_PERMS) $(GROUP_OPT_UNIX) -o $(projdatadir)/test
	$(PERL) $(scriptdir)/makefiles-gen.pl --mode="$(FILE_PERMS)"	\
          --prefix="$(projdatadir)/test" --vars="$(topdir)/VARS.pl"	\
          --startdir="$(top_srcdir)/test" $(_GROUP_OPT_PL) --srcdir="."

install-m4:
	@echo "------------------------------------------------"
	@echo "Installing Autoconf m4 macros"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(datadir)/aclocal
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(EXTRA_INSTALL_ARGS) $(JUGGLERROOT_ABS)/macros/jccl.m4	\
          $(datadir)/aclocal

# Install the user tools code.
install-tools:
	@echo "------------------------------------------------"
	@echo "Installing user tools"
	@echo "------------------------------------------------"
	$(PERL) $(scriptdir)/install-dir.pl -m $(FILE_PERMS)		\
          $(GROUP_OPT_UNIX) -i $(top_srcdir)/tools/xmlupdate		\
          -o $(projdatadir)/tools/xmlupdate -v "$(topdir)/VARS.pl"

# Install the standard data files.
install-data:
	@echo "------------------------------------------------"
	@echo "Installing standard data files"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/JCCL.data.dist -p $(projdatadir)
	$(PERL) $(scriptdir)/install-dir.pl -i $(top_srcdir)/data	\
          -m $(FILE_PERMS) $(GROUP_OPT_UNIX) -o $(projdatadir)/data	\
          -v "$(topdir)/VARS.pl"

# =============================================================================
# Clean-up targets.  '_clean' removes all the files in the build directories.  
# '_clobber' removes the $(BUILDDIR_BASE) and $(LIBDIR_NAME) directories.
# =============================================================================
CLOBBER_DIRS+=	$(BUILDDIR_BASE) $(LIBDIR_NAME)

_clobber:
	@$(MAKE) cleandepend
	@$(MAKE) clean-links

# Define $(_LOCAL_CLEAN) and $(_LOCAL_CLOBBER) to inform the shared 'clean'
# and 'clobber' targets that there is a '_clean' target and a '_clobber'
# target to be run besides the standard targets.
_LOCAL_CLOBBER=	1

EXTRA_OBJ_TARGETS=	build-java

# Make sure we build java targets serially because javac is stupid and may try
# to write to the same files at the same time while building different sources.
build-java:
ifdef NO_JAVA
	@echo "------------------------------------------------"
	@echo "Skipping Java GUI targets."
	@echo "------------------------------------------------"
else
ifeq ($(BUILD_JAVA), Y)
	$(MAKE) -j 1 RECTARGET=java recursive
endif
endif #ifdef NO_JAVA

include $(MKPATH)/dpp.libs.mk
include $(MKPATH)/dpp.clean.mk

CLEAN_FILES+=	$(PARAM_HEADER)
CLEAN_DIRS+=	$(BUILDDIR_BASE) $(LIBDIR_NAME)
CLOBBER_DIRS+=	$(BUILDDIR_BASE) $(LIBDIR_NAME)
