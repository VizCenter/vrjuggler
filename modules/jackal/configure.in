# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2002 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Base configure.in for Juggler App Control & Configuration Library (Jackal).
# -----------------------------------------------------------------------------
# This file is "compiled" by GNU autoconf to generate the configure script
# that is actually run.
# -----------------------------------------------------------------------------

AC_REVISION($Revision$)
AC_INIT(common/jccl/jcclConfig.h)
AC_CONFIG_AUX_DIR(../../share/config)
AC_CONFIG_HEADER(common/jccl/jcclDefines.h)
DPP_PREREQ(1.4.98)
DPP_INIT

# Generate the reconfig script first so that it's easy to run configure again
# if it fails later on.
DPP_GEN_RECONFIG

# -----------------------------------------------------------------------------
# Path setup.
# -----------------------------------------------------------------------------

# $srcdir is the root directory of the juggler source tree.  To get a value for
# $VJROOT_ABS, we cd there and save the value of running pwd.  Then return to
# the directory where configure is being run ($topdir).
cd "$srcdir"
JCCLROOT_ABS=`pwd`

cd "$JCCLROOT_ABS/../.."
JUGGLERROOT_ABS=`pwd`
cd "$topdir"

# -----------------------------------------------------------------------------
# Command-line arguments (--enable-option, --with-pkg=package_name).
# -----------------------------------------------------------------------------

# ------------------------------------------------------ #
# --enable-feature[=arg] and --disable-feature arguments #
# ------------------------------------------------------ #

DPP_STD_CPP(yes)

# Enable performance testing.
AC_ARG_ENABLE(performance,
              [  --enable-performance
                          Enable performance testing      [default=no]],
              _enable_perf="$enableval", _enable_perf='no')

# Enable performance-gathering code if the user requested it.
if test "x${_enable_perf}" = "xyes" ; then
    AC_DEFINE(USE_JCCL_PERF,)
fi

# -------------------------------------------- #
# --with-pkg[=arg] and --without-pkg arguments #
# -------------------------------------------- #

# Force the use of GCC as the compiler.
# NOTE: This is not fully implemented yet for any platform, but it is partially
# usable on Windows.
DPP_WITH_GCC(no)

# Define the binary format.
DPP_ABI_SETUP

AC_ARG_WITH(cppdomroot,
            [  --with-cppdomroot=<PATH>
                          CppDOM installation directory   [default=$JUGGLERROOT_ABS/external/cppdom]],
            CPPDOM_ROOT="$withval", CPPDOM_ROOT="$JUGGLERROOT_ABS/external/cppdom")

# Specify where JDOM is located
AC_ARG_WITH(jdom, [  --with-jdom=<PATH>      Path to JDOM JAR file(s) ],
            JDOM_JAR="$withval", JDOM_JAR='none')

# Specify where JUnit is located
AC_ARG_WITH(junit,
            [  --with-junit=<PATH>     Path to JUnit JAR file(s) ],
            JUNIT_JAR="$withval", JUNIT_JAR='none')

# -----------------------------------------------------------------------------
# System-dependent stuff.
# -----------------------------------------------------------------------------
DPP_WIN32_SETUP

# We use AC_CANONICAL SYSTEM so that we can find out information about the
# build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM
DPP_SYSTEM_SETUP

# Depending on the target operating system, set various command options and
# such.
case $target_os in
    # SGI running IRIX 6.*.
    irix6*)
        if test "x$USE_GCC" != "xyes" ; then
            DBG_FLAGS="$DBG_FLAGS -gslim"
        fi
        ;;
    # HP PA-RISC machine running HP-UX 10.20.
    hpux10.20|hpux11*)
        AC_DEFINE(_CMA_NOWRAPPERS_,)
        ;;
esac

# -----------------------------------------------------------------------------
# Checks for programs.
# -----------------------------------------------------------------------------
VJ_COMPILER_SETUP
VJ_PROG_CC_PROF_FLAG(yes)
VJ_PROG_CXX_PROF_FLAG(yes)

# Ensure that the C++ compiler we've found is capable of compiling the newer
# newer C++ features that we need.
DPP_CXX_NAMESPACE([AC_MSG_ERROR([*** The library requires C++ namespace support ***])])
DPP_CXX_HAVE_STD
DPP_CXX_INLINE([AC_MSG_ERROR([*** The library requires C++ inline support ***])])
DPP_CXX_RTTI([AC_MSG_ERROR([*** The library requires C++ RTTI support ***])])
DPP_CXX_STATIC_CAST([AC_MSG_ERROR([*** The library requires C++ static_cast<> ***])])
DPP_CXX_DYNAMIC_CAST([AC_MSG_ERROR([*** The library requires C++ dynamic_cast<> ***])])

# Check for the JDK.
DPP_PATH_JAVA

# If there is still no value in $JAVAC, then warn that the GUI will not be
# built.
if test "x$JAVAC" = "xno" ; then
    AC_MSG_WARN([*** VjControl requires javac -- it will not be built ***])
    BUILD_JAVA='N'
else
    # Check for JDOM.
    DPP_CHECK_JAVA_STATIC_METHOD([org.jdom.Namespace],
       [getNamespace(uri)], [String uri = new String("test")],
       [BUILD_JAVA='Y'],
       [ AC_MSG_WARN([*** JDOM required for VjControl ***])
         BUILD_JAVA='N' ],
       [$JDOM_JAR])
fi

# If we're building VjControl, we should build the test cases too.
if test "x$BUILD_JAVA" = "xY" ; then
    # Check for the JUnit library
    DPP_CHECK_JAVA_STATIC_METHOD([junit.framework.Assert],
        [assertTrue(true)], ,
        [BUILD_JAVA_TEST_SUITE='Y'],
        [ BUILD_JAVA_TEST_SUITE='N' ;
          AC_MSG_WARN(*** JUnit required for VjControl Java test suite ***)
        ],
        [$JUNIT_JAR])
fi

# Ensure that a version of Perl greater than or equal to 5.004 is available.
DPP_PERL_VER([5.004])

AC_CHECK_PROG([MTREE_CMD], [mtree], [mtree], [\$(PERL) \$(scriptdir)/mtree.pl])

DPP_BASIC_PROGS([$PLATFORM], [$OS_TYPE])

# -----------------------------------------------------------------------------
# Checks for libraries.
# -----------------------------------------------------------------------------
VPR_PATH([0.15.0], , [AC_MSG_ERROR([*** VPR required for JCCL ***])])

# -----------
# cppdom
# -----------
_vjsave_CFLAGS="$CFLAGS"
_vjsave_CPPFLAGS="$CPPFLAGS"
_vjsave_INCLUDES="$INCLUDES"
_vjsave_LDFLAGS="$LDFLAGS"

# XXX: There are problems with the use of $CPPDOM_ROOT for installed versions
# of cppdom!!!

# Ensure that /usr/include and /usr/lib are not included multiple times
# if $CPPDOM_ROOT is "/usr".
# XXX: Should be -I$CPPDOM_ROOT/include
if test "x$CPPDOM_ROOT" != "x/usr" ; then
    CPPFLAGS="$STDFLAGS -I$CPPDOM_ROOT $CPPFLAGS"
    INCLUDES="-I$CPPDOM_ROOT $INCLUDES"
    LDFLAGS="-L$CPPDOM_ROOT/lib $LDFLAGS"
fi

CXXFLAGS="$CXXFLAGS $STDFLAGS $INCLUDES ${_EXTRA_FLAGS}"

DPP_LANG_SAVE
DPP_LANG_CPLUSPLUS

# XXX: Should be $CPPDOM_ROOT/include
AC_CHECK_HEADER([cppdom/config.h],
    [cppdom_include="$CPPDOM_ROOT"],
    [AC_MSG_ERROR([*** CppDOM is required for JCCL ***])])

DPP_LANG_RESTORE

CPPDOM_INCLUDES="-I$cppdom_include"

if test "x$CPPDOM_ROOT" != "x$JUGGLERROOT_ABS/external/cppdom" ; then
    LOCAL_CPPDOM='Y'
fi

CFLAGS="${_vjsave_CFLAGS}"
CPPFLAGS="${_vjsave_CPPFLAGS}"
INCLUDES="${_vjsave_INCLUDES}"
LDFLAGS="${_vjsave_LDFLAGS}"

# -----------------------------------------------------------------------------
# Checks for header files.
# -----------------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(strings.h)

# -----------------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
# -----------------------------------------------------------------------------
AC_TYPE_SIZE_T
DPP_TYPE_SOCKLEN_T
#DPP_CHECK_TYPE_POSIX

# -----------------------------------------------------------------------------
# Checks for library functions.
# -----------------------------------------------------------------------------
AC_CHECK_FUNCS(socket strcasecmp)

## All of the above function checks may not be necessary ...

_vjsave_LIBS="$LIBS"
AC_CHECK_FUNC([gethostbyname], [SOCKET_LIB=''],
    [AC_CHECK_LIB([socket], [gethostbyname], [SOCKET_LIB='-lsocket'])])
LIBS="${_vjsave_LIBS}"

# -----------------------------------------------------------------------------
# Miscellaneous checks.
# -----------------------------------------------------------------------------

DPP_INSTALLER(vrjuggler, 0644, 0755, 0755)

# -----------------------------------------------------------------------------
# Do Makefile substitutions.
# -----------------------------------------------------------------------------

# Add these C++ options when compiling with G++.
if test "x$GXX" = "xyes" ; then
#    CXXFLAGS="-fhonor-std -Wall -Werror-implicit-function-declaration $CXXFLAGS"
    CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"
fi

if test "x$CPPDOM_INCLUDES" != "x" ; then
    INCLUDES="$INCLUDES $CPPDOM_INCLUDES"
fi

CXXFLAGS="$CXXFLAGS $VPR_CXXFLAGS"
EXTRA_LINK_FLAGS="$STDFLAGS $EXTRA_LINK_FLAGS"
jccl_cxxflags=''
jccl_cxxflags_all="$VPR_CXXFLAGS"

# If the user has a local copy of CppDOM, add its path to the C++ flags.
if test "x$LOCAL_CPPDOM" = "xY" ; then
   jccl_cxxflags="$jccl_cxxflags $CPPDOM_INCLUDES"
fi

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" = "xno" ; then
    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -woff 3322 -w2"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -J4 -all"
elif test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
    CXXFLAGS="$CXXFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS /nologo /incremental:no"
    DBG_FLAGS="$DBG_FLAGS /MDd"
    OPT_FLAGS="$OPT_FLAGS /MD"
fi

DPP_SYSTEM_SUBST

# For makedepend(1) to work properly on HP-UX with aCC, we have to include
# these extra paths.
if test "x$PLATFORM" = "xHP" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
    DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

# Define the base path to the source directory using $(JCCLROOT_ABS) as an
# alternative to using $(srcdir).
UNIX_JCCLROOT_ABS="$JCCLROOT_ABS"
UNIX_JUGGLERROOT_ABS="$JUGGLERROOT_ABS"

# $APP_EXTRA_LIBS must list all the libraries need to link a JCCL-based
# application.
# $jccl_extra_libs only lists the external (non-Juggler) libraries needed by
# JCCL.
# $jccl_extra_libs_juggler lists the Juggler Project libraries needed by JCCL.
if test "x$OS_TYPE" = "xWin32" ; then
    APP_EXTRA_LIBS="$LDFLAGS $VPR_LIBS_LD $LIBS $VPR_EXTRA_LIBS_LD"
    jccl_extra_libs="$LDFLAGS $LIBS"
    jccl_extra_libs_juggler="$VPR_LIBS_LD $VPR_EXTRA_LIBS_LD"
else
    APP_EXTRA_LIBS="$LDFLAGS $VPR_LIBS_CC $LIBS $VPR_EXTRA_LIBS_CC"
    jccl_extra_libs="$LDFLAGS $LIBS"
    jccl_extra_libs_juggler="$VPR_LIBS_CC $VPR_EXTRA_LIBS_CC"
fi

# Variables set in Makefiles found in the application trees.  All variables
# listed are for use only in the Makefile.in's found in that tree unless
# otherwise noted.  They are used in the following way:
#
#     * APP_VJ_LIBS_UTILS: The VR Juggler general utilities library.

# Put together the basic information needed to compile Jackal applications.
VJ_APP_COMPILER([$CC], [$CFLAGS], [$CXX], [$CXXFLAGS], [$DBG_FLAGS],
                [$OPT_FLAGS], [JCCL_BASE_DIR], [$DEFS], [$INCLUDES],
                [${_EXTRA_FLAGS}])
VJ_APP_LINKER([$CXX], [$EXTRA_LINK_FLAGS], [$LDOPTS_DBG], [$LDOPTS_OPT],
              [JCCL_BASE_DIR], [jccl], [$APP_EXTRA_LIBS])

APP_BASE_DIR='$(topdir)/instlinks'
APP_BASE_DIR_INST='$(JCCL_BASE_DIR)'

if test "$OS_TYPE" = "UNIX" ; then
    DYLIB_DEPS_JCCL="$APP_EXTRA_LIBS"
elif test "$OS_TYPE" = "Win32" ; then
    DYLIB_DEPS_BASIC="$APP_EXTRA_LIBS"
     DYLIB_DEPS_JCCL="$DYLIB_DEPS_BASIC"
fi

# Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
    JCCLROOT_ABS=`unix2dos -p "$JCCLROOT_ABS"`
    JUGGLERROOT_ABS=`unix2dos -p "$JUGGLERROOT_ABS"`

    if test "x$DEPEND_EXTRAS" != "x" ; then
        DEPEND_EXTRAS=`unix2dos "$DEPEND_EXTRAS"`
    fi

    if test "x$INCLUDES" != "x" ; then
        INCLUDES=`unix2dos "$INCLUDES"`
    fi

    if test "x$LIBS" != "x" ; then
        LIBS=`unix2dos "$LIBS"`
    fi

    LN_S='cp -r'
    RM_LN='rm -rf'
    MTREE_CMD=`unix2dos "$MTREE_CMD"`
    JDK_HOME=`unix2dos -p "$JDK_HOME"`
#    APP_EXTRA_LIBS=`unix2dos "$APP_EXTRA_LIBS"`
else
    RM_LN='rm -f'
    JCCLROOT_ABS="$JCCLROOT_ABS"
    JUGGLERROOT_ABS="$JUGGLERROOT_ABS"
fi

# Set up some sed expressions that will help separate the share directory from
# the full installation prefix.
if test "x$prefix" = "xNONE" ; then
    _prefix_exp="s|^$ac_default_prefix/||"
else
    _prefix_exp="s|^$prefix/||"
fi

# Make a best-effort attempt to extract the actual share directory from the
# full installation prefix.  This is not foolproof, but it will work in almost
# all cases.  A person would have to be doing something malicious or foolish
# to make it break.
JCCL_SHARE_DIR=`echo "$datadir/jccl" | sed -e 's|^${prefix}/||'`
JCCL_SHARE_DIR=`echo "$JCCL_SHARE_DIR" | sed -e "${_prefix_exp}"`

# Information needed to generate juggler-config.
case $OS_TYPE in
    UNIX)
        if test "x$GXX" = "xyes" ; then
            static_begin="-Wl,-Bstatic"
            static_end="-Wl,-Bdynamic"
        else
            static_begin="-B static"
            static_end="-B dynamic"
        fi

        jccl_ldflags_compiler="-L\$prefix/lib$LIBBITSUF"
	jccl_ldflags_linker="$jccl_ldflags_compiler"
        jccl_libs='-ljccl'
        jccl_lib='-ljccl'
        ;;
    Win32)
        jccl_ldflags_compiler="/link /libpath:\$prefix/lib/debug"
        jccl_ldflags_linker="/libpath:\$prefix/lib/debug"
        jccl_libs='jccl.lib'
        jccl_lib='jccl.lib'
        ;;
esac

jccl_extra_cxxflags=''
jccl_extra_include_dirs=''

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
    jccl_n32_flags='-n32'
    jccl_64_flags='-64'
fi

jccl_extra_ldflags="$APP_EXTRA_LIBS_BEGIN"

VJ_VERSION_GROK(VERSION)

DPP_SUBST

AC_SUBST(topdir)
AC_SUBST(UNIX_JCCLROOT_ABS)
AC_SUBST(UNIX_JUGGLERROOT_ABS)
AC_SUBST(JCCLROOT_ABS)
AC_SUBST(JUGGLERROOT_ABS)
AC_SUBST(JCCL_SHARE_DIR)

AC_SUBST(RM_LN)
AC_SUBST(EXTRA_LINK_FLAGS)

AC_SUBST(BUILD_JAVA)
AC_SUBST(JDOM_JAR)

AC_SUBST(BUILD_JAVA_TEST_SUITE)
AC_SUBST(JUNIT_JAR)

AC_SUBST(CPPDOM_ROOT)
AC_SUBST(CPPDOM_INCLUDES)
AC_SUBST(LOCAL_CPPDOM)

AC_SUBST(APP_BASE_DIR)
AC_SUBST(APP_BASE_DIR_INST)

AC_SUBST(DYLIB_DEPS_JCCL)

AC_SUBST(APP_BASIC_LIBS)
AC_SUBST(APP_EXTRA_LIBS)

AC_SUBST(static_begin)
AC_SUBST(static_end)
AC_SUBST(jccl_cxxflags)
AC_SUBST(jccl_cxxflags_all)
AC_SUBST(jccl_ldflags_compiler)
AC_SUBST(jccl_ldflags_linker)
AC_SUBST(jccl_libs)
AC_SUBST(jccl_lib)
AC_SUBST(jccl_extra_cxxflags)
AC_SUBST(jccl_extra_include_dirs)
AC_SUBST(jccl_extra_ldflags)
AC_SUBST(jccl_extra_libs)
AC_SUBST(jccl_extra_libs_juggler)
AC_SUBST(jccl_n32_flags)
AC_SUBST(jccl_64_flags)

# -----------------------------------------------------------------------------
# Final file generation step.
# -----------------------------------------------------------------------------

VJ_MTREE_LIB_GEN([JCCL], [mtree], [$PLATFORM], [$ISA])

AC_OUTPUT(jccl-config
          Makefile
          Makefile.inc
          common.defs.mk
          make.defs.mk
          common/Makefile
          common/Makefile.inc
          common/jccl/Makefile
          common/jccl/Makefile.inc
          common/jccl/Util/Makefile
          common/jccl/XMLUtil/Makefile
          config/Makefile
          config/Makefile.inc
          config/jccl/Makefile
          config/jccl/Makefile.inc
          config/jccl/Config/Makefile
          editorgui/Makefile
          editorgui/Makefile.inc
          net/Makefile
          net/Makefile.inc
          net/jccl/Makefile
          net/jccl/Makefile.inc
          net/jccl/Net/Makefile
          perfmonitor/Makefile
          perfmonitor/Makefile.inc
          perfmonitor/jccl/Makefile
          perfmonitor/jccl/Makefile.inc
          perfmonitor/jccl/PerfMonitor/Makefile
          rtrc/Makefile
          rtrc/Makefile.inc
          rtrc/jccl/Makefile
          rtrc/jccl/Makefile.inc
          rtrc/jccl/RTRC/Makefile
          test/Makefile
          test/TestSuite/Makefile
          test/TestSuite/test.defs.mk
          test/TestSuite/java/Makefile
          test/TestSuite/TestCases/Makefile
          tools/Makefile
          tools/ConfigUpdater/Makefile
          vjcontrol/Makefile
          vjcontrol/Makefile.inc
          mtree/JCCL.data.dist
          mtree/JCCL.include.dist
          mtree/JCCL.install.dist
          mtree/JCCL.samples.dist
          mtree/JCCL.test.dist
          mtree/JCCL.tools.dist
          VARS.pl,
    [ sed -e 's/^\(%.*\)/#\1/g' jccl-config > jccl-config.tmp
      mv jccl-config.tmp jccl-config
      chmod a+x jccl-config ])

cat <<BUILD_INFO

 Remember that you need to build Jackal with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the Jackal distribution.

BUILD_INFO
