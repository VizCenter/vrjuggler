# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2002 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Makefile.in for config.  It requires GNU make.
#
# Generated for use on @PLATFORM@
# -----------------------------------------------------------------------------

default: all

# This is a hack to deal with GNU make's ignorance about defined targets.
# Without this, the 'default' set in dpp.subdir.mk becomes the default
# target, and that's not what we want.
DEFAULT_SET=	1

# Include common definitions.
include @topdir@/make.defs.mk

STARTTIME:=	$(shell LC_TIME=C date)

BUILD_PROF_C=	@BUILD_PROF_C@
BUILD_PROF_CXX=	@BUILD_PROF_CXX@

# If we can build both C and C++ profiled objects, we will build profiled
# libraries.
ifeq ($(BUILD_PROF_C), Y)
ifeq ($(BUILD_PROF_CXX), Y)
   BUILD_PROF_LIBS=	1
endif
endif

beandir=		$(bindir)/beans
srcdir=			@srcdir@
top_srcdir=		@top_srcdir@
EXTRA_JAVA_SRCS_PATH=	$(srcdir)
INSTALL=		@INSTALL@
INSTALL_FILES=		

# -----------------------------------------------------------------------------
# Java-related setup
# -----------------------------------------------------------------------------
JDOM_JAR=	@JDOM_JAR@
TWEEK_JARS=	@TWEEK_JARS@
CLASSPATH=	$(JDOM_JAR)$(JCPS)$(TWEEK_JARS)

CONFIG_PKG=	org.vrjuggler.jccl.config
CONFIG_DIR=	$(subst .,/,$(CONFIG_PKG))
CONFIG_SRCS=	$(patsubst $(srcdir)/%,%,$(wildcard $(srcdir)/$(CONFIG_DIR)/*.java))
CONFIG_CLASSES=	$(CONFIG_SRCS:.java=.class)

JAVA_SRCS=	$(CONFIG_SRCS)
JARS=		
BEANS=		jccl_config

# List the packages for which JavaDoc documentation will be generated.
DOC_PKGS=	$(CONFIG_PKG)
webroot=	$(HOME)/public_html/jugglerweb
instdir=	jccl/config/1.0
doc_prefix=	$(webroot)/$(instdir)
DOC_ROOT=	programmer.reference.java

JAVA_AFTERBUILD=	jars

include $(MKPATH)/dpp.compile.mk

# -----------------------------------------------------------------------------
# C++-related setup
# 		Just recurse to the sub directories and then link to a static library.
# -----------------------------------------------------------------------------
STATICLIB_EXT=	@STATICLIB_EXT@
DYNAMICLIB_EXT=	@DYNAMICLIB_EXT@

#LIBS=		$(JCCL_CONFIG_LIBRARY)
#STATIC_LIBS=	$(LIBS)
#DYNAMIC_LIBS=	$(LIBS)

JCCL_CONFIG_LIB_STATIC=		$(JCCL_CONFIG_LIBRARY).$(STATICLIB_EXT)
JCCL_CONFIG_LIB_DYNAMIC=	$(JCCL_CONFIG_LIBRARY).$(DYNAMICLIB_EXT)
JCCL_CONFIG_PROF_LIB_STATIC=	$(JCCL_CONFIG_LIBRARY)$(PROFLIB_EXT).$(STATICLIB_EXT)
JCCL_CONFIG_PROF_LIB_DYNAMIC=	$(JCCL_CONFIG_LIBRARY)$(PROFLIB_EXT).$(DYNAMICLIB_EXT)

include $(MKPATH)/dpp.libs-basic.mk
include $(MKPATH)/dpp.obj-common.mk

# -----------------------------------------------------------------------------
# Recursive make setup
# -----------------------------------------------------------------------------
DIRPRFX=	config/
SUBDIR=		jccl
$(RECTARGET): recursive
include $(MKPATH)/dpp.subdir.mk

# -----------------------------------------------
# Construct the static version of the libraries.
# -----------------------------------------------
$(LIBDIR)/$(JCCL_CONFIG_LIB_STATIC) $(LIBDIR)/$(JCCL_CONFIG_PROF_LIB_STATIC): $(OBJDIR)/*.$(OBJEXT)
ifneq (@OS_TYPE@, Win32)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(AR) $(AR_NAME_FLAG)$@ $(OBJDIR)/*.$(OBJEXT)
	$(RANLIB) $@
	cd $(LIBDIR_BASE) && rm -f $(notdir $@) && $(LN_S) $@ ./
	cd $(OBJDIR) && rm -rf ii_files
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"
endif

# ------------------------------------------------
# Construct the dynamic version of the libraries.
# ------------------------------------------------
$(LIBDIR)/$(JCCL_CONFIG_LIB_DYNAMIC) $(LIBDIR)/$(JCCL_CONFIG_PROF_LIB_DYNAMIC): $(OBJDIR)/*.$(OBJEXT)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(LD) $(LDOPTS) $(DYLIB_NAME_FLAG) $(OBJDIR)/*.$(OBJEXT) $(DYLIB_DEPS)
	cd $(LIBDIR_BASE) && rm -f $(notdir $@) && $(LN_S) $@ ./
	cd $(OBJDIR) && rm -rf ii_files
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"


# -----------------------------------------------------------------------------
# Duplicate from dpp.obj.mk
# -----------------------------------------------------------------------------
java: do-beforebuild
ifdef BEFOREBUILD
	@$(MAKE) $(BEFOREBUILD)
endif
ifdef JAVA_BEFOREBUILD
	@$(MAKE) $(JAVA_BEFOREBUILD)
endif
	@$(MAKE) do-java-build OBJDIR=.
ifdef JAVA_AFTERBUILD
	@$(MAKE) $(JAVA_AFTERBUILD)
endif


# -----------------------------------------------------------------------------
# Extra targets.
# -----------------------------------------------------------------------------
jars: $(JARS) $(addsuffix .jar, $(BEANS))

jccl_config.jar: $(CONFIG_CLASSES)
	$(JAR) cvf $@ $(CONFIG_DIR)/*.class

docs:
	$(JDK_HOME)/bin/javadoc -d $(DOC_ROOT) -sourcepath $(srcdir)	\
          -classpath $(CLASSPATH) $(DOC_PKGS)

# This cannot be named 'install' because Doozer++ already defines that.
config-install:
	@echo "------------------------------------------------"
	@echo "Installing the JCCL config Java code base"
	@echo "------------------------------------------------"
ifneq ($(JARS), )
	for jar in $(JARS) ; \
          do \
              $(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX) \
                $(EXTRA_INSTALL_ARGS) $(topdir)/config/$$jar $(bindir) \
              || exit 1; \
          done
endif
ifneq ($(BEANS), )
	for bean in $(BEANS) ; \
          do \
              $(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX) \
                $(EXTRA_INSTALL_ARGS) $(topdir)/config/$$bean.jar $(beandir) \
              || exit 1; \
              $(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX) \
                $(EXTRA_INSTALL_ARGS) $(top_srcdir)/config/$$bean.xml \
                  $(beandir) || exit 1; \
          done
endif
	for jar in `echo "$(JDOM_JAR)" | sed -e 's/$(JCPS)/ /g'` ; \
          do \
              $(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX) \
                $(EXTRA_INSTALL_ARGS) $$jar $(bindir) || exit 1; \
          done

install-docs:
	$(MKINSTALLDIRS) $(doc_prefix)
	rm -rf $(doc_prefix)/$(DOC_ROOT)
	mv $(DOC_ROOT) $(doc_prefix)

CLEAN_FILES+=	$(JARS) $(CONFIG_CLASSES)

ifdef GLOBAL_BUILD
   CLEAN_DIRS+=	$(top_srcdir)/bin
endif

include Makefile.inc
