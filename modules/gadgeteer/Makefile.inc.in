# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2002 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Specialized include file for the top-level makefile.  Targets and variables
# needed for building the whole source tree are provided here.  This file
# should only be included by the top-level makefile.  It is written in such a
# way that no assumptions are made by this file about what the including file
# provides except that it includes make.defs.mk.
#
# Generated for use on @PLATFORM@
# -----------------------------------------------------------------------------

# Variables whose values are specific to this file.
includedir	= @includedir@
instlinks	= $(topdir)/instlinks
srcdir		= @srcdir@
top_srcdir	= @top_srcdir@

# Extra compiler and linker options needed only by this file.
DBG_FLAGS	= -D_DEBUG @DBG_FLAGS@
OPT_FLAGS	= -D_OPT @OPT_FLAGS@

# =============================================================================
# Build and installation directory naming and ownership information.
# =============================================================================
DEFAULT_DIR	= $(OPT_DIR)

# If we have a name for the install group, define group-setting options for
# UNIX commands (chown(1), chgrp(1)) and for local Perl scripts
# (makefiles-gen.pl in particular).
ifdef GROUP_NAME
    _GROUP_OPT_PL	= --gname="$(GROUP_NAME)"
endif

# --------------------------------------------
# Library build information.
# --------------------------------------------

SHLIB_MAJOR	= 1
SHLIB_MINOR	= 0

STATICLIB_EXT	= @STATICLIB_EXT@
DYNAMICLIB_EXT	= @DYNAMICLIB_EXT@

# Full list of the libraries to build.
LIBS		= $(GADGET_LIBRARY)
STATIC_LIBS	= $(LIBS)
DYNAMIC_LIBS	= $(LIBS)

# Dependencies for each of the various dynamic libraries we build.
DYLIB_DEPS		= @DYLIB_DEPS@

GADGET_LIB_STATIC	= $(GADGET_LIBRARY).$(STATICLIB_EXT)
GADGET_LIB_DYNAMIC	= $(GADGET_LIBRARY).$(DYNAMICLIB_EXT)
GADGET_PROF_LIB_STATIC	= $(GADGET_LIBRARY)$(PROFLIB_EXT).$(STATICLIB_EXT)
GADGET_PROF_LIB_DYNAMIC	= $(GADGET_LIBRARY)$(PROFLIB_EXT).$(DYNAMICLIB_EXT)

# On Linux, we have to compile the Performer library with -O for things to
# link properly.
ifeq ($(PLATFORM), Linux)
    EXTRA_LDOPTS = -O
endif

# Version information.
PARAM_HEADER	= gadget/gadgetParam.h
BRANCH		= HEAD
CANON_NAME	= Evil Cartman
VER_ARGS	= -f $(GADGETROOT_ABS)/VERSION -s @VPR_SUBSYSTEM@	\
                  -b $(BRANCH) -o $(PARAM_HEADER) 			\
                  -i $(GADGETROOT_ABS)/gadget/gadgetParam.h.in		\
                  -n "$(CANON_NAME)" -d "`date '+%b %e, %Y %H:%M:%S'`"

ifdef VERSION
    VER_ARGS	+= -v $(VERSION)
endif

# =============================================================================
# Library targets.
# =============================================================================

BEFOREBUILD	= beforebuild
AFTERBUILD	= afterbuild

# Things to do before the object files and library are built.
beforebuild: $(PARAM_HEADER)

$(PARAM_HEADER):
	@$(SHELL) $(scriptdir)/make-ver.sh $(VER_ARGS)

# Things to do after the object files and library are built.
afterbuild:
	@$(MAKE) links

# -----------------------------------------------
# Construct the static version of the libraries.
# -----------------------------------------------
$(LIBDIR)/$(GADGET_LIB_STATIC) $(LIBDIR)/$(GADGET_PROF_LIB_STATIC): $(OBJDIR)/*.$(OBJEXT)
ifneq (@OS_TYPE@, Win32)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(AR) $(AR_NAME_FLAG)$@ $(OBJDIR)/*.$(OBJEXT)
	$(RANLIB) $@
	cd $(LIBDIR_BASE) && $(RM_LN) $(notdir $@) && $(LN_S) $@ ./
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"
endif

# ------------------------------------------------
# Construct the dynamic version of the libraries.
# ------------------------------------------------
$(LIBDIR)/$(GADGET_LIB_DYNAMIC) $(LIBDIR)/$(GADGET_PROF_LIB_DYNAMIC): $(OBJDIR)/*.$(OBJEXT)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(LD) $(LDOPTS) $(DYLIB_NAME_FLAG) $(OBJDIR)/*.$(OBJEXT) $(DYLIB_DEPS)
ifeq (@OS_TYPE@, Win32)
	cd $(LIBDIR_BASE) && cp $(LIBDIR)/* .
else
	cd $(LIBDIR_BASE) && $(RM_LN) $(notdir $@) && $(LN_S) $@ ./
endif
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"

# =============================================================================
# Make links for developer use that provide the needed functionality for
# the $GADGET_BASE_DIR environment variable to be used when needed.
# $GADGET_BASE_DIR should be set to $(instlinks).
# =============================================================================
links:
	@echo "------------------------------------------------"
	@echo "Setting up developer installation links"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(instlinks)/include/gadget
	$(SHELL) $(MKINSTALLDIRS) $(instlinks)/$(LIBDIR_NAME)
	@$(MAKE) -C gadget instlinks=$(instlinks) links
ifeq (@OS_TYPE@, Win32)
	cd $(instlinks)/$(LIBDIR_NAME) && cp -r $(LIBDIR_BASE)/* .
else
	for lib in $(LIBS) ; do 					\
            cd $(instlinks)/$(LIBDIR_NAME) && $(RM_LN) $$lib* &&	\
              $(LN_S) $(LIBDIR_BASE)/$$lib* ./ ;			\
          done
endif
	cd $(instlinks)/include/gadget && $(RM_LN) ./*.h &&		\
          $(LN_S) $(GADGETROOT_ABS)/gadget/*.h ./
	cd $(instlinks)/include/gadget && $(RM_LN) ./gadgetDefines.h &&	\
          $(LN_S) $(topdir)/gadget/gadgetDefines.h ./gadgetDefines.h
	cd $(instlinks)/include/gadget && $(RM_LN) ./gadgetParam.h &&	\
          $(LN_S) $(topdir)/gadget/gadgetParam.h ./gadgetParam.h
	$(SHELL) $(MKINSTALLDIRS) $(instlinks)/bin
	$(PERL) $(scriptdir)/incvt.pl -i $(topdir)/config.status	\
            -t $(GADGETROOT_ABS)/gadgeteer-config.in			\
            -p 'use_base_dir=yes' -o $(instlinks)/bin/gadgeteer-config	\
            -v $(GADGETROOT_ABS)/VERSION -x
	@echo "\n\n"
	@echo "---------------------------------------------------------------"
	@echo 'You should now set $$GADGET_BASE_DIR to:'
	@cd $(instlinks) && echo "  `pwd`"
	@echo "---------------------------------------------------------------"

# Remove the links in $(instlinks).
clean-links:
ifndef GLOBAL_BUILD
	@echo "------------------------------------------------"
	@echo "Removing developer installation links"
	@echo "------------------------------------------------"
	rm -rf $(instlinks)
endif

# =============================================================================
# Installation targets.  The default (what is done by 'install') is to install
# the static debugging version of the libraries.  The steps taken for a full
# installation are:
#
#     1) Create the full installation directory hierarchy.
#     2) Install the libraries.
#     3) Install the header files.
#     4) Install the test programs.
#     5) Install the contents of the Data directory.
#     6) Install the Java-based config editor (if possible).
# =============================================================================

BEFOREINSTALL	= beforeinstall
AFTERINSTALL	= afterinstall

# Steps to take before beginning the installation process.  This target is
# independent of the current ABI.
beforeinstall:
	@$(MAKE) hier

# Make the full directory hierarchy for the installation.
hier:
	@echo "------------------------------------------------"
	@echo "Making hierarchy"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(prefix)
	$(MTREE_CMD) -Ude -f $(mtreedir)/GADGET.install.dist -p $(prefix)
	$(SHELL) $(MKINSTALLDIRS) $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/GADGET.data.dist -p $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/GADGET.include.dist -p $(prefix)
	$(MTREE_CMD) -Ude -f $(mtreedir)/GADGET.lib.dist -p $(prefix)
	$(MTREE_CMD) -Ude -f $(mtreedir)/GADGET.test.dist -p $(projdatadir)

# Steps to take after the installation process is complete.  This target is
# independent of the current ABI.
afterinstall:
	@echo "==============================================================="
	@echo "Gadgeteer installation complete"
	@echo "==============================================================="

PREINSTALL	= pre-install
POSTINSTALL	= post-install

pre-install:
	$(MTREE_CMD) -Ude -f $(mtreedir)/GADGET.lib.dist -p $(prefix)

# Do everything needed after installing the library binaries.
post-install:
	@$(MAKE) install-test
	@$(MAKE) install-tools
	@$(MAKE) install-data
	@$(MAKE) install-m4
	$(INSTALL) -m $(EXEC_PERMS) $(GROUP_OPT_UNIX)			\
          $(topdir)/gadgeteer-config $(bindir)

PREINSTALL_HEADERS	= pre-install-headers
POSTINSTALL_HEADERS	= post-install-headers

pre-install-headers:
	$(MTREE_CMD) -Ude -f $(mtreedir)/GADGET.include.dist -p $(prefix)

post-install-headers:
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(GADGETROOT_ABS)/gadget/gadgetConfig.h			\
          $(includedir)/gadget/gadgetConfig.h
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(topdir)/gadget/gadgetDefines.h $(includedir)/gadget
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(topdir)/gadget/gadgetParam.h $(includedir)/gadget

# Install the test programs.
install-test:
	@echo "------------------------------------------------"
	@echo "Installing test programs"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/GADGET.test.dist -p $(projdatadir)
	$(PERL) $(scriptdir)/install-src.pl -i $(top_srcdir)/test	\
          -m $(FILE_PERMS) $(GROUP_OPT_UNIX) -o $(projdatadir)/test
	$(PERL) $(scriptdir)/makefiles-gen.pl --mode="$(FILE_PERMS)"	\
          --prefix="$(projdatadir)/test" --vars="$(topdir)/VARS.pl"	\
          --startdir="$(top_srcdir)/test" $(_GROUP_OPT_PL) --srcdir="."

# Install the standard data files.
install-data:
	@echo "------------------------------------------------"
	@echo "Installing standard data files"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/GADGET.data.dist -p $(projdatadir)
	$(PERL) $(scriptdir)/install-dir.pl -i $(top_srcdir)/data	\
          -m $(FILE_PERMS) $(GROUP_OPT_UNIX) -o $(projdatadir)/data	\
          -v "$(topdir)/VARS.pl"

install-tools:
	@echo "------------------------------------------------"
	@echo "Installing tools"
	@echo "------------------------------------------------"
	@echo " doing nothing... "

install-m4:
	@echo "------------------------------------------------"
	@echo "Installing Autoconf m4 macros"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(datadir)/aclocal
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(JUGGLERROOT_ABS)/macros/gadget.m4 $(datadir)/aclocal

# =============================================================================
# Clean-up targets.  '_clean' removes all the files in the build directories.  
# '_clobber' removes the $(BUILDDIR_BASE) and $(LIBDIR_NAME) directories.
# =============================================================================
_clobber:
	@$(MAKE) cleandepend
	@$(MAKE) clean-links

# Define $(_LOCAL_CLOBBER) to inform the shared 'clobber' target that there is
# a '_clobber' target to be run besides the standard target.
_LOCAL_CLOBBER	= 1

include $(MKPATH)/dpp.libs.mk
include $(MKPATH)/dpp.clean.mk

CLEAN_FILES	+= $(PARAM_HEADER)
CLEAN_DIRS	+= $(BUILDDIR_BASE) $(LIBDIR_NAME)
CLOBBER_DIRS	+= $(BUILDDIR_BASE) $(LIBDIR_NAME)
