# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2003 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Base configure.in for Gadgeteer.
# -----------------------------------------------------------------------------
# This file is "compiled" by GNU autoconf to generate the configure script
# that is actually run.
# -----------------------------------------------------------------------------

AC_INIT([Gadgeteer], [0.12], [vrjuggler-devel@lists.sourceforge.net])
AC_CONFIG_HEADERS([gadget/gadgetDefines.h])
AC_PREREQ([2.53])
AC_COPYRIGHT([VR Juggler is (C) Copyright 1998-2003 by Iowa State University])
AC_CONFIG_SRCDIR([gadget/gadgetConfig.h])
AC_REVISION($Revision$)
AC_CONFIG_AUX_DIR([../../share/config])
DPP_PREREQ([1.5.1])
DPP_INIT

# Generate the reconfig script first so that it's easy to run configure again
# if it fails later on.
DPP_GEN_RECONFIG

# -----------------------------------------------------------------------------
# Command-line arguments (--enable-option, --with-pkg=package_name).
# -----------------------------------------------------------------------------

AC_ARG_ENABLE([xwindows],
              [  --enable-xwindows       Use X11 for windowing code ],
              [XWIN_UI="$enableval"], [XWIN_UI='no'])

# ------------------------------------------------------ #
# --enable-feature[=arg] and --disable-feature arguments #
# ------------------------------------------------------ #

DPP_STD_CPP(yes)

# -------------------------------------------- #
# --with-pkg[=arg] and --without-pkg arguments #
# -------------------------------------------- #

# Force the use of GCC as the compiler.
# NOTE: This is not fully implemented yet for any platform, but it is partially
# usable on Windows.
DPP_WITH_GCC(no)

AC_ARG_WITH(trackdroot,
            [  --with-trackdroot=<PATH> Trackd API installation root   [default=/usr/local]],
            [trackdapi_root="$withval"], [trackdapi_root='/usr/local'])

# Build the DTK wrapper using the DTK installation found at the given path.
# There is default path.
AC_ARG_WITH(dtk,
            [  --with-dtk=<PATH>       DTK installation],
            _with_dtk="$withval", _with_dtk='no')

#Build the VRPN wrapper using the VRPN installation found at the given path.
# There is default path.
AC_ARG_WITH(vrpn, [  --with-vrpn=<PATH>      VRPN installation],
            _with_vrpn="$withval", _with_vrpn='no')

# Define the binary format.
DPP_ABI_SETUP

# -----------------------------------------------------------------------------
# System-dependent stuff.
# -----------------------------------------------------------------------------
DPP_WIN32_SETUP

# We use AC_CANONICAL SYSTEM so that we can find out information about the
# build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM
DPP_SYSTEM_SETUP

# Templates for Autoheader.
AH_TEMPLATE([_INCLUDE_TERMIO], [Define if building on HP-UX.])
AH_TEMPLATE([_CMA_NOWRAPPERS_], [Define if building on HP-UX.])

# Depending on the target operating system, set various command options and
# such.
case $target_os in
   # SGI running IRIX 6.*.
   irix6*)
      if test "x$USE_GCC" != "xyes" ; then
         DBG_FLAGS="$DBG_FLAGS -gslim"
      fi
      ;;
   # HP PA-RISC machine running HP-UX 10.20.
   hpux10.20)
      AC_DEFINE(_INCLUDE_TERMIO,)
      AC_DEFINE(_CMA_NOWRAPPERS_,)
      ;;
   # HP PA-RISC machine running HP-UX 11.x.
   hpux11*)
      AC_DEFINE(_INCLUDE_TERMIO,)
      AC_DEFINE(_CMA_NOWRAPPERS_,)
      ;;
esac

# -----------------------------------------------------------------------------
# Path setup.
# -----------------------------------------------------------------------------

# $srcdir is the root directory of the juggler source tree.  To get a value for
# $GADGETROOT_ABS, we cd there and save the value of running pwd.  Then return
# to the directory where configure is being run ($topdir).
cd "$srcdir"
GADGETROOT_ABS=`pwd`

cd "$GADGETROOT_ABS/../.."
UNIX_JUGGLERROOT_ABS=`pwd`
cd "$topdir"

if test "x$CYGPATH" != "xno" ; then
   JUGGLERROOT_ABS=`cygpath -w "$UNIX_JUGGLERROOT_ABS" | sed -e 's/\\\\/\\//g'`
else
   JUGGLERROOT_ABS="$UNIX_JUGGLERROOT_ABS"
fi

# -----------------------------------------------------------------------------
# Checks for programs.
# -----------------------------------------------------------------------------
VJ_COMPILER_SETUP
VJ_PROG_CC_PROF_FLAG(yes)
VJ_PROG_CXX_PROF_FLAG(yes)

# Ensure that the C++ compiler we've found is capable of compiling the newer
# newer C++ features that we need.
DPP_CXX_NAMESPACE([AC_MSG_ERROR([*** The library requires C++ namesapce support ***])])
DPP_CXX_HAVE_STD
DPP_CXX_INLINE([AC_MSG_ERROR([*** The library requires C++ inline support ***])])
DPP_CXX_RTTI([AC_MSG_ERROR([*** The library requires C++ RTTI support ***])])
DPP_CXX_STATIC_CAST([AC_MSG_ERROR([*** The library requires C++ static_cast<> ***])])
DPP_CXX_DYNAMIC_CAST([AC_MSG_ERROR([*** The library requires C++ dynamic_cast<> ***])])

# Ensure that a version of Perl greater than or equal to 5.004 is available.
DPP_PERL_VER(5.004, , , [AC_MSG_ERROR([*** Perl is required ***])])
AC_CHECK_PROG(MTREE_CMD, mtree, mtree, [\$(PERL) \$(scriptdir)/mtree.pl])
DPP_HAVE_GNU_MAKE(3.78, ,
    [AC_MSG_ERROR([*** The build system requires GNU make 3.78 or newer ***])])
DPP_BASIC_PROGS($PLATFORM, $OS_TYPE)
DPP_PROG_INSTALL
DPP_PROG_LINKER

# -----------------------------------------------------------------------------
# Checks for libraries.
# -----------------------------------------------------------------------------
VPR_PATH([0.27.5], , [AC_MSG_ERROR([*** VPR required for Gadgeteer ***])])
JCCL_PATH_CXX([0.2.0], ,
              [AC_MSG_ERROR([*** JCCL C++ API required for Gadgeteer ***])])

min_tweek_ver='0.13.1'

TWEEK_PATH_CXX([$min_tweek_ver], [HAVE_TWEEK_CXX='Y'],
   [AC_MSG_WARN([*** Tweek C++ required for gadget::TweekGadget ***])
    HAVE_TWEEK_CXX='N'
   ])

TWEEK_PATH_JAVA([$min_tweek_ver],
   [JCCL_PATH_JAVA([0.10.0], [HAVE_TWEEK_JAVA='Y'],
      [AC_MSG_WARN([*** JCCL Java required for TweekGadget.jar ***])
       HAVE_TWEEK_JAVA='N'
      ])],
   [AC_MSG_WARN([*** Tweek Java required for TweekGadget.jar ***])
    HAVE_TWEEK_JAVA='N'
   ])

# Check for the ant build program
if test "x$HAVE_TWEEK_JAVA" = "xY"; then
   DPP_JDK_VERSION([$JDK_HOME], [1.3], ,
      [BUILD_JAVA='N'
       AC_MSG_WARN([*** JDK 1.3 or newer required for TweekGadget.jar ***])
      ])

   if test "x$BUILD_JAVA" != "xN" ; then
      ANT_HOME=$UNIX_JUGGLERROOT_ABS/external/ant
      AC_PATH_PROG([ANT], [ant], [no], [${ANT_HOME}/bin])

      if test "x$ANT" == "xno"; then
         AC_MSG_WARN([*** Can't find the java build tool ant. TweekGadget.jar will not be built. ***])
         HAVE_TWEEK_JAVA='N'
      else
         ANT="JAVA_HOME=\"$JDK_HOME\" \"$ANT\""
      fi
   fi
fi

gadsave_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $STDFLAGS"
GMTL_PATH(0.1.9, [$JUGGLERROOT_ABS/external/GMTL],
          [$JUGGLERROOT_ABS/external/GMTL], ,
          [AC_MSG_ERROR([*** GMTL required for Gadgeteer ***])])
CPPFLAGS="$gadsave_CPPFLAGS"

# If we are not using GMTL from the external directory, we have a locally
# installed copy.
if test "x$GMTL_ROOT" != "x$JUGGLERROOT_ABS/external/GMTL" ; then
    LOCAL_GMTL='Y'
fi

AC_PATH_X

gadget_use_x11='no'

if test "x$have_x" = "xyes" ; then
   AH_TEMPLATE([GADGET_USE_X11], [Define if the X Window System will be used])

   if test "x$PLATFORM" = "xDarwin" ; then
      if test "x$XWIN_UI" = "xyes" ; then
         gadget_use_x11='yes'
         AC_DEFINE(GADGET_USE_X11,)
      fi
   elif test "x$OS_TYPE" = "xUNIX" ; then
      gadget_use_x11='yes'
      AC_DEFINE(GADGET_USE_X11,)
   fi
fi

# -----------
# Trackd API
# -----------
DPP_LANG_SAVE
DPP_LANG_C

gadget_save_CFLAGS="$CFLAGS"
gadget_save_CPPFLAGS="$CPPFLAGS"

if test "x$trackdapi_root" != "x/usr" ; then
   TRACKD_API_INCLUDES="-I$trackdapi_root/include"

if test "x$OS_TYPE" = "xUNIX" ; then
    TRACKD_API_LIB_FLAGS="-L$trackdapi_root/lib -ltrackdAPI"
elif test "x$OS_TYPE" = "xWin32" ; then
    TRACKD_API_LIB_FLAGS="/libpath:$trackdapi_root/lib trackdAPI_MT.lib"
fi

fi

CFLAGS="$CFLAGS $TRACKD_API_INCLUDES"
CPPFLAGS="$CPPFLAGS $TRACKD_API_INCLUDES"

# Test to see if trackdAPI.h is available.  If so, we leave
# $TRACKD_API_INCLUDES alone so that it may be used again later.  If it is
# not there, we clear $TRACKD_API_INCLUDES to avoid polluting the compile
# line.
AC_CHECK_HEADER([trackdAPI.h], [gadget_have_trackdapi='yes'],
                [gadget_have_trackdapi='no'
                 TRACKD_API_INCLUDES=''])

CFLAGS="$gadget_save_CFLAGS"
CPPFLAGS="$gadget_save_CPPFLAGS"

DPP_LANG_RESTORE

# ----
# DTK
# ----
try_dtk='no'
vpr_subsystem=`$VPR_CONFIG --subsystem`
VPR_SUBSYSTEM="$vpr_subsystem"

# We can use DTK in one of the following two situations:
#     1) If the NSPR subsystem is enabled, the target platform is UNIX-based,
#        and NSPR threads are not being used.
#     2) If the POSIX subsystem is enabled.
case $vpr_subsystem in
    NSPR)
        if test "x$OS_TYPE" = "xUNIX"; then
            try_dtk='yes'
        fi
        ;;
    POSIX)
        try_dtk='yes'
        ;;
esac

# The user requested that the DTK wrapper be built, and the subsystem
# configuration is right for use with DTK.
if test "x${_with_dtk}" != "xno" -a "x$try_dtk" = "xyes" ; then
    # Try to find dtk-config unless the user has already set a value for
    # $DTK_CONFIG in their environment.
    if test "x$DTK_CONFIG" = "x" ; then
        AC_PATH_PROG(DTK_CONFIG, dtk-config, no, "${_with_dtk}/bin")
    fi

    # If dtk-config was not found, we cannot proceed with the DTK checks.
    if test "x$DTK_CONFIG" = "xno" ; then
        AC_MSG_WARN(*** Cannot build DTK wrapper without dtk-config ***)
    # If dtk-config was found, $DTK_CONFIG has the path to it, so we can
    # set things up to compile with DTK.
    else
        DPP_LANG_SAVE
        DPP_LANG_CPLUSPLUS

        _vjsave_CXXFLAGS="$CXXFLAGS"
        _vjsave_CPPFLAGS="$CPPFLAGS"
        _vjsave_LDFLAGS="$LDFLAGS"
        _vjsave_LIBS="$LIBS"

        # Based on the default ABI, tell $DTK_CONFIG 
        if test "x$ABI" = "xN32" ; then
            bits='n32'
        elif test "x$ABI" = "x64" ; then
            bits='64'
        fi

        DTK_ROOT=`$DTK_CONFIG --root`
        CXXFLAGS="$CXXFLAGS `$DTK_CONFIG --cflags $bits`"
        CPPFLAGS="$CPPFLAGS `$DTK_CONFIG --include`"
        LDFLAGS="$LDFLAGS -L`$DTK_CONFIG --lib-dir $bits`"
        LIBS="$LIBS -ldtk"

        HAVE_DTK='N'

        # Determine if the installed DTK library is usable.
        AC_CACHE_CHECK(for dtkMath_matrixPrint in -ldtk,
            ac_cv_dtkMath_matrixPrint_in_dtk,
            AC_TRY_LINK([
#include <dtk.h>
void dtkMath_matrixPrint(FILE *file, dtkMath_matrix* m); ],
                        [ dtkMath_matrixPrint(0, 0); ],
                        [ ac_cv_dtkMath_matrixPrint_in_dtk='yes'
                          rm -rf ./ii_files ],
                        ac_cv_dtkMath_matrixPrint_in_dtk='no'))

        if test "x$ac_cv_dtkMath_matrixPrint_in_dtk" = "xyes" ; then
            HAVE_DTK='Y'
            DTK_INCLUDES=`$DTK_CONFIG --include`
            DTK_LDFLAGS=`$DTK_CONFIG --libs $bits`
        else
            AC_MSG_WARN(*** Cannot find DTK ***)
        fi

        CXXFLAGS="${_vjsave_CXXFLAGS}"
        CPPFLAGS="${_vjsave_CPPFLAGS}"
        LDFLAGS="${_vjsave_LDFLAGS}"
        LIBS="${_vjsave_LIBS}"

        DPP_LANG_RESTORE
    fi
# If the user wanted to compile the DTK wrapper but this script determined that
# the subsystem configuation would not allow its use, warn the user.
elif test "x${_with_dtk}" != "xno" -a "x$try_dtk" = "xno" ; then
    AC_MSG_WARN(*** DTK cannot be used with this subsystem ***)
fi


# -----------------------------------------------------------------------------
# VRPN 
# -----------------------------------------------------------------------------

# Test for the Vrpn library if the Vrpn API was enabled.
if test "x${_with_vrpn}" != "xno" ; then
   if test "x${_with_vrpn}" = "xyes" ; then
      VRPNROOT="/usr/local"
   else
      VRPNROOT="$_with_vrpn"
   fi

   _vjsave_CFLAGS="$CFLAGS"
   _vjsave_CPPFLAGS="$CPPFLAGS"
   _vjsave_LDFLAGS="$LDFLAGS"
   _vjsave_LIBS="$LIBS"

   VRPN_INCLUDES="-I$VRPNROOT/quat -I$VRPNROOT/vrpn"
#   VRPN_INCLUDES="-I$VRPNROOT/vrpn"  

   if test "x$OS_TYPE" = "xWin32" ; then
      VRPNLIBDIR='pc_win32/Debug'
   elif test "x$PLATFORM" = "xLinux" ; then
      VRPNLIBDIR='pc_linux'
   elif test "x$PLATFORM" = "xFreeBSD" ; then
      VRPNLIBDIR='pc_FreeBSD'
   elif test "x$PLATFORM" = "xAIX" ; then
      VRPNLIBDIR='powerpc_aix'
   elif test "x$PLATFORM" = "xDarwin" ; then
      VRPNLIBDIR='powerpc_macosx'
   elif test "x$PLATFORM" = "xSolaris" ; then
      case $target_cpu in
         *86)
            # Not supported by VRPN yet
            ;;
         *)
            VRPNLIBDIR='sparc_solaris'
            ;;
      esac
   elif test "x$PLATFORM" = "xIRIX" ; then
      VRPNLIBDIR='sgi_irix'
      if test "x$ABI" = "xN32" ; then
         VRPNLIBDIR="$VRPNLIBDIR.n32"	
      elif test "x$ABI" = "x64" ; then
         VRPNLIBDIR="$VRPNLIBDIR.64"	
      fi

      if test "x$ISA" = "xmips3" ; then
         VRPNLIBDIR="$VRPNLIBDIR.mips3"	
      elif test "x$ISA" = "xmips4" ; then
         VRPNLIBDIR="$VRPNLIBDIR.mips4"	
      fi
   fi

   if test "x$OS_TYPE" = "xWin32" ; then
      TEST_VRPN_LDFLAGS="/libpath:\"$VRPNROOT/quat/$VRPNLIBDIR\" /libpath:\"$VRPNROOT/vrpn/$VRPNLIBDIR\" vrpn.lib quat.lib"
   else
      # SGI link order seems to clash with default rule VRPN_LDFLAGS
      # reset below to proper value for subsequent builds.
      if test "x$PLATFORM" = "xIRIX" ; then
         TEST_VRPN_LDFLAGS="-L$VRPNROOT/quat/$VRPNLIBDIR -L$VRPNROOT/vrpn/$VRPNLIBDIR -all -lvrpn -lquat -lm"
      else
         TEST_VRPN_LDFLAGS="-L$VRPNROOT/quat/$VRPNLIBDIR -L$VRPNROOT/vrpn/$VRPNLIBDIR -lvrpn -lquat -lm"
      fi
   fi

    CPPFLAGS="$VRPN_INCLUDES $CPPFLAGS"
    LDFLAGS="$TEST_VRPN_LDFLAGS $LDFLAGS"

    vj_have_vrpn='no'

    DPP_LANG_SAVE
    DPP_LANG_CPLUSPLUS

    CPPFLAGS="$CPPFLAGS $STDFLAGS"

    # Try to link
#     AC_TRY_LINK([
# include <stdlib.h>
# include <stdio.h>
# include <signal.h>
# include <string.h>

# ifndef _WIN32
# include <strings.h>
# endif

# include <vrpn_Shared.h>
# include <vrpn_Button.h>
# ],
# [vrpn_Button_Remote * b = new vrpn_Button_Remote("");], 
#                        [ vj_have_vrpn='yes'
#                          rm -rf ./ii_files ],
#                        vj_have_vrpn='no')
   AC_CHECK_HEADER([vrpn_Button.h], [vj_have_vrpn='yes'], [vj_have_vrpn='no'])

#   AC_CHECK_LIB(vrpn, [vrpn_Button_Remote], [vj_have_vrpn='yes'],
#   [vj_have_vrpn='no'])
    CPPFLAGS="${_vjsave_CPPFLAGS}"

    DPP_LANG_RESTORE

    if test "x$vj_have_vrpn" = "xyes" ; then
       HAVE_VRPN='Y'
       VRPN_LDFLAGS="$TEST_VRPN_LDFLAGS"
    else
       HAVE_VRPN='N'
       AC_MSG_WARN([*** Did not find VRPN in $VRPNROOT ***])
    fi

    CFLAGS="${_vjsave_CFLAGS}"
    CPPFLAGS="${_vjsave_CPPFLAGS}"
    LDFLAGS="${_vjsave_LDFLAGS}"
    LIBS="${_vjsave_LIBS}"
fi


# -----------------------------------------------------------------------------
# Checks for header files.
# -----------------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h sys/ioctl.h sys/time.h termios.h unistd.h      \
                  sys/z8530.h sys/stdsyms.h])

# -----------------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
# -----------------------------------------------------------------------------
AC_TYPE_SIZE_T

# -----------------------------------------------------------------------------
# Checks for library functions.
# -----------------------------------------------------------------------------
AC_CHECK_FUNCS(strdup strerror)

# -----------------------------------------------------------------------------
# Miscellaneous checks.
# -----------------------------------------------------------------------------
DPP_INSTALLER(vrjuggler, 0644, 0755, 0755)

# -----------------------------------------------------------------------------
# Do Makefile substitutions.
# -----------------------------------------------------------------------------

# Add these C++ options when compiling with G++.
#if test "x$GXX" = "xyes" ; then
#   CXXFLAGS="-fhonor-std $CXXFLAGS"
#fi

CXXFLAGS="$CXXFLAGS $VPR_CXXFLAGS_MIN $JCCL_CXXFLAGS_MIN $GMTL_INCLUDES"
BASE_APP_LINK_FLAGS="$STDFLAGS $BASE_APP_LINK_FLAGS"
DEPEND_FLAGS="$VPR_INCLUDES_MIN $JCCL_INCLUDES_MIN $GMTL_INCLUDES"
gadget_cxxflags="$STDFLAGS"

# List the scripts gadgeteer-config will call to get flags.  This should be
# in the order used for linking.  That means the dependencies are satisfied
# right to left.
gadget_dep_scripts='jccl-config vpr-config'

# Note that we do not have to add to $gadget_cxxflags because user code
# would never need to know where the Trackd API headers live.
if test "x$TRACKD_API_INCLUDES" != "x" ; then
   INCLUDES="$INCLUDES $TRACKD_API_INCLUDES"
fi

# The same is true for DTK headers WRT $gadget_cxxflags.
if test "x$DTK_INCLUDES" != "x" ; then
   INCLUDES="$INCLUDES $DTK_INCLUDES"
fi

if test "x$LOCAL_GMTL" = "xY" ; then
   gadget_cxxflags="$gadget_cxxflags $GMTL_INCLUDES"
fi

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
#    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -w2"
    BASE_APP_LINK_FLAGS="$BASE_APP_LINK_FLAGS -J4 -all"
elif test "x$PLATFORM" = "xDarwin" ; then
    CXXFLAGS_DYNLIB="$CXXFLAGS_DYNLIB -fexport-coalesced"
    BASE_APP_LINK_FLAGS="$BASE_APP_LINK_FLAGS -flat_namespace -Wl,-bind_at_load"
elif test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
    vc_cflags='/QIfdiv /QI0f'
    vc_cxxflags='/GR /GX /EHc /QIfdiv /QI0f'
    CFLAGS="$CFLAGS $vc_cflags"
    CXXFLAGS="$CXXFLAGS $vc_cxxflags"
    BASE_APP_LINK_FLAGS="$BASE_APP_LINK_FLAGS /nologo /incremental:no"
    DBG_FLAGS="$DBG_FLAGS /MDd"
    OPT_FLAGS="$OPT_FLAGS /MD"
    gadget_cxxflags="$vc_cxxflags $gadget_cxxflags"
fi

# For makedepend(1) to work properly on HP-UX with aCC, we have to include
# these extra paths.
if test "x$PLATFORM" = "xHP" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
    DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

# Define the base path to the source directory using $(GADGETROOT_ABS) as an
# alternative to using $(srcdir).
UNIX_GADGETROOT_ABS="$GADGETROOT_ABS"

if test "x$x_libraries" != "xNONE" -a "x$x_libraries" != "x" ; then
   X_LDFLAGS="-L$x_libraries"
fi

# $APP_EXTRA_LIBS must list all the libraries need to link a VR Juggler-based
# application.
if test "x$OS_TYPE" = "xWin32" ; then
    APP_EXTRA_LIBS="$LDFLAGS $JCCL_LIBS_LD_MIN $JCCL_EXTRA_LIBS_LD_MIN $VPR_LIBS_LD_MIN $LIBS $VPR_EXTRA_LIBS_LD_MIN comctl32.lib gdi32.lib user32.lib"
    APP_EXTRA_PROF_LIBS="$APP_EXTRA_LIBS"
else
    APP_EXTRA_LIBS="$LDFLAGS $JCCL_LIBS_CC_MIN $JCCL_EXTRA_LIBS_CC_MIN $VPR_LIBS_CC_MIN $LIBS $DTK_LDFLAGS $VPR_EXTRA_LIBS_CC_MIN"
    APP_EXTRA_PROF_LIBS="$LDFLAGS $JCCL_PROF_LIBS_CC_MIN $JCCL_EXTRA_LIBS_CC_MIN $VPR_PROF_LIBS_CC_MIN $LIBS $DTK_LDFLAGS $VPR_EXTRA_LIBS_CC_MIN"

    if test "x$gadget_use_x11" = "xyes" ; then
       APP_EXTRA_LIBS="$APP_EXTRA_LIBS $X_LDFLAGS -lX11"
       APP_EXTRA_PROF_LIBS="$APP_EXTRA_PROF_LIBS $X_LDFLAGS -lX11"
    elif test "x$PLATFORM" = "xDarwin" ; then
       APP_EXTRA_LIBS="$APP_EXTRA_LIBS -framework Carbon"
       APP_EXTRA_PROF_LIBS="$APP_EXTRA_PROF_LIBS -framework Carbon"
    fi
fi

# Put together the basic information needed to compile Gadgeteer applications.
VJ_APP_COMPILER($CC, $CFLAGS, $CXX, $CXXFLAGS, $DBG_FLAGS, $OPT_FLAGS,
                GADGET_BASE_DIR, $DEFS, $INCLUDES, ${_EXTRA_FLAGS})
VJ_APP_LINKER([$CXX], [$BASE_APP_LINK_FLAGS], [$LDOPTS_DBG], [$LDOPTS_OPT],
              [GADGET_BASE_DIR], [gadget], [$APP_EXTRA_LIBS])

APP_BASE_DIR='$(topdir)/instlinks'
APP_BASE_DIR_INST='$(GADGET_BASE_DIR)'

DYLIB_DEPS="$APP_EXTRA_LIBS"
DYLIB_PROF_DEPS="$APP_EXTRA_PROF_LIBS"

if test "x$OS_TYPE" = "xUNIX" ; then
    DSO_DRIVER_DEPS="-L\$(LIBDIR) -lgadget $DYLIB_DEPS"
    TWEEK_DRIVER_DEPS="$TWEEK_LIBS_CC_MIN $TWEEK_EXTRA_LIBS_CC_MIN"

    if test "x$gadget_use_x11" = "xyes" ; then
        if test "x$x_includes" != "xNONE" -a "x$x_includes" != "x" ; then
            INCLUDES="$INCLUDES -I$x_includes"
            gadget_cxxflags="$gadget_cxxflags -I$x_includes"
        fi

        APP_EXTRA_LIBS_X11="$X_LDFLAGS -lX11"
    fi
elif test "x$OS_TYPE" = "xWin32" ; then
    DSO_DRIVER_DEPS="-libpath:\$(LIBDIR) gadget.lib $DYLIB_DEPS"
    TWEEK_DRIVER_DEPS="$TWEEK_LIBS_LD_MIN $TWEEK_EXTRA_LIBS_LD_MIN"
fi

# Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
    GADGETROOT_ABS=`dospath -p "$GADGETROOT_ABS"`
    JUGGLERROOT_ABS=`dospath -p "$JUGGLERROOT_ABS"`

    DEPEND_EXTRAS=`dospath "$DEPEND_EXTRAS"`
    INCLUDES=`dospath "$INCLUDES"`
    LIBS=`dospath "$LIBS"`
    LN_S='cp -r'
    RM_LN='rm -rf'
    MTREE_CMD=`dospath "$MTREE_CMD"`

    JDK_HOME=`dospath -p "$JDK_HOME"`

#    APP_EXTRA_LIBS=`dospath "$APP_EXTRA_LIBS"`
    APP_EXTRA_LIBS_GL=`dospath "$APP_EXTRA_LIBS_GL"`
    APP_EXTRA_LIBS_PF=`dospath "$APP_EXTRA_LIBS_PF"`
    APP_EXTRA_LIBS_OSG=`dospath "$APP_EXTRA_LIBS_OSG"`
else
    RM_LN='rm -f'
    GADGETROOT_ABS="$GADGETROOT_ABS"
    JUGGLERROOT_ABS="$JUGGLERROOT_ABS"
fi

# Information needed to generate gadgeteer-config.
case $OS_TYPE in
    UNIX)
        if test "x$GNU_LD" = "xyes" ; then
            static_begin="-Wl,-Bstatic"
            static_end="-Wl,-Bdynamic"
            gadget_ldflags_compiler="-L\$prefix/lib\$LIBBITSUF -Wl,--export-dynamic"
            gadget_ldflags_linker="-L\$prefix/lib\$LIBBITSUF --export-dynamic"
        else
            static_begin="-B static"
            static_end="-B dynamic"
            gadget_ldflags_compiler="-L\$prefix/lib\$LIBBITSUF"
            gadget_ldflags_linker="$gadget_ldflags_compiler"
        fi

        gadget_libs='-lgadget'
        gadget_prof_libs='-lgadget_p'
        gadget_extra_libs="$LDFLAGS $LIBS $DTK_LDFLAGS $APP_EXTRA_LIBS_X11"

        Gadgeteer_lib='-lgadget'
        ;;
    Win32)
        gadget_ldflags_compiler="/link /libpath:\$prefix/lib/debug "
        gadget_ldflags_linker="/libpath:\$prefix/lib/debug "
        gadget_libs='gadget.lib'
        gadget_prof_libs='gadget.lib'
        gadget_extra_libs="$LDFLAGS $LIBS $DTK_LDFLAGS comctl32.lib gdi32.lib user32.lib"

        Gadgeteer_lib='gadget.lib'
        ;;
esac

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
    gadget_n32_flags='-n32'
    gadget_64_flags='-64'
fi

gadget_extra_ldflags_compiler="$APP_EXTRA_LIBS_BEGIN"
gadget_extra_ldflags_linker="$gadget_extra_ldflags_compiler"

VJ_VERSION_GROK(VERSION)

DPP_SUBST

AC_SUBST(topdir)
AC_SUBST(UNIX_GADGETROOT_ABS)
AC_SUBST(UNIX_JUGGLERROOT_ABS)
AC_SUBST(GADGETROOT_ABS)
AC_SUBST(JUGGLERROOT_ABS)
AC_SUBST(GADGET_SHARE_DIR)
AC_SUBST(VPR_SUBSYSTEM)

AC_SUBST(EXTRA_LDFLAGS)
AC_SUBST(RM_LN)

AC_SUBST(HAVE_TWEEK_CXX)
AC_SUBST(HAVE_TWEEK_JAVA)

AC_SUBST(DTK_CONFIG)
AC_SUBST(HAVE_DTK)

AC_SUBST(HAVE_VRPN)
AC_SUBST(VRPNROOT)
AC_SUBST(VRPN_LDFLAGS)

AC_SUBST(APP_BASE_DIR)
AC_SUBST(APP_BASE_DIR_INST)

AC_SUBST(DYLIB_DEPS)
AC_SUBST(DYLIB_PROF_DEPS)
AC_SUBST(DSO_DRIVER_DEPS)
AC_SUBST(TWEEK_DRIVER_DEPS)

AC_SUBST(APP_EXTRA_LIBS_X11)

AC_SUBST(TRACKD_API_LIB_FLAGS)

AC_SUBST(static_begin)
AC_SUBST(static_end)
AC_SUBST(gadget_dep_scripts)
AC_SUBST(gadget_cxxflags)
AC_SUBST(gadget_extra_cxxflags)
AC_SUBST(gadget_ldflags_compiler)
AC_SUBST(gadget_ldflags_linker)
AC_SUBST(gadget_libs)
AC_SUBST(gadget_prof_libs)
AC_SUBST(Gadgeteer_lib)
AC_SUBST(gadget_extra_ldflags_compiler)
AC_SUBST(gadget_extra_ldflags_linker)
AC_SUBST(gadget_extra_libs)
AC_SUBST(gadget_n32_flags)
AC_SUBST(gadget_64_flags)
AC_SUBST(gadget_use_x11)

# -----------------------------------------------------------------------------
# Final file generation step.
# -----------------------------------------------------------------------------

VJ_MTREE_LIB_GEN(GADGET, mtree, $PLATFORM, $ISA)

AC_CONFIG_FILES([
   gadgeteer-config
   Makefile
   Makefile.inc
   common.defs.mk
   make.defs.mk
   cluster/Makefile
   cluster/ClusterNetwork/Makefile
   cluster/Packets/Makefile
   cluster/Plugins/Makefile
   cluster/Plugins/plugin.defs.mk
   cluster/Plugins/ApplicationDataManager/Makefile
   cluster/Plugins/RemoteInputManager/Makefile
   cluster/Plugins/StartBarrierPlugin/Makefile
   cluster/Plugins/SwapLockTCPPlugin/Makefile
   cluster/Plugins/SwapLockWiredPlugin/Makefile
   gadget/Makefile
   gadget/Devices/Makefile
   gadget/Devices/driver.defs.mk
   gadget/Devices/5DT/Makefile
   gadget/Devices/5DT/DataGlove/Makefile
   gadget/Devices/Ascension/Makefile
   gadget/Devices/Ascension/Flock/Makefile
   gadget/Devices/Ascension/MotionStar/Makefile
   gadget/Devices/EventWindow/Makefile
   gadget/Devices/Fakespace/Makefile
   gadget/Devices/Fakespace/PinchGlove/Makefile
   gadget/Devices/Immersion/Makefile
   gadget/Devices/Immersion/IBox/Makefile
   gadget/Devices/Intersense/Makefile
   gadget/Devices/Intersense/IS900/Makefile
   gadget/Devices/Intersense/IntersenseAPI/Makefile
   gadget/Devices/Logitech/Makefile
   gadget/Devices/Logitech/ThreeDMouse/Makefile
   gadget/Devices/Open/Makefile
   gadget/Devices/Open/DTK/Makefile
   gadget/Devices/Open/Trackd/Makefile
   gadget/Devices/Open/VRPN/Makefile
   gadget/Devices/Polhemus/Makefile
   gadget/Devices/Polhemus/Fastrak/Makefile
   gadget/Devices/Sim/Makefile
   gadget/Devices/Tweek/Makefile
   gadget/Devices/Tweek/Makefile.inc
   gadget/Devices/Tweek/build.xml
   gadget/Devices/VRCO/Makefile
   gadget/Devices/VRCO/TrackdAPI/Makefile
   gadget/Devices/VirtualTechnologies/Makefile
   gadget/Devices/VirtualTechnologies/CyberGlove/Makefile
   gadget/Filter/Makefile
   gadget/Filter/Position/Makefile
   gadget/Type/Makefile
   gadget/Type/EventWindow/Makefile
   gadget/Type/Position/Makefile
   gadget/Util/Makefile
   test/Makefile
   mtree/GADGET.data.dist
   mtree/GADGET.include.dist
   mtree/GADGET.install.dist
   mtree/GADGET.test.dist
   mtree/GADGET.tools.dist
   VARS.pl
   ],
   [chmod a+x gadgeteer-config])

AC_OUTPUT
