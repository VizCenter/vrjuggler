# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2002 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Base configure.in for Gadgeteer.
# -----------------------------------------------------------------------------
# This file is "compiled" by GNU autoconf to generate the configure script
# that is actually run.
# -----------------------------------------------------------------------------

AC_REVISION($Revision$)
AC_INIT(gadget/gadgetConfig.h)
AC_CONFIG_AUX_DIR(../../share/config)
AC_CONFIG_HEADER(gadget/gadgetDefines.h)
DPP_PREREQ([1.4.108])
DPP_INIT

# Generate the reconfig script first so that it's easy to run configure again
# if it fails later on.
DPP_GEN_RECONFIG

# -----------------------------------------------------------------------------
# Command-line arguments (--enable-option, --with-pkg=package_name).
# -----------------------------------------------------------------------------

# ------------------------------------------------------ #
# --enable-feature[=arg] and --disable-feature arguments #
# ------------------------------------------------------ #

DPP_STD_CPP(yes)

# -------------------------------------------- #
# --with-pkg[=arg] and --without-pkg arguments #
# -------------------------------------------- #

# Force the use of GCC as the compiler.
# NOTE: This is not fully implemented yet for any platform, but it is partially
# usable on Windows.
DPP_WITH_GCC(no)

# Build the DTK wrapper using the DTK installation found at the given path.
# There is default path.
AC_ARG_WITH(dtk,
            [  --with-dtk=<PATH>       DTK installation],
            _with_dtk="$withval", _with_dtk='no')

# Define the binary format.
DPP_ABI_SETUP

# -----------------------------------------------------------------------------
# System-dependent stuff.
# -----------------------------------------------------------------------------
DPP_WIN32_SETUP

# We use AC_CANONICAL SYSTEM so that we can find out information about the
# build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM
DPP_SYSTEM_SETUP

# Depending on the target operating system, set various command options and
# such.
case $target_os in
    # SGI running IRIX 6.*.
    irix6*)
        if test "x$USE_GCC" != "xyes" ; then
            DBG_FLAGS="$DBG_FLAGS -gslim"
        fi

        AC_DEFINE(_BSD_TYPES,)
        ;;
    # HP PA-RISC machine running HP-UX 10.20.
    hpux10.20)
        AC_DEFINE(GADGET_HPUX_VERSION, 10)
        AC_DEFINE(_INCLUDE_TERMIO,)
        AC_DEFINE(_CMA_NOWRAPPERS_,)
        ;;
    # HP PA-RISC machine running HP-UX 11.x.
    hpux11*)
        AC_DEFINE(GADGET_HPUX_VERSION, 11)
        AC_DEFINE(_INCLUDE_TERMIO,)
        AC_DEFINE(_CMA_NOWRAPPERS_,)
        ;;
    darwin1.*)
        AC_DEFINE(_BSD_TYPES,) 
        ;;
esac

# -----------------------------------------------------------------------------
# Path setup.
# -----------------------------------------------------------------------------

# $srcdir is the root directory of the juggler source tree.  To get a value for
# $GADGETROOT_ABS, we cd there and save the value of running pwd.  Then return
# to the directory where configure is being run ($topdir).
cd "$srcdir"
GADGETROOT_ABS=`pwd`

cd "$GADGETROOT_ABS/../.."
UNIX_JUGGLERROOT_ABS=`pwd`
cd "$topdir"

if test "x$CYGPATH" != "xno" ; then
   JUGGLERROOT_ABS=`cygpath -w "$UNIX_JUGGLERROOT_ABS" | sed -e 's/\\\\/\\//g'`
else
   JUGGLERROOT_ABS="$UNIX_JUGGLERROOT_ABS"
fi

# -----------------------------------------------------------------------------
# Checks for programs.
# -----------------------------------------------------------------------------
VJ_COMPILER_SETUP
VJ_PROG_CC_PROF_FLAG(yes)
VJ_PROG_CXX_PROF_FLAG(yes)

# Ensure that the C++ compiler we've found is capable of compiling the newer
# newer C++ features that we need.
DPP_CXX_NAMESPACE(AC_MSG_ERROR(*** The library requires C++ namesapce support ***))
DPP_CXX_HAVE_STD
DPP_CXX_INLINE(AC_MSG_ERROR(*** The library requires C++ inline support ***))
DPP_CXX_RTTI(AC_MSG_ERROR(*** The library requires C++ RTTI support ***))
DPP_CXX_STATIC_CAST(AC_MSG_ERROR(*** The library requires C++ static_cast<> ***))
DPP_CXX_DYNAMIC_CAST(AC_MSG_ERROR(*** The library requires C++ dynamic_cast<> ***))

# Ensure that a version of Perl greater than or equal to 5.004 is available.
DPP_PERL_VER(5.004, , , [AC_MSG_ERROR([*** Perl is required ***])])
AC_CHECK_PROG(MTREE_CMD, mtree, mtree, [\$(PERL) \$(scriptdir)/mtree.pl])
DPP_HAVE_GNU_MAKE(3.78, ,
    [AC_MSG_ERROR([*** The build system requires GNU make 3.78 or newer ***])])
DPP_BASIC_PROGS($PLATFORM, $OS_TYPE)
DPP_PROG_INSTALL

# -----------------------------------------------------------------------------
# Checks for libraries.
# -----------------------------------------------------------------------------
VPR_PATH([0.15.0], , [AC_MSG_ERROR([*** VPR required for Gadgeteer ***])])
JCCL_PATH_CXX([0.2.0], ,
              [AC_MSG_ERROR([*** JCCL C++ API required for Gadgeteer ***])])

gadsave_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $STDFLAGS"
GMTL_PATH(0.0.5, [$JUGGLERROOT_ABS/external/GMTL],
          [$JUGGLERROOT_ABS/external/GMTL], ,
          [AC_MSG_ERROR([*** GMTL required for Gadgeteer ***])])
CPPFLAGS="$gadsave_CPPFLAGS"

# If we are not using GMTL from the external directory, we have a locally
# installed copy.
if test "x$GMTL_ROOT" != "x$JUGGLERROOT_ABS/external/GMTL" ; then
    LOCAL_GMTL='Y'
fi

AC_PATH_X

# ----
# DTK
# ----
try_dtk='no'
vpr_subsystem=`$VPR_CONFIG --subsystem`
VPR_SUBSYSTEM="$vpr_subsystem"

# We can use DTK in one of the following two situations:
#     1) If the NSPR subsystem is enabled, the target platform is UNIX-based,
#        and NSPR threads are not being used.
#     2) If the POSIX subsystem is enabled.
case $vpr_subsystem in
    NSPR)
        if test "x$OS_TYPE" = "xUNIX"; then
            try_dtk='yes'
        fi
        ;;
    POSIX)
        try_dtk='yes'
        ;;
esac

# The user requested that the DTK wrapper be built, and the subsystem
# configuration is right for use with DTK.
if test "x${_with_dtk}" != "xno" -a "x$try_dtk" = "xyes" ; then
    # Try to find dtk-config unless the user has already set a value for
    # $DTK_CONFIG in their environment.
    if test "x$DTK_CONFIG" = "x" ; then
        AC_PATH_PROG(DTK_CONFIG, dtk-config, no, "${_with_dtk}/bin")
    fi

    $ If dtk-config was not found, we cannot proceed with the DTK checks.
    if test "x$DTK_CONFIG" = "xno" ; then
        AC_MSG_WARN(*** Cannot build DTK wrapper without dtk-config ***)
    $ If dtk-config was found, $DTK_CONFIG has the path to it, so we can
    # set things up to compile with DTK.
    else
        DPP_LANG_SAVE
        DPP_LANG_CPLUSPLUS

        _vjsave_CXXFLAGS="$CXXFLAGS"
        _vjsave_CPPFLAGS="$CPPFLAGS"
        _vjsave_LDFLAGS="$LDFLAGS"
        _vjsave_LIBS="$LIBS"

        # Based on the default ABI, tell $DTK_CONFIG 
        if test "x$ABI" = "xN32" ; then
            bits='n32'
        elif test "x$ABI" = "x64" ; then
            bits='64'
        fi

        DTK_ROOT=`$DTK_CONFIG --root`
        CXXFLAGS="$CXXFLAGS `$DTK_CONFIG --cflags $bits`"
        CPPFLAGS="$CPPFLAGS `$DTK_CONFIG --include`"
        LDFLAGS="$LDFLAGS -L`$DTK_CONFIG --lib-dir $bits`"
        LIBS="$LIBS -ldtk"

        HAVE_DTK='N'

        # Determine if the installed DTK library is usable.
        AC_CACHE_CHECK(for dtkMath_matrixPrint in -ldtk,
            ac_cv_dtkMath_matrixPrint_in_dtk,
            AC_TRY_LINK([
#include <dtk.h>
void dtkMath_matrixPrint(FILE *file, dtkMath_matrix* m); ],
                        [ dtkMath_matrixPrint(0, 0); ],
                        [ ac_cv_dtkMath_matrixPrint_in_dtk='yes'
                          rm -rf ./ii_files ],
                        ac_cv_dtkMath_matrixPrint_in_dtk='no'))

        if test "x$ac_cv_dtkMath_matrixPrint_in_dtk" = "xyes" ; then
            HAVE_DTK='Y'
            AC_DEFINE(GADGET_HAVE_DTK)
            DTK_INCLUDES=`$DTK_CONFIG --include`
            DTK_LDFLAGS=`$DTK_CONFIG --libs $bits`
        else
            AC_MSG_WARN(*** Cannot find DTK ***)
        fi

        CXXFLAGS="${_vjsave_CXXFLAGS}"
        CPPFLAGS="${_vjsave_CPPFLAGS}"
        LDFLAGS="${_vjsave_LDFLAGS}"
        LIBS="${_vjsave_LIBS}"

        DPP_LANG_RESTORE
    fi
# If the user wanted to compile the DTK wrapper but this script determined that
# the subsystem configuation would not allow its use, warn the user.
elif test "x${_with_dtk}" != "xno" -a "x$try_dtk" = "xno" ; then
    AC_MSG_WARN(*** DTK cannot be used with this subsystem ***)
fi

# -----------------------------------------------------------------------------
# Checks for header files.
# -----------------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h sys/ioctl.h sys/time.h termios.h unistd.h      \
                  sys/z8530.h sys/stdsyms.h])

# -----------------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
# -----------------------------------------------------------------------------
AC_TYPE_SIZE_T

# -----------------------------------------------------------------------------
# Checks for library functions.
# -----------------------------------------------------------------------------
AC_CHECK_FUNCS(strdup strerror)

# -----------------------------------------------------------------------------
# Miscellaneous checks.
# -----------------------------------------------------------------------------
DPP_INSTALLER(vrjuggler, 0644, 0755, 0755)

# -----------------------------------------------------------------------------
# Do Makefile substitutions.
# -----------------------------------------------------------------------------

# Add these C++ options when compiling with G++.
if test "x$GXX" = "xyes" ; then
#    CXXFLAGS="-fhonor-std -Wall -Werror-implicit-function-declaration $CXXFLAGS"
    CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"
fi

CXXFLAGS="$CXXFLAGS $VPR_CXXFLAGS_MIN $JCCL_CXXFLAGS_MIN $GMTL_INCLUDES"
EXTRA_LINK_FLAGS="$STDFLAGS $EXTRA_LINK_FLAGS"
DEPEND_FLAGS="$VPR_INCLUDES_MIN $JCCL_INCLUDES_MIN $GMTL_INCLUDES"
gadget_cxxflags="$STDFLAGS"

# List the scripts gadgeteer-config will call to get flags.  This should be
# in the order used for linking.  That means the dependencies are satisfied
# right to left.
gadget_dep_scripts='jccl-config vpr-config'

if test "x$DTK_INCLUDES" != "x" ; then
   INCLUDES="$INCLUDES $DTK_INCLUDES"
   gadget_cxxflags="$gadget_cxxflags $DTK_INCLUDES"
fi

if test "x$LOCAL_GMTL" = "xY" ; then
   gadget_cxxflags="$gadget_cxxflags $GMTL_INCLUDES"
fi

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -woff 1388,3322 -w2"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -J4 -all"
elif test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
    vc_flags='/W3 /GR /GX /EHc /QIfdiv /QI0f'
    CFLAGS="$CFLAGS $vc_flags"
    CXXFLAGS="$CXXFLAGS $vc_flags"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS /nologo /incremental:no"
    DBG_FLAGS="$DBG_FLAGS /MDd"
    OPT_FLAGS="$OPT_FLAGS /MD"
    gadget_cxxflags="$vc_flags $gadget_cxxflags"
fi

# For makedepend(1) to work properly on HP-UX with aCC, we have to include
# these extra paths.
if test "x$PLATFORM" = "xHP" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
    DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

# Define the base path to the source directory using $(GADGETROOT_ABS) as an
# alternative to using $(srcdir).
UNIX_GADGETROOT_ABS="$GADGETROOT_ABS"

# $APP_EXTRA_LIBS must list all the libraries need to link a VR Juggler-based
# application.
if test "x$OS_TYPE" = "xWin32" ; then
    APP_EXTRA_LIBS="$LDFLAGS $JCCL_LIBS_LD_MIN $JCCL_EXTRA_LIBS_LD_MIN $VPR_LIBS_LD_MIN $LIBS $VPR_EXTRA_LIBS_LD_MIN"
    APP_EXTRA_PROF_LIBS="$APP_EXTRA_LIBS"
else
    APP_EXTRA_LIBS="$LDFLAGS $JCCL_LIBS_CC_MIN $JCCL_EXTRA_LIBS_CC_MIN $VPR_LIBS_CC_MIN $LIBS $DTK_LDFLAGS $VPR_EXTRA_LIBS_CC_MIN"
    APP_EXTRA_PROF_LIBS="$LDFLAGS $JCCL_PROF_LIBS_CC_MIN $JCCL_EXTRA_LIBS_CC_MIN $VPR_PROF_LIBS_CC_MIN $LIBS $DTK_LDFLAGS $VPR_EXTRA_LIBS_CC_MIN"

    if test "x$PLATFORM" = "xDarwin" ; then
       APP_EXTRA_LIBS="$APP_EXTRA_LIBS -framework Carbon"
       APP_EXTRA_PROF_LIBS="$APP_EXTRA_PROF_LIBS -framework Carbon"
    fi
fi

# Put together the basic information needed to compile Gadgeteer applications.
VJ_APP_COMPILER($CC, $CFLAGS, $CXX, $CXXFLAGS, $DBG_FLAGS, $OPT_FLAGS,
                GADGET_BASE_DIR, $DEFS, $INCLUDES, ${_EXTRA_FLAGS})
VJ_APP_LINKER($CXX, $EXTRA_LINK_FLAGS, $LDOPTS_DBG, $LDOPTS_OPT,
              GADGET_BASE_DIR, gadget, $APP_EXTRA_LIBS)

APP_BASE_DIR='$(topdir)/instlinks'
APP_BASE_DIR_INST='$(GADGET_BASE_DIR)'

DYLIB_DEPS="$APP_EXTRA_LIBS"
DYLIB_PROF_DEPS="$APP_EXTRA_PROF_LIBS"

if test "$OS_TYPE" = "UNIX" ; then
    if test "x$x_includes" != "xNONE" -a "x$x_includes" != "x" ; then
        INCLUDES="$INCLUDES -I$x_includes"
        gadget_cxxflags="$gadget_cxxflags -I$x_includes"
    fi

    if test "x$x_libraries" != "xNONE" -a "x$x_libraries" != "x" ; then
        X_LDFLAGS="-L$x_libraries"
    fi

    APP_EXTRA_LIBS_X11="$X_LDFLAGS -lX11 -lXext"
fi

# Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
    GADGETROOT_ABS=`unix2dos -p "$GADGETROOT_ABS"`
    JUGGLERROOT_ABS=`unix2dos -p "$JUGGLERROOT_ABS"`

    DEPEND_EXTRAS=`unix2dos "$DEPEND_EXTRAS"`
    INCLUDES=`unix2dos "$INCLUDES"`
    LIBS=`unix2dos "$LIBS"`
    LN_S='cp -r'
    RM_LN='rm -rf'
    MTREE_CMD=`unix2dos "$MTREE_CMD"`

    JDK_HOME=`unix2dos -p "$JDK_HOME"`

#    APP_EXTRA_LIBS=`unix2dos "$APP_EXTRA_LIBS"`
    APP_EXTRA_LIBS_GL=`unix2dos "$APP_EXTRA_LIBS_GL"`
    APP_EXTRA_LIBS_PF=`unix2dos "$APP_EXTRA_LIBS_PF"`
    APP_EXTRA_LIBS_OSG=`unix2dos "$APP_EXTRA_LIBS_OSG"`
else
    RM_LN='rm -f'
    GADGETROOT_ABS="$GADGETROOT_ABS"
    JUGGLERROOT_ABS="$JUGGLERROOT_ABS"
fi

# Information needed to generate gadgeteer-config.
case $OS_TYPE in
    UNIX)
        if test "x$GXX" = "xyes" ; then
            static_begin="-Wl,-Bstatic"
            static_end="-Wl,-Bdynamic"
        else
            static_begin="-B static"
            static_end="-B dynamic"
        fi

        gadget_ldflags_compiler="-L\$prefix/lib\$LIBBITSUF"
        gadget_ldflags_linker="$gadget_ldflags_compiler"
        gadget_libs='-lgadget'
        gadget_prof_libs='-lgadget_p'
        gadget_extra_libs="$LDFLAGS $LIBS $DTK_LDFLAGS $APP_EXTRA_LIBS_X11"

        Gadgeteer_lib='-lgadget'
        ;;
    Win32)
        gadget_ldflags_compiler="/link /libpath:\$prefix/lib/debug "
        gadget_ldflags_linker="/libpath:\$prefix/lib/debug "
        gadget_libs='gadget.lib'
        gadget_prof_libs='gadget.lib'
        gadget_extra_libs="$LDFLAGS $LIBS $DTK_LDFLAGS"

        Gadgeteer_lib='gadget.lib'
        ;;
esac

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
    gadget_n32_flags='-n32'
    gadget_64_flags='-64'
fi

gadget_extra_ldflags_compiler="$APP_EXTRA_LIBS_BEGIN"
gadget_extra_ldflags_linker="$gadget_extra_ldflags_compiler"

VJ_VERSION_GROK(VERSION)

DPP_SUBST

AC_SUBST(topdir)
AC_SUBST(UNIX_GADGETROOT_ABS)
AC_SUBST(UNIX_JUGGLERROOT_ABS)
AC_SUBST(GADGETROOT_ABS)
AC_SUBST(JUGGLERROOT_ABS)
AC_SUBST(GADGET_SHARE_DIR)
AC_SUBST(VPR_SUBSYSTEM)

AC_SUBST(RM_LN)
AC_SUBST(EXTRA_LINK_FLAGS)

AC_SUBST(DTK_CONFIG)
AC_SUBST(HAVE_DTK)

AC_SUBST(APP_BASE_DIR)
AC_SUBST(APP_BASE_DIR_INST)

AC_SUBST(DYLIB_DEPS)
AC_SUBST(DYLIB_PROF_DEPS)

AC_SUBST(APP_EXTRA_LIBS_X11)

AC_SUBST(static_begin)
AC_SUBST(static_end)
AC_SUBST(gadget_dep_scripts)
AC_SUBST(gadget_cxxflags)
AC_SUBST(gadget_extra_cxxflags)
AC_SUBST(gadget_ldflags_compiler)
AC_SUBST(gadget_ldflags_linker)
AC_SUBST(gadget_libs)
AC_SUBST(gadget_prof_libs)
AC_SUBST(Gadgeteer_lib)
AC_SUBST(gadget_extra_ldflags_compiler)
AC_SUBST(gadget_extra_ldflags_linker)
AC_SUBST(gadget_extra_libs)
AC_SUBST(gadget_n32_flags)
AC_SUBST(gadget_64_flags)

# -----------------------------------------------------------------------------
# Final file generation step.
# -----------------------------------------------------------------------------

VJ_MTREE_LIB_GEN(GADGET, mtree, $PLATFORM, $ISA)

AC_OUTPUT(gadgeteer-config
          Makefile
          Makefile.inc
          common.defs.mk
          make.defs.mk
          gadget/Makefile
          gadget/Devices/Makefile
          gadget/Devices/5DT/Makefile
          gadget/Devices/Ascension/Makefile
          gadget/Devices/Fakespace/Makefile
          gadget/Devices/Immersion/Makefile
          gadget/Devices/Intersense/Makefile
          gadget/Devices/Keyboard/Makefile
          gadget/Devices/Logitech/Makefile
          gadget/Devices/Open/Makefile
          gadget/Devices/Open/DTK/Makefile
          gadget/Devices/Open/Trackd/Makefile
          gadget/Devices/Polhemus/Makefile
          gadget/Devices/Sim/Makefile
          gadget/Devices/VirtualTechnologies/Makefile
          gadget/RemoteInputManager/Makefile
          gadget/Type/Makefile
          gadget/Util/Makefile
          test/Makefile
          mtree/GADGET.data.dist
          mtree/GADGET.include.dist
          mtree/GADGET.install.dist
          mtree/GADGET.test.dist
          VARS.pl,
    [chmod a+x gadgeteer-config])

cat <<BUILD_INFO

 Remember that you need to build Gadgeteer with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the Gadgeteer
 distribution.

BUILD_INFO
