# **************** <Tweek heading BEGIN do not edit this line> ****************
# Tweek
# 
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
# **************** <Tweek heading END do not edit this line> ******************

# ************** <auto-copyright.pl BEGIN do not edit this line> **************
# 
#  VR Juggler is (C) Copyright 1998-2003 by Iowa State University
# 
#  Original Authors:
#    Allen Bierbaum, Christopher Just,
#    Patrick Hartling, Kevin Meinert,
#    Carolina Cruz-Neira, Albert Baker
# 
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Library General Public
#  License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
# 
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Library General Public License for more details.
# 
#  You should have received a copy of the GNU Library General Public
#  License along with this library; if not, write to the
#  Free Software Foundation, Inc., 59 Temple Place - Suite 330,
#  Boston, MA 02111-1307, USA.
# 
# ************** <auto-copyright.pl END do not edit this line> ****************

AC_REVISION($Revision$)
AC_INIT(tweek/tweekConfig.h)
AC_CONFIG_AUX_DIR(../../share/config)
AC_CONFIG_HEADER(tweek/tweekDefines.h)
DPP_PREREQ([1.5.1])
DPP_INIT

DPP_GEN_RECONFIG

DPP_STD_CPP(yes)

#AC_ARG_ENABLE(jdk-orb,
#              [  --enable-jdk-orb        Use Java IDL (requires JDK 1.4) [default=no]],
#              _enable_jdk_orb="$enable_val", _enable_jdk_orb='no')

# Override the C compiler that configure would otherwise find itself.
AC_ARG_WITH(cc, [  --with-cc=<PATH>        Alternate C compiler ],
            _alt_cc="$withval", _alt_cc='none')

# Override the C++ compiler that configure would otherwise find itself.
AC_ARG_WITH(cxx, [  --with-cxx=<PATH>       Alternate C++ compiler ],
            _alt_cxx="$withval", _alt_cxx='none')

AC_ARG_WITH(cxx-orb,
            [  --with-cxx-orb=<NAME>   Name of C++ ORB to use          [default=omniORB3]
                          Allowed values are:
                            omniORB3, omniORB4],
            cxx_orb_name="$withval", cxx_orb_name='omniORB3')

AC_ARG_WITH(cxx-orb-root,
            [  --with-cxx-orb-root=<PATH>                              [default=/usr]
                          Root directory of C++ ORB
                          installation],
            cxx_orb_root="$withval", cxx_orb_root='/usr')

AC_ARG_WITH(cxx-orb-bin,
            [  --with-cxx-orb-bin=<PATH>                               [default=/usr/bin]
                          Path to C++ ORB executables],
            cxx_orb_bin_dir="$withval", cxx_orb_bin_dir='none')

AC_ARG_WITH(cxx-orb-lib,
            [  --with-cxx-orb-lib=<PATH>                               [default=/usr/lib]
                          Path to C++ ORB libraries],
            cxx_orb_lib_dir="$withval", cxx_orb_lib_dir='none')

AC_ARG_WITH(java-orb,
            [  --with-java-orb=<NAME>  Name of Java ORB to use         [default=OpenORB]
                          Allowed values are:
                            JDK, OpenORB, JacORB],
            java_orb_name="$withval", java_orb_name='OpenORB')

AC_ARG_WITH(java-orb-jar,
            [  --with-java-orb-jar=<PATH>
                          Path to Java ORB JAR file(s)],
            JAVA_ORB_JAR="$withval", JAVA_ORB_JAR='none')

AC_ARG_WITH(idl-java,
            [  --with-idl-java=<PATH>  Path to Java IDL compiler ],
            _idl_java="$withval", _idl_java='no')

AC_ARG_WITH(jdom, [  --with-jdom=<PATH>      Path to JDOM JAR file(s) ],
            JDOM_JAR="$withval", JDOM_JAR='none')

AC_ARG_WITH(junit, [  --with-junit=<PATH>     Path to JUnit JAR file(s) ],
            JUNIT_JAR="$withval", JUNIT_JAR='none')

AC_ARG_ENABLE(extensions,
              [  --enable-extensions     Build in Tweek extensions       [default=yes]],
              use_tweek_extensions="$enableval", use_tweek_extensions='yes')

DPP_ABI_SETUP

# -----------------------------------------------------------------------------
# System-dependent stuff.
# -----------------------------------------------------------------------------

# Define macros and helpers useful when working in a Win32/DOS-based
# environment.
DPP_WIN32_SETUP

# We use AC_CANONICAL SYSTEM so that we can find out information about the
# build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM
DPP_SYSTEM_SETUP

# Depending on the target operating system, set various command options and
# such.
case $target_os in
   # IBM RS/6000 running AIX.
   aix4*)
      AC_DEFINE(__aix__)
      AC_DEFINE(__powerpc__)
      AC_DEFINE(__OSVERSION__, 4)
      EXTRA_DEFS="$EXTRA_DEFS -D__aix__ -D__powerpc__ -D__OSVERSION__=4"
      ;;
   # i386-class machine running Windows {98,NT} with Cygnus GNU-Win32.
   cygwin)
      AC_DEFINE(__WIN32__)
      AC_DEFINE(__x86__)
      EXTRA_DEFS="$EXTRA_DEFS -D__WIN32__ -D__x86__"

      if test "x$PLATFORM" = "xWinNT" ; then
         AC_DEFINE(__NT__)
         EXTRA_DEFS="$EXTRA_DEFS -D__NT__"

         _sys_name=`uname -s`
         case "${_sys_name}" in
            *NT-4*)
               AC_DEFINE(__OSVERSION__, 4)
               EXTRA_DEFS="$EXTRA_DEFS -D__OSVERSION__=4"
               ;;
            *NT-5*)
               AC_DEFINE(__OSVERSION__, 5)
               EXTRA_DEFS="$EXTRA_DEFS -D__OSVERSION__=5"
               ;;
         esac
      fi
      ;;
   # Darwin (aka MacOS X).
   darwin*)
      AC_DEFINE(__darwin__)
      EXTRA_DEFS="$EXTRA_DEFS -D__darwin__"

      case $target_cpu in
         powerpc)
            AC_DEFINE(__powerpc__)
            EXTRA_DEFS="$EXTRA_DEFS -D__powerpc__"
            ;;
         *86)
            AC_DEFINE(__x86__)
            EXTRA_DEFS="$EXTRA_DEFS -D__x86__"
            ;;
      esac

      case $target_os in
         darwin1*)
            AC_DEFINE(__OSVERSION__, 1)
            EXTRA_DEFS="$EXTRA_DEFS -D__OSVERSION__=1"
            ;;
         darwin6*)
            AC_DEFINE(__OSVERSION__, 6)
            EXTRA_DEFS="$EXTRA_DEFS -D__OSVERSION__=6"
            ;;
      esac
      ;;
   # A machine running FreeBSD.
   freebsd*)
      AC_DEFINE(__freebsd__)
      EXTRA_DEFS="$EXTRA_DEFS -D__freebsd__"

      case $target_cpu in
         *86)
            AC_DEFINE(__x86__)
            EXTRA_DEFS="$EXTRA_DEFS -D__x86__"
            ;;
         alpha)
            AC_DEFINE(__alpha__)
            EXTRA_DEFS="$EXTRA_DEFS -D__alpha__"
            ;;
         sparc)
            AC_DEFINE(__sparc__)
            EXTRA_DEFS="$EXTRA_DEFS -D__sparc__"
            ;;
      esac

      case $target_os in
         # FreeBSD 3.x.
         freebsd3*)
            AC_DEFINE(__OSVERSION__, 3)
            EXTRA_DEFS="$EXTRA_DEFS -D__OSVERSION__=3"
         ;;
         # FreeBSD 4.x.
         freebsd4*)
            AC_DEFINE(__OSVERSION__, 4)
            EXTRA_DEFS="$EXTRA_DEFS -D__OSVERSION__=4"
         ;;
         # FreeBSD 5.x.
         freebsd5*)
            AC_DEFINE(__OSVERSION__, 5)
            EXTRA_DEFS="$EXTRA_DEFS -D__OSVERSION__=5"
         ;;
      esac

      ;;
   # HP PA-RISC machine running HP-UX.20.
   hpux*)
      AC_DEFINE(__hpux__)
      AC_DEFINE(__hppa__)
      EXTRA_DEFS="$EXTRA_DEFS -D__hpux__ -D__hppa__"

      case $target_os in
         # HP-UX 10.20.
         hpux10.20)
            AC_DEFINE(__OSVERSION__, 10)
            EXTRA_DEFS="$EXTRA_DEFS -D__OSVERSION__=10"
         ;;
         # HP-UX 11.
         hpux11*)
            AC_DEFINE(__OSVERSION__, 11)
            EXTRA_DEFS="$EXTRA_DEFS -D__OSVERSION__=11"
         ;;
      esac

      ;;
   # SGI running IRIX 6.*.
   irix6*)
      AC_DEFINE(__irix__)
      AC_DEFINE(__mips__)
      AC_DEFINE(__OSVERSION__, 6)
      EXTRA_DEFS="$EXTRA_DEFS -D__irix__ -D__mips__ -D__OSVERSION__=6"
      ;;
   # A machine running Linux.
   linux*)
      AC_DEFINE(__linux__)
      AC_DEFINE(__OSVERSION__, 2)
      EXTRA_DEFS="$EXTRA_DEFS -D__linux__ -D__OSVERSION__=2"

      case $target_cpu in
         *86)
            AC_DEFINE(__x86__)
            EXTRA_DEFS="$EXTRA_DEFS -D__x86__"
            ;;
         alpha)
            AC_DEFINE(__alpha__)
            EXTRA_DEFS="$EXTRA_DEFS -D__alpha__"
            ;;
         sparc)
            AC_DEFINE(__sparc__)
            EXTRA_DEFS="$EXTRA_DEFS -D__sparc__"
            ;;
         mips)
            AC_DEFINE(__mips__)
            EXTRA_DEFS="$EXTRA_DEFS -D__mips__"
            ;;
      esac
      ;;
   # DEC Alpha running Digital UNIX 4.x.
   osf4*)
      AC_DEFINE(__osf1__)
      AC_DEFINE(__alpha__)
      AC_DEFINE(__OSVERSION__, 4)
      EXTRA_DEFS="$EXTRA_DEFS -D__osf1__ -D__alpha__ -D__OSVERSION__=4"
      ;;
   # A machine running Solaris 2.x (aka SunOS 5.x).
   solaris2*)
      AC_DEFINE(__sunos__)
      AC_DEFINE(__OSVERSION__, 5)
      EXTRA_DEFS="$EXTRA_DEFS -D__sunos__ -D__OSVERSION__=5"

      case $target_cpu in
         *86)
            AC_DEFINE(__x86__)
            EXTRA_DEFS="$EXTRA_DEFS -D__x86__"
            ;;
         sparc)
            AC_DEFINE(__sparc__)
            EXTRA_DEFS="$EXTRA_DEFS -D__sparc__"
            ;;
      esac
      ;;
esac

# -----------------------------------------------------------------------------
# Path setup.
# -----------------------------------------------------------------------------

# $srcdir is the root directory of the juggler source tree.  To get a value
# for $TWEEKROOT_ABS, we cd there and save the value of running pwd.  Then
# return to the directory where configure is being run ($topdir).
cd "$srcdir"
UNIX_TWEEKROOT_ABS=`pwd`

cd "$UNIX_TWEEKROOT_ABS/../.."
UNIX_JUGGLERROOT_ABS=`pwd`
cd "$topdir"

if test "x$CYGPATH" != "xno" ; then
   TWEEKROOT_ABS=`dospath -p "$UNIX_TWEEKROOT_ABS"`
   JUGGLERROOT_ABS=`dospath -p "$UNIX_JUGGLERROOT_ABS"`
else
   TWEEKROOT_ABS="$UNIX_TWEEKROOT_ABS"
   JUGGLERROOT_ABS="$UNIX_JUGGLERROOT_ABS"
fi

# -----------------------------------------------------------------------------
# Checks for programs.
# -----------------------------------------------------------------------------
VJ_COMPILER_SETUP
VJ_PROG_CC_PROF_FLAG(yes)
VJ_PROG_CXX_PROF_FLAG(yes)

if test "x$DPP_USING_MSVCCC" = "xyes" ; then
   AR='$(CXX) /link /lib'
   LD='$(CXX) /link /dll'
fi

# Ensure that the C++ compiler we've found is capable of compiling the newer
# newer C++ features that we need.
DPP_CXX_NAMESPACE(AC_MSG_ERROR(*** Tweek requires C++ namesapce support ***))
DPP_CXX_EXCEPTIONS(AC_MSG_ERROR(*** Tweek requires C++ exception support ***))
DPP_CXX_HAVE_STD

# Ensure that a version of Perl greater than or equal to 5.004 is available.
DPP_PERL_VER([5.004], , , [AC_MSG_ERROR([*** Perl is required ***])])
AC_CHECK_PROG([MTREE_CMD], [mtree], [mtree], [\$(PERL) \$(scriptdir)/mtree.pl])
DPP_HAVE_GNU_MAKE([3.78], ,
   [AC_MSG_ERROR([*** The build system requires GNU make 3.78 or newer ***])])
DPP_BASIC_PROGS([$PLATFORM], [$OS_TYPE])
DPP_PROG_INSTALL

BUILD_JAVA='Y'

# Check for the JDK.
DPP_PATH_JAVA( , [tweek_have_java='Y'],
              [tweek_have_java='N'
               BUILD_JAVA='N'])

if test "x$tweek_have_java" = "xY" ; then
   DPP_JDK_VERSION([$JDK_HOME], [1.3], ,
      [ BUILD_JAVA='N'
        AC_MSG_WARN([*** JDK 1.3 or newer required for Tweek Java API ***])
      ])

   if test "x$BUILD_JAVA" = "xY" ; then
      DPP_CHECK_JAVA_STATIC_METHOD(org.jdom.Namespace,
         getNamespace(uri), [String uri = new String("test")], ,
         [ AC_MSG_WARN(*** JDOM required for Tweek Java API ***)
           BUILD_JAVA='N' ],
         $JDOM_JAR)
   fi

   # If we are building the Tweek Java code, we should try to enable building
   # the Java test suite too.
   if test "x$BUILD_JAVA" = "xY" ; then
      DPP_CHECK_JAVA_STATIC_METHOD(junit.framework.Assert, assertTrue(true), ,
         BUILD_JAVA_TEST_SUITE='Y',
         [ AC_MSG_WARN(*** JUnit required for Tweek Java test suite ***)
           BUILD_JAVA_TEST_SUITE='N' ],
         $JUNIT_JAR)
   fi
fi

# Check for the ant build program
if test "x$BUILD_JAVA" = "xY"; then
   ANT_HOME=$UNIX_JUGGLERROOT_ABS/external/ant
   AC_PATH_PROG([ANT], [ant], [no], [${ANT_HOME}/bin])
   if test "x$ANT" == "xno"; then
      AC_MSG_WARN([*** Can't find the java build tool ant. The Tweek Java API will not be built ***])
      BUILD_JAVA='N'
   else
      ANT="JAVA_HOME=\"$JDK_HOME\" \"$ANT\""
   fi
fi

# -----------------------------------------------------------------------------
# Checks for libraries.
# -----------------------------------------------------------------------------
VPR_PATH([0.23.2], , [AC_MSG_ERROR([*** VPR required for Tweek C++ API ***])])
VPR_SUBSYSTEM=`$VPR_CONFIG --subsystem`

# Find omniORB.  This one is a beast.
setup_omniORB ( )
{
   OMNI_VER="$1"

   if test "x$cxx_orb_bin_dir" = "xnone" ; then
      OMNI_BIN_DIR="$cxx_orb_root/bin"
   else
      OMNI_BIN_DIR="$cxx_orb_bin_dir"
   fi

   if test "x$cxx_orb_lib_dir" = "xnone" ; then
      OMNI_LIB_DIR="$cxx_orb_root/lib"
   else
      OMNI_LIB_DIR="$cxx_orb_lib_dir"
   fi

   tweek_omni_lib="omniORB$OMNI_VER"
   tweek_extra_libs=`$VPR_CONFIG --extra-libs`

   if test "x$cxx_orb_root" != "x/usr" ; then
      CPPFLAGS="$CPPFLAGS -I$cxx_orb_root/include"
   fi

   AC_CHECK_HEADER(omniORB$OMNI_VER/omniORB.h, ,
      [AC_MSG_WARN([*** $cxx_orb_name required for Tweek C++ API ***])
       BUILD_CXX='N'
      ])

   if test "x$BUILD_CXX" != "xN" ; then
      if test "x$OMNI_LIB_DIR" != "x/usr/lib" ; then
         LDFLAGS="$LDFLAGS -L$OMNI_LIB_DIR"
      fi

      if test "x$OS_TYPE" = "xWin32" ; then
         # XXX: This is utterly pathetic.  What I really want is a way to get
         # the full omniORB version number and use it to figure out these file
         # names.
         orb_rt_file=`ls $OMNI_LIB_DIR/omniORB*_rt.lib`
         thread_rt_file=`ls $OMNI_LIB_DIR/omnithread*_rt.lib`
         dynamic_rt_file=`ls $OMNI_LIB_DIR/omniDynamic*_rt.lib`

         # XXX: More hackery.  This strips off the path to the .lib files
         # along with the .lib extension.  This is needed so that our wrapper
         # around MSVC++ can translate the -l<libname> argument correctly.
         orb_rt=`basename $orb_rt_file | sed -e 's/.lib$//'`
         thread_rt=`basename $thread_rt_file | sed -e 's/.lib$//'`
         dynamic_rt=`basename $dynamic_rt_file | sed -e 's/.lib$//'`

         omni_win32_libs="-l$orb_rt -l$thread_rt -l$dynamic_rt -lws2_32 -ladvapi32"
         changequote(<<, >>)
         omni_win32_link_args=`echo $omni_win32_libs | sed -e 's/-l\([^ ][^ ]*\)/\1.lib/g'`
         changequote([, ])
         LIBS="$LIBS $omni_win32_libs"
      else
         LIBS="$LIBS -l$tweek_omni_lib -lomnithread $tweek_extra_libs"
      fi

      if test "x$OMNI_VER" = "x3" ; then
         LIBS="$LIBS -lomniGK_stub"
      fi

      # XXX: This is a hack to deal with omniORB 4.0.0 not compiling out of
      # the box on IRIX.
      if test "x$OMNI_VER" = "x4" -a "x$PLATFORM" = "xIRIX" ; then
         EXTRA_DEFS="$EXTRA_DEFS -DOMNI_REQUIRES_FQ_BASE_CTOR"
      fi

      DPP_LANG_SAVE
      DPP_LANG_CPLUSPLUS

      tweek_save_CPPFLAGS="$CPPFLAGS"
      CPPFLAGS="$CPPFLAGS $EXTRA_DEFS"

      AC_CACHE_CHECK([for CORBA::ORB_init in -l$tweek_omni_lib],
         [tweek_cv_CORBA__ORB_init_in_omniORB],
         [AC_TRY_LINK([
#include <omniORB$OMNI_VER/CORBA.h>

int omni_main_i(int argc, char** const argv)
{
   CORBA::ORB_init(argc, argv, "omniORB$OMNI_VER");
   return 0;
}],
                     [omni_main_i(0, NULL);],
                     [ tweek_cv_CORBA__ORB_init_in_omniORB='yes'
                       rm -rf ./ii_files ],
                     [tweek_cv_CORBA__ORB_init_in_omniORB='no'])])

      CPPFLAGS="$tweek_save_CPPFLAGS"

      DPP_LANG_RESTORE

      if test "x$OS_TYPE" = "xWin32" ; then
         OMNI_BIN_DIR_UNIX=`unixpath "$OMNI_BIN_DIR"`
         omniidl_search_path="${OMNI_BIN_DIR_UNIX}:${PATH}"
      else
         omniidl_search_path="${OMNI_BIN_DIR}:${PATH}"
      fi

      AC_PATH_PROG(CXX_IDL, omniidl, no, [$omniidl_search_path])

      if test "x$CXX_IDL" = "xno" ; then
         AC_MSG_WARN([*** $cxx_orb_name required for Tweek C++ API ***])
         BUILD_CXX='N'
      else
         CXX_IDL_OPTS='-bcxx -Wbh=.h,s=.cpp'
         CXX_IDL_GENDIR_OPT='-C'
         CXX_IDL_INCFLAG='-I'

         if test "x$tweek_cv_CORBA__ORB_init_in_omniORB" = "xyes" ; then
            BUILD_CXX='Y'

            if test "x$cxx_orb_root" != "x/usr" ; then
               CXX_ORB_INCLUDES="-I$cxx_orb_root/include"
            fi

            CXX_ORB_LIB="-l$tweek_omni_lib -lomnithread -lomniDynamic$OMNI_VER"
            CXX_ORB_LDFLAGS="-L$OMNI_LIB_DIR"

            if test "x$OMNI_VER" = "x3" ; then
               CXX_ORB_LIB="$CXX_ORB_LIB -lomniGK_stub"
            fi

            CXX_ORB_LIB_MSVCCC="$omni_win32_libs"
            CXX_ORB_LDFLAGS_MSVCCC="-L$OMNI_LIB_DIR"

            CXX_ORB_LIB_LINK_EXE="$omni_win32_link_args"
            CXX_ORB_LDFLAGS_LINK_EXE="/libpath:$OMNI_LIB_DIR"

            AC_DEFINE_UNQUOTED(OMNIORB_VER, $OMNI_VER)
            AC_DEFINE_UNQUOTED(TWEEK_INCLUDE_CORBA_H, <omniORB$OMNI_VER/CORBA.h>)
            AC_DEFINE_UNQUOTED(TWEEK_ORB_VER_STRING, "omniORB$OMNI_VER")
         else
            AC_MSG_WARN([*** $cxx_orb_name required for Tweek C++ API ***])
            BUILD_CXX='N'
         fi
      fi
   fi
}

# omniORB requires pthreads, and that conflicts with IRIX SPROC threads.
if test "x$VPR_SUBSYSTEM" = "xSPROC" ; then
   case $cxx_orb_name in
      omniORB*)
         AC_MSG_WARN([*** Tweek C++ API will not run with SPROC threads ***])
         BUILD_CXX='N'
         ;;
   esac
fi

# --------------------
# Find the C++ ORB.
# --------------------
if test "x$BUILD_CXX" != "xN" ; then
   tweeksave_CPPFLAGS="$CPPFLAGS"
   tweeksave_LDFLAGS="$LDFLAGS"
   tweeksave_LIBS="$LIBS"

   case $cxx_orb_name in
      omniORB3)
         setup_omniORB 3
         ;;
      omniORB4)
         setup_omniORB 4
         ;;
      *)
         AC_MSG_ERROR([Unsupported C++ ORB $cxx_orb_name!])
         ;;
   esac

   CPPFLAGS="$tweeksave_CPPFLAGS"
   LDFLAGS="$tweeksave_LDFLAGS"
   LIBS="$tweeksave_LIBS"
fi

# --------------------
# Find the Java ORB.
# --------------------
if test "x${_idl_java}" = "xno" ; then
   jacorb_dir='$(JUGGLERROOT_ABS)/external/JacORB'
   JAVA_IDL="JAVA_HOME=\"$JDK_HOME\" JACORB_PATH=\"$jacorb_dir\" \"$jacorb_dir/idl\""

   java_idl_name='JacORB'

   app_jacorb_dir='$(TWEEK_BASE_DIR)/bin'
   APP_JAVA_IDL="JAVA_HOME=$\"JDK_HOME\" JACORB_PATH=\"$app_jacorb_dir\" \"$app_jacorb_dir/idl\""
   APP_JAVA_IDL_INST="JAVA_HOME=\"$JDK_HOME\" JACORB_PATH=\"\$(TWEEK_BASE_DIR)/bin\" \"\$(TWEEK_BASE_DIR)/bin/idl\""

   config_jacorb_dir='$prefix/bin'
   config_java_idl="JAVA_HOME=\"$JDK_HOME\" JACORB_PATH=\"$config_jacorb_dir\" \"$config_jacorb_dir/idl\""
else
   # XXX: Need to support more than one IDL compiler for Java by recognizing
   # the name of the compiler and defining options for it below.  Blah.
   if test "x${_idl_java}" != "x" ; then
      AC_MSG_CHECKING([execute bit on ${_idl_java}])

      if test -x "${_idl_java}" ; then
          JAVA_IDL="${_idl_java}"
          APP_JAVA_IDL="$JAVA_IDL"
          APP_JAVA_IDL_INST="$JAVA_IDL"
          AC_MSG_RESULT(yes)
      else
          AC_MSG_RESULT(no)
      fi
   else
      JAVA_IDL='no'
   fi
fi

if test "x$JAVA_IDL" = "xno" ; then
   BUILD_JAVA='N'
   AC_MSG_WARN(*** Cannot perform IDL-to-Java conversion ***)
else
   if test "x$java_idl_name" = "xJacORB" ; then
      JAVA_IDL_OPTS=''
      JAVA_IDL_GENDIR_OPT='-d '
      JAVA_IDL_INCFLAG='-I'
   else
      JAVA_IDL_OPTS='-emitAll'
      JAVA_IDL_GENDIR_OPT='-td '
      JAVA_IDL_INCFLAG='-i '
   fi
fi
   
case $java_orb_name in
   JDK)
      # If we are going to use Java IDL, we have to have JDK 1.4 or newer so
      # that we get an ORB that supports INS.
      DPP_JDK_VERSION($JDK_HOME, 1.4, ,
         [AC_MSG_ERROR([*** JDK 1.4 or newer required for Java IDL use ***])])
      ;;
   *)
      if test "x$JAVA_ORB_JAR" != "xnone" ; then
         DPP_CHECK_JAVA_STATIC_METHOD([org.omg.CORBA.ORB],
            [init()], ,
            [ ORB_CLASS_PROP='org.openorb.CORBA.ORB'
              ORB_SINGLETON_CLASS_PROP='org.openorb.CORBA.ORBSingleton'
            ],
            [ AC_MSG_WARN([*** $java_orb_name required for Tweek GUI execution ***])
              BUILD_JAVA='N'
            ],
            [$JAVA_ORB_JAR])
      else
         AC_MSG_WARN([*** $java_orb_name required for Tweek Java API ***])
         BUILD_JAVA='N'
      fi
      ;;
esac

# Check if we want to build the Tweek extensions
BUILD_EXTENSIONS='N'
if test "x$use_tweek_extensions" != "xno" ; then
   BUILD_EXTENSIONS='Y'
fi

# -----------------------------------------------------------------------------
# Miscellaneous checks.
# -----------------------------------------------------------------------------

DPP_INSTALLER(tweek, 0644, 0755, 0755)

# Add these C++ options when compiling with G++.
if test "x$GXX" = "xyes" ; then
#   CXXFLAGS="-fhonor-std -Wall $CXXFLAGS"
   CXXFLAGS="-Wall $CXXFLAGS"
fi

# For use in linking applications.
EXTRA_LINK_FLAGS="$STDFLAGS $EXTRA_LINK_FLAGS"

tweek_idlflags_cxx="$CXX_IDL_OPTS ${CXX_IDL_INCFLAG}\$prefix/include"
tweek_idlflags_java="$JAVA_IDL_OPTS ${JAVA_IDL_INCFLAG}\$prefix/include"
tweek_idlgendir_cxx="$CXX_IDL_GENDIR_OPT"
tweek_idlgendir_java="$JAVA_IDL_GENDIR_OPT"
tweek_idl_incflag_cxx="$CXX_IDL_INCFLAG"
tweek_idl_incflag_java="$JAVA_IDL_INCFLAG"

idl_gen_dirs="tweek/CORBA"
#idl_src_dirs=''

for dir in "$idl_gen_dirs" ; do
   IDL_GEN_INCLUDES="$IDL_GEN_INCLUDES -I\$(TWEEK_BASE_DIR)/include/$dir"
   tweek_idl_gen_includes="$tweek_idl_gen_includes ${CXX_IDL_INCFLAG}\$prefix/include/$dir"
done

#for dir in "$idl_src_dirs" ; do
#   tweek_idlflags_cxx="$tweek_idlflags_cxx ${CXX_IDL_INCFLAG}\${TWEEK_BASE_DIR}/include/$dir"
#   tweek_idlflags_java="$tweek_idlflags_java ${JAVA_IDL_INCFLAG}\${prefix}/include/$dir"
#done

CXXFLAGS="$CXXFLAGS $VPR_CXXFLAGS_MIN"
INCLUDES="$INCLUDES $CXX_ORB_INCLUDES"
DEPEND_FLAGS="$VPR_INCLUDES_MIN"
tweek_cxxflags="$STDFLAGS $EXTRA_DEFS $INCLUDES $tweek_idl_gen_includes"

# List the scripts vrjuggler-config will call to get flags.  This should be
# in the order used for linking.  That means the dependencies are satisfied
# right to left.
tweek_dep_scripts="vpr-config"

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
   CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
   CXXFLAGS="$CXXFLAGS -woff 1234,1388,3303,3322 -w2"
   EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -J4 -all"
elif test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
   vc_cflags='/QIfdiv /QI0f'
   vc_cxxflags='/GR /GX /EHc /QIfdiv /QI0f'
   CFLAGS="$CFLAGS /W3 $vc_cflags"
   CXXFLAGS="$CXXFLAGS /W3 $vc_cxxflags"
   DBG_FLAGS="$DBG_FLAGS /MDd"
   OPT_FLAGS="$OPT_FLAGS /MD"
   EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS /nologo /incremental:no"
   tweek_cxxflags="$vc_cxxflags $tweek_cxxflags"
fi

if test "x$BUILD_CXX" = "xY" ; then
   tweek_cxxflags="-DTWEEK_HAVE_CXX=1 $tweek_cxxflags"
fi

# For makedepend(1) to work properly on HP-UX with aCC, we have to include
# these extra paths.
if test "x$PLATFORM" = "xHP" -a "x$USE_GCC" != "xyes" ; then
   _aCC_ROOT="/opt/aCC"
   DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
   DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

# Dependencies for applications and for dynamic/shared libraries.
if test "x$OS_TYPE" = "xWin32" ; then
   APP_EXTRA_LIBS="$LDFLAGS $CXX_ORB_LDFLAGS_LINK_EXE $CXX_ORB_LIB_LINK_EXE $VPR_LIBS_LD_MIN $LIBS $VPR_EXTRA_LIBS_LD_MIN"
   DYLIB_DEPS="$APP_EXTRA_LIBS"
   DYLIB_PROF_DEPS="$DYLIB_DEPS"
else
   APP_EXTRA_LIBS="$LDFLAGS $CXX_ORB_LDFLAGS $CXX_ORB_LIB $VPR_LIBS_CC_MIN $LIBS $VPR_EXTRA_LIBS_CC_MIN"
   DYLIB_DEPS="$APP_EXTRA_LIBS"
   DYLIB_PROF_DEPS="$LDFLAGS $CXX_ORB_LDFLAGS $CXX_ORB_LIB $VPR_PROF_LIBS_CC_MIN $LIBS $VPR_EXTRA_LIBS_CC_MIN"
fi

# Put together the basic information needed to compile Tweek applications.
VJ_APP_COMPILER($CC, $CFLAGS, $CXX, $CXXFLAGS $IDL_GEN_INCLUDES, $DBG_FLAGS,
                $OPT_FLAGS, TWEEK_BASE_DIR, $DEFS $EXTRA_DEFS, $INCLUDES,
                ${_EXTRA_FLAGS})
VJ_APP_LINKER_DOOZER(["$CXX"], ["$EXTRA_LINK_FLAGS"], ["$LDOPTS_DBG"],
                     ["$LDOPTS_OPT"], ['$(TWEEK_LIBS_MIN)'],
                     ["$APP_EXTRA_LIBS"])

APP_BASE_DIR='$(topdir)/instlinks'
APP_BASE_DIR_INST='$(TWEEK_BASE_DIR)'

# Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
   TWEEKROOT_ABS=`dospath -p "$TWEEKROOT_ABS"`
   JUGGLERROOT_ABS=`dospath -p "$JUGGLERROOT_ABS"`

   if test "x$DEPEND_EXTRAS" != "x" ; then
      DEPEND_EXTRAS=`dospath "$DEPEND_EXTRAS"`
   fi

   if test "x$INCLUDES" != "x" ; then
      INCLUDES=`dospath "$INCLUDES"`
   fi

   if test "x$LIBS" != "x" ; then
      LIBS=`dospath "$LIBS"`
   fi

   LN_S='cp -pr'
   RM_LN='rm -rf'
   MTREE_CMD=`dospath "$MTREE_CMD"`

#   APP_EXTRA_LIBS_BASIC=`dospath "$APP_EXTRA_LIBS_BASIC"`
else
   RM_LN='rm -f'
fi

# Information needed to generate tweek-config.
case $OS_TYPE in
   UNIX)
      if test "x$PLATFORM" != "xDarwin" ; then
         if test "x$GXX" = "xyes" ; then
            static_begin="-Wl,-Bstatic"
            static_end="-Wl,-Bdynamic"
         else
            static_begin="-B static"
            static_end="-B dynamic"
         fi
      fi

      tweek_ldflags_compiler="-L\$prefix/lib\$LIBBITSUF"
      tweek_ldflags_linker="$tweek_ldflags_compiler"
      tweek_libs="-ltweek"
      tweek_prof_libs="-ltweek_p"
      tweek_extra_ldflags="$EXTRA_LDFLAGS $CXX_ORB_LDFLAGS"
      tweek_extra_libs="$CXX_ORB_LIB"
      ;;
   Win32)
      tweek_ldflags_compiler="/link /libpath:\$prefix/lib/debug"
      tweek_ldflags_linker="/libpath:\$prefix/lib/debug"
      tweek_libs="tweek.lib"
      tweek_prof_libs="tweek.lib"
      tweek_extra_ldflags="$EXTRA_LDFLAGS $CXX_ORB_LDFLAGS_LINK_EXE"
      tweek_extra_libs="$CXX_ORB_LIB_LINK_EXE"
      ;;
esac

tweek_extra_cxxflags=''
tweek_extra_include_dirs=''

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
   tweek_n32_flags='-n32'
   tweek_64_flags='-64'
fi

jars='Tweek.jar TweekBeans.jar TweekEvents.jar TweekNet.jar TweekBeanDelivery.jar TweekServices.jar kunststoff-mod.jar metouia.jar'
ext_jars='wizard.jar ui.jar'

if test "x$JDOM_JAR" != "xnone" ; then
   VJ_STRIP_JAR_PATH(strip_jdom, [$JDOM_JAR])
   jars="$jars $strip_jdom"
fi

if test "x$JAVA_ORB_JAR" != "xnone" ; then
   VJ_STRIP_JAR_PATH(strip_java_orb, [$JAVA_ORB_JAR])
   jars="$jars $strip_java_orb"
fi

# The following takes a space-separated list of JAR files and creates a new
# list separated by $JCPS.  Each file in the list is named by an absolute path
# of ${prefix}/bin/<file>.jar.  The variable ${prefix} is expanded when
# tweek-config is executed.
changequote(<<, >>)
tweek_java_api_jars=`echo "$jars" | sed -e 's/\([A-Za-z0-9_][A-Za-z0-9_.-]*\.jar\)/${prefix}\/bin\/\1/g' -e "s/ /$JCPS/g"`
tweek_ext_jars=`echo "$ext_jars" | sed -e 's/\([a-z][a-z]*\.jar\)/${prefix}\/bin\/\1/g' -e "s/ /$JCPS/g"`
changequote([, ])

VJ_VERSION_GROK(VERSION)

DPP_SUBST

# Export variables defined above.
AC_SUBST(topdir)
AC_SUBST(UNIX_TWEEKROOT_ABS)
AC_SUBST(UNIX_JUGGLERROOT_ABS)
AC_SUBST(TWEEKROOT_ABS)
AC_SUBST(JUGGLERROOT_ABS)

AC_SUBST(BUILD_CXX)
AC_SUBST(CXX_IDL_OPTS)
AC_SUBST(CXX_IDL_GENDIR_OPT)
AC_SUBST(CXX_IDL_INCFLAG)
AC_SUBST(JAVA_IDL)
AC_SUBST(JAVA_IDL_OPTS)
AC_SUBST(JAVA_IDL_GENDIR_OPT)
AC_SUBST(JAVA_IDL_INCFLAG)
AC_SUBST(EXTRA_DEFS)
AC_SUBST(EXTRA_LINK_FLAGS)
AC_SUBST(RM_LN)
AC_SUBST(VPR_SUBSYSTEM)

AC_SUBST(BUILD_JAVA)
AC_SUBST(JDOM_JAR)
AC_SUBST(JAVA_ORB_JAR)

AC_SUBST(BUILD_JAVA_TEST_SUITE)
AC_SUBST(JUNIT_JAR)

AC_SUBST(BUILD_EXTENSIONS)

AC_SUBST(ORB_CLASS_PROP)
AC_SUBST(ORB_SINGLETON_CLASS_PROP)

AC_SUBST(config_java_idl)

AC_SUBST(APP_JAVA_IDL)
AC_SUBST(APP_JAVA_IDL_INST)
AC_SUBST(APP_BASE_DIR)
AC_SUBST(APP_BASE_DIR_INST)
AC_SUBST(APP_EXTRA_FLAGS)
AC_SUBST(APP_TWEEK_LIBS_BEGIN)
AC_SUBST(APP_TWEEK_LIBS_END)
AC_SUBST(APP_TWEEK_LIBS_BASIC)
AC_SUBST(APP_TWEEK_LIBS_BEGIN_INST)
AC_SUBST(APP_LIBS_BASIC)
AC_SUBST(APP_EXTRA_LIBS_BEGIN)
AC_SUBST(APP_EXTRA_LIBS_END)
AC_SUBST(APP_EXTRA_LIBS_BASIC)

AC_SUBST(DYLIB_DEPS)
AC_SUBST(DYLIB_PROF_DEPS)

AC_SUBST(static_begin)
AC_SUBST(static_end)
AC_SUBST(tweek_dep_scripts)
AC_SUBST(tweek_cxxflags)
AC_SUBST(tweek_ldflags_compiler)
AC_SUBST(tweek_ldflags_linker)
AC_SUBST(tweek_libs)
AC_SUBST(tweek_prof_libs)
AC_SUBST(tweek_extra_cxxflags)
AC_SUBST(tweek_extra_include_dirs)
AC_SUBST(tweek_extra_ldflags)
AC_SUBST(tweek_extra_libs)
AC_SUBST(tweek_n32_flags)
AC_SUBST(tweek_64_flags)
AC_SUBST(tweek_idlflags_cxx)
AC_SUBST(tweek_idl_incflag_cxx)
AC_SUBST(tweek_idlgendir_cxx)
AC_SUBST(tweek_idlflags_java)
AC_SUBST(tweek_idl_incflag_java)
AC_SUBST(tweek_idlgendir_java)
AC_SUBST(tweek_java_api_jars)
AC_SUBST(tweek_ext_jars)

# -----------------------------------------------------------------------------
# Final file generation step.
# -----------------------------------------------------------------------------

VJ_MTREE_LIB_GEN(TWEEK, mtree, $PLATFORM, $ISA)

AC_OUTPUT(tweek-config
          Makefile
          Makefile.inc
          common.defs.mk
          make.defs.mk
          tweek.appdefs.mk
          extensions/Makefile
          extensions/java/build.xml
          extensions/java/Makefile
          extensions/java/Makefile.inc
          java/build.xml
          java/Makefile
          java/Makefile.inc
          java/tweek-base.sh
          tweek/Makefile
          tweek/CORBA/Makefile
          tweek/Client/Makefile
          tweek/Util/Makefile
          tweek/idl/Makefile
          test/Makefile
          test/BeanDeliveryTest/Makefile
          test/CxxClient/Makefile
          test/FileOpenTestBean/Makefile
          test/NetworkTestBean/Makefile
          test/PrefsTestBean/Makefile
          test/TestBean/Makefile
          test/TestSuite/Makefile
          test/TestSuite/java/Makefile
          test/corba/Makefile
          mtree/TWEEK.data.dist
          mtree/TWEEK.include.dist
          mtree/TWEEK.install.dist
          mtree/TWEEK.test.dist
          VARS.pl,
   [chmod a+x tweek-config])

cat <<BUILD_INFO

 Remember that you need to build Tweek with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the Tweek distribution.

BUILD_INFO
