# -----------------------------------------------------------------------------
# $Id$
#
# This file <Makefile.base> provides variable information and targets shared
# by all Makefiles in the VR Juggler source tree.  It requires GNU make.
#
# Generated for use on @PLATFORM@
# -----------------------------------------------------------------------------
# All Makefiles in the source tree should include this file for maximum
# information sharing.
#
# ** NOTE:                                                                  **
# **   Shared targets are defined here, so any files that include this file **
# **   should define a default target BEFORE including this file.           **
# -----------------------------------------------------------------------------
# Variables defined here are:
#
# bindir          - Path to bin directory containing executables (usually
#                   ${exec_prefix}/bin).
# datadir         - Path to a directory generally sharing platform-independent
#                   data (usually ${prefix}/share).
# exec_prefix     - Path to base directory where executables will be (usually
#                   ${prefix}).
# libdir          - Path to directory containing shared and static libraries
#                   (usually ${exec_prefix}/lib).
# libexecdir      - Path to libexec directory that generally contains
#                   executables not called directly by users (usually
#                   ${exec_prefix}/libexec).
# mtreedir        - Base directory containing the mtree directory hierarchy
#                   specifications.
# mtreedir_os     - Subdirectory of ${mtreedir} containing platform-specific
#                   directory hierarchy specification files.
# prefix          - Base path used for installation and other things.
# releasedir      - The absolute path to the release directory.
# sbindir         - Path to sbin directory containing executables (usually
#                   ${exec_prefix}/sbin).
# scriptdir       - The path to the directory containing scripts used in the
#                   build and install/release process.
# sysconfdir      - System configuration directory (usually ${prefix}/etc).
# topdir          - The top of the build tree.
# VJROOT_ABS      - The absolute path to the root of the VR Juggler source
#                   tree.
#
# AR              - Path to ar(1) (or equivalent program).
# ARFLAGS         - Flags for ${AR}.
# CC              - Path to C compiler.
# CXX             - Path to C++ compiler.
# CPP             - Command for invoking the C preprocessor.
# CXXCPP          - Command for invoking the C preprocessor used by the C++
#                   compiler.
# CFLAGS          - Flags for ${CC}.
# CPPFLAGS        - Flags for ${CPP} and ${CXXCPP}.
# CXXFLAGS        - Flags for ${CXX}.
# DEFS            - Command-line preprocessor definitions (-Dvariable=value).
# DEP_GEN_FLAG    - Flag passed to the compiler to generate dependencies.
# DEPENDFLAGS     - Flags passed to makedepend(1) (or equivalent program for
#                   generating dependencies).
# DEPEND_EXTRAS   - Flags not recognized by makedepend(1) that may be
#                   necessary in ${CFLAGS} or ${CXXFLAGS}.
# GROUP_NAME      - The name of the group that will own the files.
# FILE_PERMS      - Normal file permissions.
# EXEC_PERMS      - Executable file permissions.
# DIR_PERMS       - Directory permissions.
# INCLUDES        - Additions to the include path (-I/path/to/include).
# LD              - Path to ld(1) (or equivalent program).
# LDFLAGS         - Flags for ${LD}.
# LDOPTS          - Extra, often platform-specific, options for the linker.
# LIBS            - Extra external libraries needed at link time.
# LN_S            - Working 'ln -s' command.
# MKPATH          - Path to shared vj.*.mk file directory.
# MTREE_CMD       - Path to a BSD-compatible mtree.
# OBJ_FILE_SUFFIX - Suffix for object file names (e.g., "o" or "obj").
# OBJ_NAME_FLAG   - Flag passed to the compiler to name an object file.
# OBJDIR          - Path to the directory where the object files will be
#                   built.
# PERL            - Path to Perl 5 binary.
# RANLIB          - Path to ranlib(1) binary if it is available.  ':'
#                   otherwise.
#
# C_COMPILE       - Command for compiling C code.
# CXX_COMPILE     - Command for compiling C++ code.
#
# ABI             - Application Binary Interface type.  This may be used for
#                   other binary types when supported by the operating
#                   system (e.g., "ELF", "N32" or "64").
# LIBBITSUF       - Suffix for the library path used by the linker on IRIX
#                   only.  For o32 binaries, it will be blank.  For n32
#                   binaries, it will be 32.  For 64-bit binaries, it will be
#                   64.
# PLATFORM        - The operating system abbreviation on which the library is
#                   being built.
#
# VJ_LIBRARY      - The base name of the core Juggler library that will be
#                   built with no file extension.
# GL_LIBRARY      - The base name of the OpenGL Juggler API library with no
#                   file extension.
# PF_LIBRARY      - The base name of the Performer Juggler API library with no
#                   file extension.
# -----------------------------------------------------------------------------
# Targets defined here are:
#
# Suffix rules for .c => .o and .cpp => .o.
# clean: Standard directory clean-up target.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Base variables needed by all Makefiles.
# -----------------------------------------------------------------------------
bindir		= @bindir@
datadir		= @datadir@
exec_prefix	= @exec_prefix@
libdir		= @libdir@
libexecdir	= @libexecdir@
mtreedir	= ${releasedir}/mtree
mtreedir_os	= ${mtreedir}/${PLATFORM}
prefix		= @prefix@
releasedir	= @SAFE_VJROOT_ABS@/release
sbindir		= @sbindir@
scriptdir	= ${releasedir}/scripts
sysconfdir	= @sysconfdir@
topdir		= @topdir@
VJROOT_ABS	= @SAFE_VJROOT_ABS@

AR		= @AR@ ${EXTRA_ARFLAGS} ${ARFLAGS}
ARFLAGS		= @ARFLAGS@
AR_NAME_FLAG	= @AR_NAME_FLAG@
CC		= @CC@
CXX		= @CXX@
CPP		= @CPP@
CXXCPP		= @CXXCPP@
CFLAGS		= @CFLAGS@ ${OPTIMIZER}
CPPFLAGS	= @CPPFLAGS@
CXXFLAGS	= @CXXFLAGS@ ${OPTIMIZER}
DEFS		= @DEFS@
DEP_GEN_FLAG	= @DEP_GEN_FLAG@
DEPENDFLAGS	= @DEPENDFLAGS@ @INCLUDES@ -I${VJROOT_ABS} -I${topdir}
DEPEND_EXTRAS	= @DEPEND_EXTRAS@ ${DEFS}
INCLUDES	= @INCLUDES@ -I${VJROOT} -I${topdir}
INSTALL		= @INSTALL@
LD		= @LD@ ${EXTRA_LDFLAGS}
LDFLAGS		= @LDFLAGS@ -L/usr/lib${LIBBITSUF} -L/usr/lib
LDOPTS		= @LDOPTS@ ${EXTRA_LDOPTS}
LDOPTS_DBG	= @LDOPTS_DBG@
LDOPTS_OPT	= @LDOPTS_OPT@
LIBS		= @LIBS@
LN_S		= @LN_S@
MAKEFLAGS	+= --no-print-directory
MKPATH		= ${VJROOT_ABS}/mk
MTREE_CMD	= @MTREE_CMD@
OBJ_FILE_SUFFIX	= @OBJ_FILE_SUFFIX@
OBJ_NAME_FLAG	= @OBJ_NAME_FLAG@
PERL		= @PERL@
RANLIB		= @RANLIB@

# Installation information (permissions, ownership).
GROUP_NAME	= @GROUP_NAME@
FILE_PERMS	= @FILE_PERMS@
EXEC_PERMS	= @EXEC_PERMS@
DIR_PERMS	= @DIR_PERMS@

# Allow overriding the default value of ${OBJDIR} by setting ${BASE_OBJDIR}
# (probably using an externally defined value).
ifdef BASE_OBJDIR
    OBJDIR	:= ${BASE_OBJDIR}
else
    OBJDIR	= .
endif

# -----------------------------------------------------------------------------
# Compiler command lines.
# -----------------------------------------------------------------------------
C_COMPILE	= ${CC} ${DEFS} ${INCLUDES} ${CPPFLAGS} ${CFLAGS}
CXX_COMPILE	= ${CXX} ${DEFS} ${INCLUDES} ${CPPFLAGS} ${CXXFLAGS}

# -----------------------------------------------------------------------------
# Platform- and binary-specific options.  The assignments preceding the
# ifeq ... endif blocks are the default values.  Depending on the value of
# ${ABI}, further settings may be made to allow for building with multiple
# ABIs.
# -----------------------------------------------------------------------------
ifdef vjABI
    ifeq (${vjABI}, O32)
        ABI	= O32
        ISA	= mips2
    endif
    ifeq (${vjABI}, N32_M3)
        ABI	= N32
        ISA	= mips3
    endif
    ifeq (${vjABI}, N32_M4)
        ABI	= N32
        ISA	= mips4
    endif
    ifeq (${vjABI}, 64_M3)
        ABI	= 64
        ISA	= mips3
    endif
    ifeq (${vjABI}, 64_M4)
        ABI	= 64
        ISA	= mips4
    endif
    ifeq (${vjABI}, ELF_i386)
        ABI	= ELF
        ISA	= i386
    endif
else
    ABI		= @ABI@
    ISA		= @ISA@
    LIBBITSUF	= @LIBBITSUF@
endif

PLATFORM	= @PLATFORM@

ifeq (${ABI}, O32)
    ARFLAGS	:= -o32 -mips2 ${ARFLAGS}
    CFLAGS	+= -o32 -mips2
    CXXFLAGS	+= -o32 -mips2
    LDOPTS	+= -o32 -mips2
    LIBBITSUF	=
endif
ifeq (${ABI}, N32)
    ARFLAGS	:= -n32 ${ARFLAGS}
    CFLAGS	+= -n32
    CXXFLAGS	+= -n32
    LDOPTS	+= -n32
    LIBBITSUF	= 32
endif
ifeq (${ABI}, 64)
    ARFLAGS	:= -64 ${ARFLAGS}
    CFLAGS	+= -64
    CXXFLAGS	+= -64
    LDOPTS	+= -64
    LIBBITSUF	= 64
endif
ifeq (${ABI}, ELF)
    LIBBITSUF	=
endif

ifeq (${ISA}, mips3)
    ARFLAGS	:= -mips3 ${ARFLAGS}
    CFLAGS	+= -mips3
    CXXFLAGS	+= -mips3
    LDOPTS	+= -mips3
endif
ifeq (${ISA}, mips4)
    ARFLAGS	:= -mips4 ${ARFLAGS}
    CFLAGS	+= -mips4
    CXXFLAGS	+= -mips4
    LDOPTS	+= -mips4
endif

# -----------------------------------------------------------------------------
# Library names.
# -----------------------------------------------------------------------------
VJ_LIBRARY	= @LIB_PREFIX@Juggler
GL_LIBRARY	= @LIB_PREFIX@Juggler_ogl
PF_LIBRARY	= @LIB_PREFIX@Juggler_pf

@SET_MAKE@

# -----------------------------------------------------------------------------
# Include a common 'clean' target.
# -----------------------------------------------------------------------------
include ${MKPATH}/vj.clean.mk
