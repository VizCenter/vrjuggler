<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="../../../../docs/stylesheet/docbook_ab.css" type="text/css"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book>
   <bookinfo>
      <title>The Juggler Project</title>
      <subtitle>Team Guide</subtitle>
      <releaseinfo>1.0.0</releaseinfo>
      <pubdate>$Date$</pubdate>
   </bookinfo>
   <part>
      <title>Introduction</title>
      <chapter>
         <title>Welcome</title>
         <para>Do you want to contribute to a cool project? Want to learn more about VR, cross platform techniques, and system abstractions? This is your guide. This book is for those people who wish to go further with their VR Juggler work by contributing to the project and even becoming full-fledged developers with commit access.</para>
         <section>
            <title>Required Reading</title>
            <para>By now you should have read the <emphasis>Getting Started Guide</emphasis> so that you know about environment variables and about compiling VR Juggler applications. It is expected that you already know about compilers and linkers and shells and most everything else developers of UNIX and Windows software deal with on a regular basis.</para>
         </section>
         <section>
            <title>Introduction to the Juggler Development Team</title>
            <para>To become a developer with commit access on the Juggler opensource project, refer to <xref linkend="get-commit-access-sect"/>.</para>
            <para>As a member of the Juggler Development Team, you will work on extremely scalable and extensible VR system software, use modern software engineering techiniques such as UML and Design Patterns, and gain exposure within the VR development community. It is your contributions that will run on some of the worlds most powerful VR configurations, as well as smaller single-user PC workstations.</para>
            <para>We don't require much, but in order to happily coexist, we ask that you please refer <xref linkend="intro-req-reading"/> which lists required background information. We appreciate your effort on the team.</para>
            <para>Sincerely, The Juggler Development Team</para>
         </section>
      </chapter>
      <chapter>
         <title>Background Information</title>
         <para></para>
         <section id="intro-req-reading">
            <title>Required Reading</title>
            <itemizedlist>
               <listitem>
                  <para>Our <ulink url="http://www.vrjuggler.org/html/juggler.team.guide/CppCodingStandard.html">coding standard</ulink>.</para>
               </listitem>
               <listitem>
                  <para><emphasis>Design Patterns</emphasis> (<ulink url="http://www.amazon.com/exec/obidos/ASIN/0201633612/o/qid=947544224/sr=2-1/002-9163340-6788217">Book</ulink>: ISBN 0-201-63361-2) and Design Patterns <ulink url="http://hillside.net/patterns/patterns.htm">in general</ulink></para>
               </listitem>
               <listitem>
                  <para><ulink url="http://www.gnu.org/software/autoconf/autoconf.html">Autoconf</ulink> documentation. (Try doing <command>info autoconf</command>).</para>
               </listitem>
               <listitem>
                  <para><ulink url="http://www.gnu.org/software/automake/automake.html">Automake</ulink> documentation. (Try doing <command>info automake</command>).</para>
               </listitem>
               <listitem>
                  <para><ulink url="http://www.gnu.org/software/make/make.html">GNU make</ulink> documentation. (Try doing a <command>man</command> or <command>info</command> on <literal>make</literal> or <literal>gmake</literal>. There is a good book on using <command>make</command> by <ulink url="http://www.ora.com/">O'Reilly and Associates</ulink>).</para>
               </listitem>
               <listitem>
                  <para><ulink url="http://www.perl.com/">Perl</ulink> documentation. (Try doing a <command>man</command> on <literal>perl</literal>. There are several good books on Perl by <ulink url="http://www.ora.com/">O'Reilly and Associates</ulink>).</para>
               </listitem>
               <listitem>
                  <para><ulink url="http://www.doxygen.org/">Doxygen</ulink> documentation (used in VR Juggler to autogenerate documentation for C++ classes).</para>
               </listitem>
               <listitem>
                  <para><ulink url="http://www.cvshome.org/">CVS</ulink> documentation (used for revision control).</para>
               </listitem>
            </itemizedlist>
         </section>
         <section>
            <title>VR Juggler Virtual Platform: Mission Statement</title>
            <para>VR technology as a whole is stagnating with its closed source solutions. This means that anyone new to VR need to completely develop a new solution, often inferior than others. Releasing an open VR system is vital to the development of VR. Instead of reinplementing VR systems, people need to focus on implementing new VR ideas and methods so that VR technology can mature. Now, because of VR Juggler, people can focus on implementing these new VR ideas and methods for the future because now this standard technology is readily available to all, free from cost or legal ties.</para>
            <para>Juggler is a platform for virtual reality applications. The name comes from the delicate balance that must be struck between flexibility, performance, and ease-of-use. You develop your application once for Juggler, then anywhere that Juggler is supported, your application is also supported.</para>
            <para>VR juggler's design addresses several key requirements for a virtual reality development system.</para>
            <itemizedlist>
               <listitem>
                  <para>Performance</para>
               </listitem>
               <listitem>
                  <para>Flexibility</para>
               </listitem>
               <listitem>
                  <para>Rapid application development</para>
               </listitem>
               <listitem>
                  <para>Ease of use</para>
               </listitem>
               <listitem>
                  <para>Extensibility</para>
               </listitem>
               <listitem>
                  <para>Portability</para>
               </listitem>
            </itemizedlist>
            <para>Flexibility is achieved by placing common abstractions over I/O devices. New devices can be added easily, and existing devices can be reconfigured or replaced, even while an application is running.</para>
            <para>To allow optimal performance, applications are given direct access to graphics APIs (currently including OpenGL and Iris Performer).</para>
            <para>VR Juggler includes built-in support for performance monitoring of applications and graphics subsystems. It supports multiple-processor machines and will support distributing applications across multiple machines.</para>
            <para>Using VR Juggler and developing applications are kept as simple as possible. Small base classes provide a skeleton for application development, while the abstractions of I/O devices simplify programming. During run-time, any VR Juggler application can be controlled or reconfigured by a Java-based graphical interface.</para>
            <para>VR Juggler is designed to support a wide array of VR hardware on a variety of architectures. Several tracking systems, gloves, and input devices are already supported. Juggler supports projection- based displays such as the CAVE or C2, and includes support for head-mounted devices. Development work is being done on <emphasis>IRIX</emphasis>, <emphasis>Linux</emphasis>, <emphasis>Windows NT</emphasis>, <emphasis>Solaris</emphasis>, and <emphasis>FreeBSD</emphasis> systems, with reports of success on <emphasis>HP/UX</emphasis>.</para>
         </section>
      </chapter>
   </part>
   <part>
      <title>Compiling and Installing</title>
      <chapter>
         <title>Build Systems</title>
         <para>There are a few different ways to build the projects related to the VR Juggler project. This chapter explains all the ins and outs of compiling VR Juggler and related projects including the documentation you are reading right now.</para>
         <section id="required-tools-sect">
            <title>Required Tools and Utilities for Building VR Juggler from Source</title>
            <para>This section lists the comprehensive set of software tools that we require when compiling VR Juggler from its source. If you are reading a printed version of this file, please check the website to ensure that you have the latest information. There have been several instances where bugs in third party software caused problems with compiling VR Juggler and running VR Juggler applications.</para>
            <table>
               <title>Requirements by Platform</title>
               <tgroup cols="2">
                  <colspec colname="unsup-platform-start"/>
                  <colspec colname="unsup-platform-end"/>
                  <spanspec nameend="unsup-platforms-end" namest="unsup-platforms-start" spanname="unsup-platforms"/>
                  <tbody>
                     <row>
                        <entry>Platform</entry>
                        <entry>Minimum Software Versions</entry>
                     </row>
                     <row>
                        <entry align="right">All</entry>
                        <entrytbl cols="2">
                           <tbody>
                              <row>
                                 <entry>CVS</entry>
                                 <entry align="right">1.11</entry>
                              </row>
                              <row>
                                 <entry>GNU make</entry>
                                 <entry align="right">3.78</entry>
                              </row>
                              <row>
                                 <entry>GNU Autoconf</entry>
                                 <entry align="right">2.13</entry>
                              </row>
                              <row>
                                 <entry>GNU Automake</entry>
                                 <entry align="right">1.4</entry>
                              </row>
                              <row>
                                 <entry>Perl</entry>
                                 <entry align="right">5.004</entry>
                              </row>
                              <row>
                                 <entry>Java 2 Platform (only for VjControl</entry>
                                 <entry align="right">1.3.0</entry>
                              </row>
                           </tbody>
                        </entrytbl>
                     </row>
                     <row>
                        <entry align="right">IRIX</entry>
                        <entrytbl cols="2">
                           <tbody>
                              <row>
                                 <entry>Operating System</entry>
                                 <entry align="right">6.5</entry>
                              </row>
                              <row>
                                 <entry>MIPSpro Compilers</entry>
                                 <entry align="right">7.3.1.1m</entry>
                              </row>
                           </tbody>
                        </entrytbl>
                     </row>
                     <row>
                        <entry align="right">RedHat Linux</entry>
                        <entrytbl cols="2">
                           <tbody>
                              <row>
                                 <entry>Operating System</entry>
                                 <entry align="right">7.2</entry>
                              </row>
                              <row>
                                 <entry>GCC Compilers</entry>
                                 <entry align="right">2.96-98</entry>
                              </row>
                              <row>
                                 <entry>Mesa 3D</entry>
                                 <entry align="right">3.2</entry>
                              </row>
                           </tbody>
                        </entrytbl>
                     </row>
                     <row>
                        <entry align="right">Win32</entry>
                        <entrytbl cols="2">
                           <tbody>
                              <row>
                                 <entry>Operating System</entry>
                                 <entry align="right">Windows NT 4.0<footnote>
                                       <para>Windows NT 4.0 is needed only for compiling the VR Juggler libraries. Applications can be compiled against the libraries on Windows 95/98/Me.</para>
                                    </footnote></entry>
                              </row>
                              <row>
                                 <entry>Microsoft Visual Studio</entry>
                                 <entry align="right">6.0 (SP4 or SP5)</entry>
                              </row>
                              <row>
                                 <entry>Juggler Tools</entry>
                                 <entry align="right">Latest</entry>
                              </row>
                              <row>
                                 <entry>Cygwin</entry>
                                 <entry align="right">1.3 (including Perl 5.6.1)</entry>
                              </row>
                           </tbody>
                        </entrytbl>
                     </row>
                     <row>
                        <entry spanname="unsup-platforms">Platforms not Officially Supported</entry>
                     </row>
                     <row>
                        <entry align="right">HP-UX</entry>
                        <entrytbl cols="2">
                           <tbody>
                              <row>
                                 <entry>Operating System</entry>
                                 <entry align="right">11.00</entry>
                              </row>
                              <row>
                                 <entry>aCC</entry>
                                 <entry align="right">A.03.30</entry>
                              </row>
                              <row>
                                 <entry>OpenGL</entry>
                                 <entry align="right">1.1</entry>
                              </row>
                           </tbody>
                        </entrytbl>
                     </row>
                     <row>
                        <entry align="right"><trademark>Solaris</trademark><footnote id="solaris-compiler-footnote">
                              <para>Support for the <trademark>Forte</trademark> C++ (<trademark>WorkShop</trademark> C++) development package on <trademark>Solaris</trademark> has not been tested, so only freely available GNU utilities are listed.</para>
                           </footnote></entry>
                        <entrytbl cols="2">
                           <tbody>
                              <row>
                                 <entry>Operating System</entry>
                                 <entry align="right">7</entry>
                              </row>
                              <row>
                                 <entry>Patch Set</entry>
                                 <entry align="right">June 7, 2001</entry>
                              </row>
                              <row>
                                 <entry>GCC</entry>
                                 <entry align="right">2.95.2, 3.0.2</entry>
                              </row>
                              <row>
                                 <entry>GNU Binutils</entry>
                                 <entry align="right">2.12</entry>
                              </row>
                              <row>
                                 <entry>Mesa 3D</entry>
                                 <entry align="right">3.2</entry>
                              </row>
                           </tbody>
                        </entrytbl>
                     </row>
                     <row>
                        <entry align="right"><trademark>Solaris</trademark></entry>
                        <entrytbl cols="2">
                           <tbody>
                              <row>
                                 <entry>Operating System</entry>
                                 <entry align="right">7</entry>
                              </row>
                              <row>
                                 <entry>Patch Set</entry>
                                 <entry align="right">June 7, 2001</entry>
                              </row>
                              <row>
                                 <entry>GCC</entry>
                                 <entry align="right">2.95.2, 3.0.2</entry>
                              </row>
                              <row>
                                 <entry>GNU Binutils</entry>
                                 <entry align="right">2.12</entry>
                              </row>
                              <row>
                                 <entry>Mesa 3D</entry>
                                 <entry align="right">3.2</entry>
                              </row>
                           </tbody>
                        </entrytbl>
                     </row>
                     <row>
                        <entry align="right">FreeBSD</entry>
                        <entrytbl cols="2">
                           <tbody>
                              <row>
                                 <entry>Operating System</entry>
                                 <entry align="right">4.5</entry>
                              </row>
                              <row>
                                 <entry>GCC</entry>
                                 <entry align="right">2.95.2</entry>
                              </row>
                              <row>
                                 <entry>Mesa 3D</entry>
                                 <entry align="right">3.2</entry>
                              </row>
                           </tbody>
                        </entrytbl>
                     </row>
                  </tbody>
               </tgroup>
            </table>
         </section>
      </chapter>
      <chapter>
         <title>Get the Source</title>
         <para></para>
         <section>
            <title>Introduction</title>
            <para>There are two ways to get the VR Juggler source code:</para>
            <orderedlist>
               <listitem>
                  <para>Get the source directly from the CVS repository.</para>
               </listitem>
               <listitem>
                  <para>Download a snapshot of the source code as a TAR file from the <quote>Download</quote> page.</para>
               </listitem>
            </orderedlist>
            <para>Both methods are described in this section, though the second is mostly self-explanatory.</para>
            <section>
               <title>Getting the Source Code from the CVS Repository</title>
               <para>Before you can use CVS to get the source code, you must be sure that CVS itself is set up properly on your system. Depending on your platform, CVS may be available in several different forms. The most common version is the original command-line interface. If CVS is not available on your system, you can get the source from <ulink url="http://www.cvshome.org/">CVShome.org</ulink>. This version is available for all platforms including Win32. For graphical interfaces, you can choose from the following:</para>
               <itemizedlist>
                  <listitem>
                     <para>MacCVS/WinCVS: Afreely available front-end for CVS available from <ulink url="http://www.wincvs.org/">WinCvs.org</ulink></para>
                  </listitem>
                  <listitem>
                     <para>jCVS: A CVS client written in Java available from <ulink url="http://www.jcvs.org/">jCVS.org</ulink></para>
                  </listitem>
                  <listitem>
                     <para>tkCVS: A Tcl/Tk-based interface to CVS available from <ulink url="http://www.twobarleycorns.net/tkcvs.html">Two BarleyCorns</ulink></para>
                  </listitem>
               </itemizedlist>
               <para>Once you have CVS running in some form, you are ready to download the source from the VR Juggler repository, hosted at <ulink url="http://www.sourceforge.net/">SourceForge</ulink>. The instructions given here are from the <ulink url="http://sourceforge.net/cvs/?group_id=8041">CVS section</ulink> VR Juggler project page and are subject to change if the SourceForge policies change. Note that there are two sets of directions on that page: one for anonymous access and one for developers with commit access. Each of those is discussed in the following subsections.</para>
               <section>
                  <title>Anonymous CVS Access</title>
                  <para>Anonymous CVS access is for those who want the latest source code but do not have commit access. This would include developers who are working on patches they wish to submit for addition to the source base. As of this writing, the following are the basic instructions for anonymous CVS access:</para>
                  <orderedlist>
                     <listitem>
                        <para><quote>Log in</quote> to the SourceForge CVS server. This step only has to be done the first time you access the repository. Afterwards, the login setting is saved in your <filename>$HOME/.cvspass</filename> file.</para>
                        <programlisting>% cvs -d:pserver:anonymous@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler login</programlisting>
                     </listitem>
                     <listitem>
                        <para>Check out a copy of the current VR Juggler source tree:If what you really want is the VR Juggler 1.0 release branch instead of the developmental main branch, use the following command:</para>
                        <programlisting>% cvs -d:pserver:anonymous@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler checkout juggler</programlisting>
                        <para>(The string <literal>RELENG_1_0</literal> is the name of the branch in the CVS repository containing the VR Juggler 1.0 release code. <quote>RELENG</quote> means <quote>release engineering</quote>.)</para>
                        <programlisting>% cvs -d:pserver:anonymous@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler checkout -r RELENG_1_0 juggler_1.0</programlisting>
                     </listitem>
                  </orderedlist>
                  <para>Once you have the source checked out, you can use CVS as you normally would keeping in mind that you have read-only access to the repository when using anonymous access.</para>
                  <para>You may find it useful to retain the CVSROOT value rather than always giving the <option>-d</option> option on the command line. Setting the <varname>$CVSROOT</varname> environment variable does just that. Defining an alias such as <command>cvsjuggler</command> that sets the environment variable is the recommended method.</para>
               </section>
               <section>
                  <title>Developers with Commit Access</title>
                  <para>For those developers with commit access, the steps are slightly different. You must have some version of SSH1 installed to access the repository as a developer. This is required by SourceForge, and we (the VR Juggler Team) have no control over this. The steps then to get a read/write copy of the VR Juggler source tree are as follows:</para>
                  <orderedlist>
                     <listitem>
                        <para>Set the environment variable <varname>$CVS_RSH</varname> to use <literal>ssh</literal>(1).</para>
                        <programlisting>% CVS_RSH = ssh</programlisting>
                        <para>(Note that this is using the shell-independent environment variable syntax defined in the <emphasis>Getting Started Guide</emphasis>.) It is recommended that you set this environment variable in your shell's configuration appropriate configuration file or as part of an alias that configures your environment to work with the VR Juggler CVS repository.</para>
                     </listitem>
                     <listitem>
                        <para>Check out the source using your SourceForge login name.</para>
                        <programlisting>% cvs -dlogin_name@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler checkout juggler</programlisting>
                        <para>Be sure to use the appropriate branch name.</para>
                     </listitem>
                  </orderedlist>
                  <para>Note that there is no login step in this case. Your SourceForge password is required for all CVS commands.</para>
                  <para>After this point, you can access the CVS repository as though it is a normal, local repository. As with the anonymous CVS access, you can set the <varname>$CVSROOT</varname> environment variable to the value given with the <option>-d</option> option above. For further information about using SSH with SourceForge, please refer to the appropriate SSH ocumentation and to <ulink url="http://sourceforge.net/docman/?group_id=1">SourceForge's documentation</ulink>.</para>
               </section>
            </section>
            <section>
               <title>Getting a Snapshot of the Source Code</title>
               <para>As a developer, you will probably need access to the latest VR Juggler source and therefore should be getting it from the CVS repository. In some cases, however, it may be helpful to get a snapshot of the code in an archived format. The <ulink url="http://www.vrjuggler.org/html/download/index.html">download page</ulink> on the VR Juggler website has a <ulink url="http://www.vrjuggler.org/html/download/index.html#src">section listing source code snapshots</ulink>. Here, you can get a compressed tar file containing the official source code for a particular release of VR Juggler. These snapshots are not for developmental purposes and will not give you access to the CVS repository.</para>
            </section>
         </section>
      </chapter>
      <chapter>
         <title>VR Juggler Build System</title>
         <para></para>
         <section>
            <title>Introduction</title>
            <para>Of particular interest, the VR Juggler project uses the <command>autoconf</command> and <command>automake</command> utilities to stay portable across platforms. This means you will have to <quote>configure</quote> the project before you make it. To make sense of this documentation, please understand the concepts listed in <xref linkend="intro-req-reading"/>. Posting about these subjects to the mailing list will probably be ignored.</para>
         </section>
         <section>
            <title>Sections</title>
            <itemizedlist>
               <listitem>
                  <para>Quick Start: A quick overview of how to build Juggler.</para>
               </listitem>
               <listitem>
                  <para>Win32-Specific Considerations: Getting set up for Juggler use and development in a Win32 environment.</para>
               </listitem>
               <listitem>
                  <para>Using the Configure Script: How to use <command>configure</command> to set up a build environment before compiling.</para>
               </listitem>
               <listitem>
                  <para>Compiling VR Juggler: How to use the Juggler build system in detail.</para>
               </listitem>
               <listitem>
                  <para>Installing VR Juggler: How to install Juggler after compiling it.</para>
               </listitem>
            </itemizedlist>
         </section>
         <section>
            <title>Compiling VR Juggler Libraries: Quick Start</title>
            <section>
               <title>Step by step build of the Juggler distribution</title>
               <orderedlist>
                  <listitem>
                     <para>Choose a directory to put Juggler. From this point on, we will refer to that directory as <literal>SRC_DIR</literal>.</para>
                  </listitem>
                  <listitem>
                     <para>Go to that directory and checkout juggler using CVS. Make sure CVS is set up and pointing to the VR Juggler repository. Refer to the <ulink url="http://sourceforge.net/cvs/?group_id=8041">SourceForge instructions</ulink> for getting VR Juggler with CVS.</para>
                     <programlisting>% cd SRC_DIR
% cvs checkout juggler</programlisting>
                  </listitem>
                  <listitem>
                     <para>Enter the newly checked-out VR Juggler source directory.</para>
                     <programlisting>% cd SRC_DIR/juggler</programlisting>
                  </listitem>
                  <listitem>
                     <para>Set the environment variable <varname>VJ_BASE_DIR</varname><note>
                           <orderedlist>
                              <listitem>
                                 <para>The directory <filename>instlinks</filename> is semi-important. What does the word <quote>instlinks</quote> mean? It is a working distribution of the Juggler library. After gmake is done, you'll be able to use this directory as though it were an installed version of VR Juggler.</para>
                              </listitem>
                              <listitem>
                                 <para>This directory also determines where juggler files will be created. Juggler files will be created in <filename>some-directory/instlinks/..</filename> (in other words, files are created one directory back from <filename>instlinks</filename>).</para>
                              </listitem>
                           </orderedlist>
                           <para>Make sure the following environment variable assignment line is in your shell's startup file:</para>
                           <programlisting>VJ_BASE_DIR=SRC_DIR/juggler/instlinks</programlisting>
                        </note>This is required by Juggler's build system (makefiles, etc.).</para>
                  </listitem>
                  <listitem>
                     <para>Compile juggler (using the Autoconf system and GNU make):<orderedlist>
                           <listitem>
                              <para>Auto-generate the configuration script <command>configure</command>:</para>
                              <programlisting>% autoconf</programlisting>
                           </listitem>
                           <listitem>
                              <para>Auto-generate the <filename>vjDefine.h.in</filename> header template:</para>
                              <programlisting>% autoheader</programlisting>
                           </listitem>
                           <listitem>
                              <para>Configure the build. This probes the system for capabilities, generate <filename>Makefiles</filename>, etc. It <quote>configures</quote> the source tree for the current system. The <command>configure</command> script will let you change how VR Juggler compiles. For example, you could build VR Juggler without the Performer API using an option passed to the <command>configure</command> script.</para>
                              <note>
                                 <para>You can type <command>configure --help</command> for options.</para>
                                 <programlisting>% ./configure</programlisting>
                              </note>
                           </listitem>
                           <listitem>
                              <para>Build (make) the distribution using GNU make. This compiles, links, and creates the final distribution tree (in the form of symbolic links).</para>
                              <programlisting>% gmake</programlisting>
                           </listitem>
                        </orderedlist></para>
                  </listitem>
                  <listitem>
                     <para>Advanced Topics</para>
                     <orderedlist>
                        <listitem>
                           <para>Send compiler output to a different directory than the source tree. Run this in the directory you want compiler output to go. This is typically done with a subdirectory in the juggler source tree. We will call it <literal>&lt;BUILD_DIR&gt;</literal>.</para>
                           <programlisting>% mkdir &lt;BUILD_DIR&gt;
% cd &lt;BUILD_DIR&gt;
% &lt;SRC_DIR&gt;/configure</programlisting>
                        </listitem>
                     </orderedlist>
                  </listitem>
               </orderedlist>
            </section>
         </section>
         <section>
            <title>Win32 Compiling and Development Issues</title>
            <para>When VR Juggler was first ported to the Win32 environment, a Microsoft Visual C++ project file was used for compiling the library. Development on the GNU Autoconf-based build system on UNIX platforms had been going strong for a long time prior to this, and it was quickly realized that having two separate methods for compiling would complicate matters. The build system used for compiling VR Juggler is now the same on UNIX and Win32 platforms. Only the Autoconf-based system is supported which provides the same build environment on all platforms.</para>
            <para>Since the UNIX and Win32 environments have many striking differences, special information must be provided for using the Juggler build system on Windows-based platforms. This document provides all the information necessary for getting set up in a Win32 environment prior to compiling and installing Juggler for developmental use. This is intended primarily for developers who wish to work with the Juggler source and (hopefully) submit work to the Juggler team. Users who are doing application development on a Win32 platform may want to read it too so that they may get a better understanding of what is available as part of the Win32 support.</para>
            <section>
               <title>Necessary Tools</title>
               <para>Developers should refer to the Win32 section of the <ulink url="http://www.vrjuggler.org/html/download/">download page</ulink> for the list of packages that must be installed. The <literal>juggler-tools</literal> package is especially important. It contains exactly the utilities used for compiling Juggler (aside from Visual C++ of course) including some modified versions of programs. Of note, the version of <command>make</command> included is what comes with the Bamboo Win32 tools. It is a modified version of GNU make that will run in a DOS shell and can handle DOS-style paths. Also, <command>makedepend</command> has been modified to output UNIX-safe paths and to know about the <varname>INCLUDE</varname> environment variable used by Visual C++.</para>
               <para>In addition to what is listed on the download page, the following packages are needed for Win32 development of Juggler (but not for application development):</para>
               <itemizedlist>
                  <listitem>
                     <para><ulink url="http://sources.redhat.com/cygwin/download.html">Cygwin</ulink> 1.1.8 or newer. With the newer versions of Cygwin, the tools work better in the Win32 environment, and many pre-compiled packages are available including CVS, Perl, Autoconf, and Automake. It is strongly recommended that the Cygwin versions of all these utilities be used.</para>
                  </listitem>
                  <listitem>
                     <para><ulink url="ftp://ftp.gnu.org/gnu/autoconf/">GNU Autoconf</ulink> version 2.13 and <ulink url="ftp://ftp.gnu.org/gnu/automake/">GNU Automake</ulink> version 1.4. Versions beyond these are not currently supported on any platform. This is needed to compile a new configure script after modifying <filename>configure.in</filename> and to update <filename>vjDefines.h.in</filename> when necessary. Note that these tools can only be run from a BASH shell (included with the Cygwin package). Autoconf and Automake can be compiled and installed on a Win32 platform without modification using the Cygwin tools.</para>
                  </listitem>
               </itemizedlist>
            </section>
            <section>
               <title>Environment Variables</title>
               <para>There are several environment variables that need to be set properly when compiling and installing Juggler and when running Juggler applications. These variables apply to all users, both those who are compiling and running applications as well as those who are compiling VR Juggler itself.</para>
               <variablelist>
                  <varlistentry>
                     <term>%PATH%</term>
                     <listitem>
                        <para>All users must have the <filename>juggler-tools</filename> directory in their path. If the Cygwin utilities are installed, it is especially important that <filename>juggler-tools</filename> be listed <emphasis>before</emphasis> the Cygwin bin directory so that the supported utilities are found first. Unfortunately, when running a BASH shell, the Cygwin path is always first, but in the BASH environment, this is acceptable. The ordering is far more important for DOS shells. Besides <filename>juggler-tools</filename>, the directory containing the Visual C++ executables must also be in the path. The configure script needs this so that it can find <command>CL.EXE</command> when it is setting up the C and C++ compilers.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>%INCLUDE%</term>
                     <listitem>
                        <para>This should also be set for all users. It provides paths to the Visual C++ include directories that <command>CL.EXE</command> needs when compiling. On Windows NT, it is set only for the user who installed Visual C++. Be sure to change this to be included in <emphasis>all</emphasis> users' environments. Alternatively, it can be set using the <command>VCVARS32.BAT</command> batch file on a per-shell basis, but users will see much better results if it is set in the general environment. In particular, a BASH shell does not get the environment changes made by the batch file. The batch file also uses <quote>8.3</quote> names which may confuse the Cygwin tools.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>%LIB%</term>
                     <listitem>
                        <para>This is another Visual C++ environment variable that needs to be set in the same manner as <varname>%INCLUDE%</varname>. Again, this is initially set only for the user who installed Visual C++ and should be changed so that it is set for all users.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>%VJ_BASE_DIR%</term>
                     <listitem>
                        <para>The value for this should be set using the DOS path with /'s as the path separator rather than \'s as would normally be the case with DOS/Win32 paths. For example, if VR Juggler is installed in <filename>C:\software\vrjuggler</filename>, <varname>%VJ_BASE_DIR%</varname> would be set to <filename>C:/software/vrjuggler</filename>. Never use <filename>//c/software/vrjuggler</filename> or <filename>/cygdrive/c/software/vrjuggler</filename>. The Visual C++ I/O libraries will not be able to handle these special Cygwin paths.</para>
                     </listitem>
                  </varlistentry>
               </variablelist>
               <para>For more information, refer to the section titled <quote>Environment Varibles</quote> in the <emphasis>Getting Started Guide</emphasis>.</para>
            </section>
            <section>
               <title>Compiling VR Juggler</title>
               <para>Finally, the actual process of compiling (and installing) VR Juggler can begin. After taking the steps in the preceding sections, this will be an easy task (assuming that the source is stable of course). This section focuses primarily on the process when done within a DOS shell. In a BASH shell, the environment is almost identical to that on a UNIX platform, so there are no special considerations to be made.</para>
               <para>The first step, as usual, is to configure the build environment with the configure script. (This assumes that <command>configure</command> and <filename>vjDefines.h.in</filename> have already been generated.) If running in a DOS shell, <command>configure</command> must be invoked using the <command>sh</command> utility. The following will <emphasis>not</emphasis> work:</para>
               <programlisting>&gt; ./configure [options]</programlisting>
               <para>Instead, it must be run as:</para>
               <programlisting>&gt; sh ./configure [options]</programlisting>
               <para>As with the UNIX environment, it can be run from a separate build directory. Refer to <xref linkend="configure-script-chapter"/> for more information (specifically, <xref linkend="configure-script-usage-sect"/>). Options with paths should use <filename>/</filename>'s for the path separator rather than <filename>\</filename>'s. They should also be enclosed in double quotes (<quote>path/to/something</quote>) in case the path includes one or more spaces.</para>
               <para>Once configuration has completed, compiling can be done in either a DOS shell or a BASH shell using the version of GNU make in <filename>juggler-tools</filename>. <emphasis>The Cygwin B20.1 version will not work in a DOS shell.</emphasis> This is when it is especially important to have the <filename>juggler-tools</filename> directory before the Cygwin directory in the user's path.</para>
               <para>Beyond this, everything (aside from the problems listed in the next section) will be the same as in a UNIX environment.</para>
            </section>
            <section>
               <title>Known Problems</title>
               <para>Listed here are things to keep in mind when working in a Win32 environment. It is not as stable as its UNIX counterpart due, for the most part, to reasons beyond the control of this project. Please read this in full before reporting problems with the Win32 build.</para>
               <itemizedlist>
                  <listitem>
                     <para>In versions of Cygwin prior to 1.1, the UNIX utilities will appear to become blocked or may die with an error saying that they cannot fork. This may have been due to a race condition in the old Cygwin code. Typically, it happens when one or more BASH shells are open while a build is happening in a DOS shell. Closing one or more (sometimes all) of the BASH shells usually fixes the problem. It is strongly recommended that developers update to <ulink url="http://sources.redhat.com/cygwin/download.html">Cygwin 1.1.8</ulink> and to the <ulink url="http://www.vrjuggler.org/pub//juggler-tools-1.1.zip">latest <filename>juggler-tools</filename> package</ulink>.</para>
                  </listitem>
                  <listitem>
                     <para>The <quote>developer installation</quote> does not work in any Win32 file system. It relies heavily on symbolic links which, while common on UNIX file systems, have no meaning in a Win32 environment. Because of this, VR Juggler must be fully installed after it has been compiled (refer to <xref linkend="install-vrj-chapter"/> for more information on this process). Once that is done, <varname>$VJ_BASE_DIR</varname> can be set to point to the installation directory and development can continue in the build tree.</para>
                  </listitem>
                  <listitem>
                     <para>The configure script assumes that the compiler knows how to find the OpenGL libraries and headers. In VR Juggler 1.0, no check is made to verify that the OpenGL libraries are available. This has been corrected in VR Juggler 1.1 and beyond.</para>
                  </listitem>
                  <listitem>
                     <para>Dependencies must be generated differently than on UNIX-based platforms. The Visual C++ compiler does not output the dependencies of a given source file in the same manner as all UNIX C and C++ compilers supported by the Juggler build system. Because of this, <command>makedepend</command> is used. It may not handle all the <symbol>#ifdef</symbol>'s properly and report non-fatal warnings. These can be ignored typically, especially if it is trying to find some file that is clearly UNIX-specific (e.g., <filename>pthread.h</filename>). The version of <command>makedepend</command> in <filename>juggler-tools</filename> has been modified to output UNIX-style (and UNIX-safe) paths, but it is possible that not all situations have been considered. If it is clear that <command>makedepend</command> is not handling a path properly, please <ulink url="http://www.vrjuggler.org/html/bugs/bugs.html">report the problem</ulink>.</para>
                  </listitem>
                  <listitem>
                     <para>A configure script generated in a Win32 environment will not work in a UNIX environment. The <quote><literal>^M</literal> problem</quote> causes the shell to fail when trying to run the script. A configure script generated in a UNIX environment will however work in a Win32 environment because <command>sh</command> can handle both UNIX- and DOS-style newlines.</para>
                  </listitem>
                  <listitem>
                     <para>The application makefiles (<emphasis>not</emphasis> the library makefiles) all use the <varname>$(VAR_NAME)</varname> syntax for referencing variables. This is so that the makefiles will work with <command>nmake</command>. These are intended to be usable with all version of <command>make</command> (or as many as is feasibly possible), so they deviate from the style used in other makefiles to accommodate this particular version of <command>make</command>.</para>
                  </listitem>
               </itemizedlist>
            </section>
         </section>
      </chapter>
      <chapter id="configure-script-chapter">
         <title>Using the VR Juggler Configure Script</title>
         <para>The VR Juggler project uses the autoconf utility to stay portable across platforms. This means you will have to <quote>configure</quote> the project before compiling it. To make sense of this documentation, please understand the concepts listed in <xref linkend="intro-req-reading"/>. Posting about these subjects to the mailing list will probably be ignored.</para>
         <para>In this chapter, the following conventions are used for text formatting and naming:</para>
         <itemizedlist>
            <listitem>
               <para>Program, file and directory names are represented <filename>this way</filename>.</para>
            </listitem>
            <listitem>
               <para>Commands that are intended to be run by the user are written in <command>this style</command>.</para>
            </listitem>
            <listitem>
               <para>References to system and library calls are written as <function>call_name</function>(##) where <quote>##</quote> is the manual section where that call's documentation can be found.</para>
            </listitem>
            <listitem>
               <para>Makefile targets are named as '<literal>target</literal>', and makefile variables are named as <varname>$(VAR_NAME)</varname>.</para>
            </listitem>
            <listitem>
               <para>Environment variables are named as defined in the <quote>Enviroment Variables</quote> chapter in the <emphasis>Getting Started Guide</emphasis>.</para>
            </listitem>
         </itemizedlist>
         <section>
            <title>General Quick Start</title>
            <para>When first downloading the Juggler source to compile it, users must generate the configure script and <filename>vjDefines.h.in</filename> template using <command>autoconf</command> and <command>autoheader</command>. This files are not part of the repository because they are generated using third-party tools from files in the repository (i.e., <filename>configure.in</filename> and <filename>acconfig.h</filename>). The usual way to generate the files is:</para>
            <programlisting>% autoconf ; autoheader</programlisting>
            <para>This must be executed in the top-level Juggler source directory.</para>
            <para>Once the <literal>configure</literal> script is generated, it can be invoked by typing:</para>
            <programlisting>% ./configure</programlisting>
            <para>To get a list of all the available options, do:</para>
            <programlisting>% ./configure --help</programlisting>
         </section>
         <section id="autoconf-autoheader-sect">
            <title>Autoconf and Autoheader</title>
            <para>VR Juggler uses tools from the GNU Autoconf package for automatically generating its configure script and its template configuration header file (<filename>vjDefines.h</filename>). The command <command>autoconf</command> is used to <quote>compile</quote> the file <filename>configure.in</filename> in the top-level directory into the configure script, aptly named <filename>configure</filename>. <command>autoheader</command> reads <emphasis>both</emphasis> <filename>configure.in</filename> and <filename>acconfig.h</filename> to generate the template file <filename>vjDefines.h.in</filename> which the configure script later uses to generate <filename>vjDefines.h</filename>.</para>
            <para>It is important that the generated files remain synchronized with their templates for proper compiling of the library. To facilitate this, revision numbers of <filename>configure.in</filename> and <filename>acconfig.h</filename> are available at the tops of the files, and these can be compared against the revision number of <filename>configure</filename> and <filename>vjDefines.h.in</filename>. If the numbers do not match, it is best to run <command>autoconf</command> and/or <command>autoheader</command> to get everything up to date. Typically, <command>autoconf</command> needs to be used far more frequently than <command>autoheader</command>, but there are times when changes made only to <filename>configure.in</filename> require that both be run. It hurts nothing to run both whenever <filename>configure.in</filename> is updated.</para>
            <para>Note that it is possible to use a configure script generated on a UNIX platform in a Win32 environment. The version of <command>sh.exe</command> distributed in <filename>juggler-tools.zip</filename> handles the UNIX newline characters. It is, however, not possible to use a configure script generated in a Win32 environment on a UNIX platform. The <literal>^M</literal> characters confuse the shell and cause the script to fail immediately.</para>
         </section>
         <section id="configure-script-usage-sect">
            <title>Usage</title>
            <section>
               <title>Environment Variables (UNIX vs. Win32)</title>
               <para>In a UNIX environment, no environment variables have to be set for <command>configure</command> to work properly. The <varname>PATH</varname> should be reasonable and must include tools such as C and C++ compilers, a working GNU make and standard UNIX utilities such as <command>cat</command>, <command>sh</command>, <command>test</command>, etc. The configuration process can of course uses environment variables such as <varname>$CC</varname>, <varname>$CXX</varname>, <varname>$CFLAGS</varname>, etc. as it runs. Users can define values for these variables to force the configuration process to use user-defined settings. This is common in configure script use.</para>
               <para>In a Win32 environment, some variables have to be defined for the Microsoft Visual C++ compiler to work properly. These are mentioned on the <ulink url="http://www.vrjuggler.org/html/download/">Download page</ulink>. Refer to that document to ensure that the environment is set up right for building and installing.</para>
            </section>
            <section>
               <title>Quick Start</title>
               <para>The easiest way to configure Juggler is to run <command>configure</command> with no options in the top-level source directory. Doing this will root compiling in this directory. This will use all the default values for the host platform with the script doing its best to make the right choices. In some cases, however, this may not be sufficient.</para>
               <para>Possible situations that may cause <command>configure</command> to report a fatal error or a warning about a feature being disabled include the following:</para>
               <itemizedlist>
                  <listitem>
                     <para>The version of <command>sh</command> available does not support the features being used in <command>configure</command>. In this case, the configure script will exit with an error status. To get around this, invoke <command>ksh</command>, <command>bash</command>, or <command>zsh</command> on <command>configure</command> (in that order as available). These shells have newer features and fully support <command>sh</command> syntax. (In particular, this is known to be a problem with <filename>/bin/sh</filename> on Solaris 7 and possibly Solaris 8.)</para>
                  </listitem>
                  <listitem>
                     <para>A <quote>modern</quote> C++ compiler was not found. <emphasis>This is a fatal error.</emphasis> VR Juggler uses many features of the latest C++ standard, and a C++ compiler supporting these features is absolutely required. To use an alternate C++ compiler, specify a value for the environment variable <varname>CXX</varname>.</para>
                  </listitem>
                  <listitem>
                     <para>The OpenGL libraries and/or header files were not found. <emphasis>This is a fatal error.</emphasis> To remedy this problem, use the <option>--with-oglroot</option> option to <command>configure</command> to specify the root directory containing the OpenGL installation.</para>
                  </listitem>
                  <listitem>
                     <para>The OpenGL Performer libraries and/or header files were not found. This is not a fatal error and simply causes the Performer API to be disabled for that build. If Performer is available, use the <option>--with-pfroot</option> option to <command>configure</command> to specify the root directory containing the Performer installation. It may also be necessary to use the <option>--with-pfver</option> option if OpenGL Performer 2.4 is not the version installed.</para>
                  </listitem>
                  <listitem>
                     <para>A version of Perl greater than or equal to 5.004 was not found. <emphasis>This will cause compiling of <command>vjcontrol</command> and installation of the library to fail.</emphasis> To provide a valid Perl binary for use by the makefiles, use the <option>--with-perl</option> option to <command>configure</command>. The path given should be the full path up to but <emphasis>not</emphasis> including the <command>perl</command> binary itself. For example, if a <command>perl5</command> binary were in <filename>/usr/unsupported/bin</filename>, give this directory as the argument to <option>--with-perl</option>. In a Win32 environment, use <filename>/</filename>'s as the path separator rather than <filename>\</filename>'s.</para>
                  </listitem>
                  <listitem>
                     <para>No Java compiler was found. This disables the compilation of <command>vjcontrol</command>. There are three ways to fix this with all giving the same results:</para>
                     <orderedlist>
                        <listitem>
                           <para>Set the environment variable <varname>JDK_HOME</varname> to the Java installation directory (e.g., <filename>/usr/local/java</filename> which contains a <filename>bin</filename> subdirectory with all the JDK utilities).</para>
                        </listitem>
                        <listitem>
                           <para>Set the environment variable <varname>JAVA_HOME</varname> to the Java installation directory. This serves the same purpose as the previous option but offers users a different environment variable name to allow for varying configurations between sites and platforms.</para>
                        </listitem>
                        <listitem>
                           <para>Give <command>configure</command> a path to the Java installation through the <option>--with-jdkhome</option> option.</para>
                        </listitem>
                     </orderedlist>
                     <note>
                        <para>In a Win32 environment, the path separator character should be a `/' rather than a `\'. This is consistent with other uses of paths in a Win32 environment.</para>
                     </note>
                  </listitem>
               </itemizedlist>
            </section>
            <section>
               <title>Options</title>
               <para>The following is a list of the current Juggler-specific options that can be invoked at configuration time as of Revision 1.273.2.3 of <filename>configure.in</filename> (the revision number can be found at the top of the <filename>configure.in</filename> file and at the top of the configure script). The output for all options is generated by doing <command>configure --help</command>.</para>
               <variablelist>
                  <varlistentry>
                     <term>--with-cc</term>
                     <listitem>
                        <para>Force the use of a C compiler other than what would be detected automatically.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-cxx</term>
                     <listitem>
                        <para>Force the use of a C++ compiler other than what would be detected automatically.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-gcc</term>
                     <listitem>
                        <para>Force the use of GCC as the compiler. Currently as of Revision 1.273.2.3 of <filename>configure.in</filename>), use of this option is not fully implemented. Its current state is for use only in a Win32 environment so that the Cygnus-Win32 version of GCC can be used to compile Juggler instead of the Microsoft Visual C++ command-line compiler.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-abi=OPT</term>
                     <listitem>
                        <para>Define the application binary interface (ABI) for which Juggler is compiled. In some cases, the instruction set architecture (ISA) can also be defined in combination with the ABI. The possible values for this are:</para>
                        <itemizedlist>
                           <listitem>
                              <para><literal>N32_M3</literal> (<emphasis>IRIX</emphasis>): Use the new 32-bit ABI and the mips3 ISA (using MIPSpro compiler options <option>-n32 -mips3</option>. <emphasis>This is the default for building on IRIX.</emphasis></para>
                           </listitem>
                           <listitem>
                              <para><literal>N32_M4</literal> (<emphasis>IRIX</emphasis>): Use the new 32-bit ABI and the mips4 ISA (using MIPSpro compiler options <option>-n32 -mips4</option>.</para>
                           </listitem>
                           <listitem>
                              <para><literal>64_M3</literal> (<emphasis>IRIX</emphasis>): Use the 64-bit ABI and the mips3 ISA (using MIPSpro compiler options <option>-64 -mips4</option>.</para>
                           </listitem>
                           <listitem>
                              <para><literal>64_M4</literal> (<emphasis>IRIX</emphasis>): Use the 64-bit ABI and the mips4 ISA (using MIPSpro compiler options <option>-n32 -mips4</option>.</para>
                           </listitem>
                           <listitem>
                              <para><literal>ELF_i386</literal> (<emphasis>Linux, Solaris, FreeBSD, NetBSD</emphasis>): Use the ELF ABI on x86 hardware. This uses the default ABI and ISA when compiling on the i386 versions of the named operating systems. Other ISA's may work but have not been tested. For other architectures, let the configure script figure out the ISA based on what it determines the target platform to be. <emphasis>This is the default option for the named operating systems.</emphasis></para>
                           </listitem>
                           <listitem>
                              <para><literal>WIN32_i386</literal> (<emphasis>Windows NT, Windows 9x</emphasis>): Use the standard Win32 ABI on x86 hardware. This uses the default settings for compiling in these environments. No support is planned for other architectures. <emphasis>This is the default option for the named operating systems.</emphasis></para>
                           </listitem>
                           <listitem>
                              <para><literal>HP</literal> (<emphasis>HP-UX</emphasis>): Use the HP PA-RISC ABI. This will be supported in the future when the HP-UX port is functional. <emphasis>This is the default for building on HP-UX.</emphasis></para>
                           </listitem>
                           <listitem>
                              <para><literal>ALPHA</literal> (<emphasis>Digital UNIX</emphasis>): Use the standard Digital UNIX COFF ABI. This will be supported in the future if a port to Digital UNIX is made.</para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-threads=OPT</term>
                     <listitem>
                        <para>Define the threading implementation. The options are <literal>IRIX_SPROC</literal> (use IRIX <function>sproc(2)</function> threads), <literal>POSIX</literal> (use pthreads) and <literal>WIN32</literal> (use Win32 threads). The default is <literal>IRIX_SPROC</literal>, though configure knows what other platforms should use. For example, POSIX threads are used on Linux, Solaris and FreeBSD without specifying this option.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-jdkhome=PATH</term>
                     <listitem>
                        <para>Give the JDK installation directory. This is the base directory containing a <filename>bin</filename> subdirectory with all the JDK utilities (such as <command>javac</command> and <command>jar</command>). The default is the value in <varname>$JDK_HOME</varname> or <filename>/usr/java</filename> if <varname>$JDK_HOME</varname> has no value. In a Win32 environment, this option must be give using <filename>/</filename>'s as the path separator rather than <filename>\</filename>'s.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-pfroot=PATH</term>
                     <listitem>
                        <para>Give the OpenGL Performer installation directory. This is the base directory containing an include subdirectory that in turn has a Performer subdirectory and at least a lib directory with the Performer libraries. On IRIX, there may also be a lib32 subdirectory and a lib64 subdirectory. They will be used appropriately depending on the ABI chosen (see above). The default path is <filename>/usr</filename>.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-pfver=VER</term>
                     <listitem>
                        <para>Give the IRIS/OpenGL Performer version installed. Between Performer 2.2 and 2.4, the names of the libraries were changed. In 2.2, they had an <filename>_ogl</filename> extension, but in 2.4, that extension was dropped. Specifying the version number defines which libraries will be linked in the Performer sample applications. The default version is 2.4.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-oglroot=PATH</term>
                     <listitem>
                        <para>Give the OpenGL installation directory. This is the base directory containing an <filename>include</filename> subdirectory that in turn has a <filename>GL</filename> subdirectory and at least a <filename>lib</filename> directory with the OpenGL libraries. On IRIX, there may also be a <filename>lib32</filename> subdirectory and a <filename>lib64</filename> subdirectory. They will be used appropriately depending on the ABI chosen (see above). This option is particularly useful (i.e., necessary) on platforms such as Linux, FreeBSD and HP-UX where OpenGL is not distributed as part of the base operating system. Common values are <filename>/usr/local</filename>, <filename>/usr/X11R6</filename> and <filename>/opt/graphics/OpenGL</filename> (HP-UX 10.20). In VR Juggler 1.0, this option is not supported in a Win32 environment. The default path is <filename>/usr</filename>.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-mesa</term>
                     <listitem>
                        <para>Tell the VR Juggler build system that the target system is using the Mesa OpenGL implementation. This will look for <filename>libMesaGL</filename> and friends rather than <filename>libGL</filename>, and it will use the <filename>libMesa*</filename> libraries when linking sample applications.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-audioworks=PATH</term>
                     <listitem>
                        <para>Give the AudioWorks installation directory. This is the base directory containing an <filename>include/PSI</filename> subdirectory and at least a <filename>lib/PSI</filename> subdirectory with the AudioWorks libraries. If AudioWorks is found, the Juggler AudioWorks sound wrapper will be compiled and installed. The default path is <filename>/usr</filename>.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-sl=PATH</term>
                     <listitem>
                        <para>Give the SL installation directory. This is the base directory containing an <filename>include/sl</filename> subdirectory and at least a <filename>lib</filename> subdirectory with the SL libraries. Before testing for SL, a test will be performed checking for the SGI Audio library if compiling on IRIX. If it is found, then the test for SL is performed. If SL is found, the VR Juggler SL sound wrapper will be compiled and installed. The default path is <filename>/usr</filename>.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-perl=PATH</term>
                     <listitem>
                        <para>Name the directory containing a Perl 5.004 or newer binary. A working Perl 5.004 or newer binary is necessary for a complete build and install of Juggler. The version of the binary can be determined by executing (<command>perl -v</command>). This path is the full path leading up to the binary (e.g., <filename>/usr/local/bin</filename>). There is no default, but common values are hard-coded into the configure script. They are <filename>/usr/bin</filename>, <filename>/usr/local/bin</filename> and <filename>C:/Perl/bin</filename>. Note that in a Win32 environment, paths must be given using <filename>/</filename>'s as the path separator rather than <filename>\</filename>'s.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-install-group=NAME</term>
                     <listitem>
                        <para>Name the group used for ownership of installed files. This allows installation of Juggler under a group name controlled by the site administrator. If the group name is not found, no group is specified during installation which is typically fine. The default is <quote>vrjuggler</quote>.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-file-perms=FILE PERMISSIONS</term>
                     <listitem>
                        <para>Provide permissions for installed (normal) files. This will be used for header files, source code, config files, etc. The format must be UNIX octal-style (e.g., 0644). The default is 0644.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-exec-perms=EXEC PERMISSIONS</term>
                     <listitem>
                        <para>Provide permissions for installed executables. This will be used for scripts, executables, and shared libraries. The format must be UNIX octal-style (e.g., 0644). The default is 0755.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-dir-perms=DIR PERMISSIONS</term>
                     <listitem>
                        <para>Provide permissions for directories created in the installation tree. The default is 0755.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--with-version=major.minor.patch</term>
                     <listitem>
                        <para>Set the version number for this build. If not specified, it will be determined automatically from the contents of the <filename>VERSION</filename> file.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--enable-gl-api</term>
                     <listitem>
                        <para>Enable the OpenGL API in the library. <emphasis>This option cannot be disabled and is on by default.</emphasis></para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--enable-pf-api</term>
                     <listitem>
                        <para>Enable the Performer API in the library. This turns on (or turns off) compiling of the Performer code in VR Juggler. Disabling is done using the standard method for Autoconf-generated scripts. On platforms that do not have Performer, a warning is issued and the API is disabled. <emphasis>This option is enabled by default.</emphasis></para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--enable-performance=OPT</term>
                     <listitem>
                        <para>Enable (or disable) the performance-testing code. This defines which method of performance testing should be used or disables it altogether. The possible options are as follows:</para>
                        <itemizedlist>
                           <listitem>
                              <para><literal>SGI</literal>: Use SGI-specific methods for doing performance testing.</para>
                           </listitem>
                           <listitem>
                              <para><literal>POSIX</literal>: Use portable POSIX-specified code for performance testing.</para>
                           </listitem>
                           <listitem>
                              <para><literal>NONE</literal>: Disable performance code</para>
                           </listitem>
                        </itemizedlist>
                        <para>Disabling this code can be done using the <literal>NONE</literal> option or by using the standard disable option for Autoconf-generated scripts.</para>
                     </listitem>
                  </varlistentry>
               </variablelist>
               <para>Another commonly used option is <option>--prefix</option> which is used to set the base directory for the installation. In a Win32 environment, be sure to use <filename>/</filename>'s as the path separator rather than <filename>\</filename>'s to be consistent with all other paths used by <command>configure</command> and the makefiles it generates.</para>
            </section>
            <section>
               <title>Regenerating Files</title>
               <para>After running <command>configure</command>, one of the generated files is a shell script called <filename>config.status</filename>. This script can be used to regenerate all the output files from their respective <filename>.in</filename> files without going through the entire configuration process again. This is useful, for example, when only a <filename>Makefile.in</filename> file changes without an update in the configure script. In general, when any <filename>.in</filename> file (other than <filename>configure.in</filename>) changes, <command>config.status</command> can be used to quickly incorporate the template file changes into the generated files.</para>
            </section>
            <section>
               <title>When to Run <command>configure</command> Again</title>
               <para>The configure script should always be run after it is regenerated from <filename>configure.in</filename>. Thus, whenever <command>autoconf</command> is run (see <xref linkend="autoconf-autoheader-sect"/> for more information), the script itself should be run again to ensure that the latest build environment is available.</para>
            </section>
            <section>
               <title>Advanced Use</title>
               <para>The VR Juggler configure script has been designed to work in a multi-platform environment. It allows Juggler to be built for multiple platforms using the same source tree (distributed with NFS for example) with all versions co-existing safely.</para>
               <para>To take advantage of this feature, make a directory somewhere for building the library. This directory can go anywhere, but the typical location is a subdirectory of the top-level Juggler source tree. (Note that on a Win32 platform, this directory MUST be a subdirectory of the Juggler source tree.) It can also be called whatever seems appropriate. A common name is <literal><filename></filename>build</literal>, and alternate options are <filename>build-PLATFORM</filename> where <filename>PLATFORM</filename> is the name of the platform on which VR Juggler is being built. Multiple build directories can exist side by side. They fully separate all parts of the compile process and can be removed safely at the root. After making the directory, <command>cd</command> into it and run the configure script from it. For example, if a directory called <filename>build</filename> has been created as a subdirectory of <filename>juggler</filename>, do the following:</para>
               <programlisting>cd build ../configure [options]</programlisting>
               <para>This will run the configure script as normal but will create a full, unique build environment as a subdirectory of <filename>build</filename>.</para>
               <para>So the question becomes <quote>To <filename>build</filename> or not to <filename>build</filename>?</quote> There are advantages to running <command>configure</command> from the top-level directory, and there are disadvantages to that method. A benefit of the simpler method is that it provides a quick start to building with no in-depth knowledge of the Juggler build system necessary. It has a <quote>familiar feel</quote> compared to other projects that use Autoconf-generated scripts for configuration. The main disadvantage of this method is that the generated files are <quote>next to</quote> the template files. As a developer, this can and has caused confusion about which file to modify. For example, it is very easy to forget that a quick modification to a <filename>Makefile</filename> will be destroyed when <command>configure</command> is run again if that change is not also made in the corresponding <filename>Makefile.in</filename>. It is also easy to want to check in a generated file when only the templates should be in the CVS repository.</para>
               <para>Similarly, there are advantages and disadvantages to creating a separate build environment. As mentioned above, building can be done for multiple operating systems using the same source tree. (This is how the NSPR API is currently built using their configure script.) In addition to building for multiple operating systems, it is possible to easily build multiple configurations from the same source tree. This is extremely useful for building different threading models and different ABI/ISA combinations to test changes in a single source tree. Also mentioned above, the entire build environment can be removed from the root. This is because all aspects of the build are separated from the source tree so that object files, makefiles, dependency files, etc. do not pollute the source tree. On the other hand, this is not a typical use of a configure script (though it is a documented method of configuration in the Autoconf documentation) and is thus not familiar to users. It can also result in complicated paths depending on where the build environment is rooted and how the path to <command>configure</command> is specified.</para>
            </section>
         </section>
         <section>
            <title>Debugging Configuration Errors</title>
            <para>When <command>configure</command> runs, a file called <filename>config.log</filename> is constantly updated in the working directory. When something goes wrong with the configuration process, the first thing to do is refer to the bottom of this file to see what was happening at the time of the error and why that step failed. Debugging the actual script is more difficult. Interested readers should refer to <xref linkend="build-system-extend-chapter"/> for more information on this particular topic.</para>
         </section>
         <section>
            <title>Template (<filename>.in</filename>) Files</title>
            <variablelist>
               <varlistentry>
                  <term>vjDefines.h.in</term>
                  <listitem>
                     <para>This file is the template for <filename>vjDefines.h</filename> (the equivalent of <filename>config.h</filename>) which is generated by <command> configure</command>. It provides definitions for various system-specific features that are available. <filename>vjDefines.h</filename> is included by <filename>vjConfig.h</filename> and should not be included by any source file directly. This file is generated by <command>autoheader</command> from <filename>configure.in</filename> and <filename>acconfig.h</filename> (<xref linkend="autoconf-autoheader-sect"/>) and is the only <filename>.in</filename> file that does not use the <command>configure</command> substitution strings (<varname>@VAR_NAME@</varname>). If modifications are necessary, they should be made to <filename>acconfig.h</filename>.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>Makefile.in</term>
                  <listitem>
                     <para>There are many <filename>Makefile.in</filename>'s in the Juggler source tree. All are used by <command>configure</command> to generate the actual makefiles that are used for compiling and installing Juggler. They make extensive use of the <command>configure</command> substitution strings. Modifications should always be made to the <filename>Makefile.in</filename> file. The full list of available substitutions is available near the bottom of <filename>configure.in</filename>. The file <filename>Makefile.base.in</filename> provides most of these values as makefile variables (macros) and can be included by other makefiles to maximize sharing.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>Other .in files</term>
                  <listitem>
                     <para>Besides the previous examples, <command>configure</command> can be used to generate any kind of file from a <filename>.in</filename> template file. The substitution strings are expanded just as they are in makefiles. An example of a generated file that takes advantage of this is <filename>VARS.pl.in</filename>, found in the top-level directory. It is used by the Perl script <filename>makefiles-gen.pl</filename> to do substitution in makefiles at installation time in the same manner as the configure script by storing the expanded strings in a Perl hash.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
         </section>
      </chapter>
      <chapter id="compile-vrj-chapter">
         <title>Compiling VR Juggler</title>
         <para>To improve portability and consistency across platforms, VR Juggler uses GNU make for building the library (installation is covered <xref linkend="install-vrj-chapter"/>). The makefiles used employ many features that are unique to GNU make thus requiring that people who wish to compile Juggler from its source are required to have it installed. The Juggler makefiles are known to to work with GNU make versions 3.78 and newer. To make sense of this documentation, please understand the concepts listed in <xref linkend="intro-req-reading"/>. Posting about these subjects to the mailing list will probably be ignored.</para>
         <para>In this chapter, the following conventions are used for text formatting and naming:</para>
         <itemizedlist>
            <listitem>
               <para>Program, file and directory names are represented <filename>this way</filename>.</para>
            </listitem>
            <listitem>
               <para>Commands that are intended to be run by the user are written in <command>this style</command>.</para>
            </listitem>
            <listitem>
               <para>References to system and library calls are written as <function>call_name</function>(##) where <quote>##</quote> is the manual section where that call's documentation can be found.</para>
            </listitem>
            <listitem>
               <para>Makefile targets are named as '<literal>target</literal>', and makefile variables are named as <varname>$(VAR_NAME)</varname>.</para>
            </listitem>
            <listitem>
               <para>Environment variables are named as defined in the <quote>Enviroment Variables</quote> chapter in the <emphasis>Getting Started Guide</emphasis>.</para>
            </listitem>
         </itemizedlist>
         <section id="compile-quick-start-sect">
            <title>General Quick Start</title>
            <para>As mentioned in the introduction, Juggler requires the use of GNU make for compiling. This section provides a very short introduction to the use of make in general. It is assumed that the GNU make command is <quote>gmake</quote>. To verify that the version of GNU available is one of the known working versions, do:</para>
            <programlisting>% gmake -v</programlisting>
            <para>It will return something similar to the following output:</para>
            <programlisting><emphasis>GNU Make version 3.79.1</emphasis>, by Richard Stallman and Roland McGrath.
Copyright (C) 1988, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 2000
        Free Software Foundation, Inc.
...</programlisting>
            <para>The emphasized text is the version information. For best results, this should be one of the version numbers listed in <xref linkend="required-tools-sect"/>.</para>
            <para>Most, if not all, versions of make (not just GNU make) use the following syntax for execution:</para>
            <cmdsynopsis>
               <command>make</command>
               <group>
                  <arg rep="repeat">VARIABLE=<replaceable>value</replaceable></arg>
                  <arg rep="repeat">target</arg>
               </group>
            </cmdsynopsis>
            <para>The options in square brackets are not required. The <literal>[...]</literal> strings mean that any number of the previous option can be given. If executed with no arguments, the default target will be built. This is either the first target defined in the corresponding makefile or one explicitly denoted as '<literal>default</literal>' in the makefile. Typically, the default target is '<literal>all</literal>'. Any target(s) can be built by simply naming them on the command line.</para>
            <para>Variables used in the makefile can be overridden by command-line arguments. Simply name the variable (e.g., <varname>CC</varname>, the C compiler command) and give it a value (e.g., <literal>CC=/usr/local/bin/gcc</literal>). This forces all references to the variable in the makefile to use what is on the command line.</para>
            <para>Other useful options for GNU make are the following:</para>
            <itemizedlist>
               <listitem>
                  <para><option>-k</option>: Keep going even when errors are encountered</para>
               </listitem>
               <listitem>
                  <para><option>-f filename</option>: Explicitly name the makefile to use instead of the default (either <filename>Makefile</filename> or <filename>makefile</filename> found in the current directory)</para>
               </listitem>
               <listitem>
                  <para><option>-j [count]</option>: Do a parallel build of the target(s), optionally limiting the number of processes spawned to <literal>count</literal></para>
               </listitem>
               <listitem>
                  <para><option>-l float-value</option>: Limit the load on the machine to the specified value when doing a parallel build</para>
               </listitem>
            </itemizedlist>
         </section>
         <section>
            <title>Targets</title>
            <para>This section describes all the targets related to building VR Juggler from its source code. The targets are grouped together depending upon how they are related. For information on what is actually done as part of the compiling process, see <xref linkend="build-process-sect"/>. A current list of all the targets (with descriptions) can be found at the top of <filename>Makefile.in</filename> in the top-level VR Juggler source directory.</para>
            <variablelist>
               <varlistentry>
                  <term>world</term>
                  <listitem>
                     <para>Clean up the build environment and then build and install everything using the default ABI and ISA. This is a simple target for those who just want to build and install VR Juggler as simply as possible. <quote>Everything</quote> in this case is the following:</para>
                     <itemizedlist>
                        <listitem>
                           <para>Debugging and optimized versions of the library binaries</para>
                        </listitem>
                        <listitem>
                           <para>Shared and static versions of the library binaries (if both are supported on the target platform)</para>
                        </listitem>
                        <listitem>
                           <para>Header files</para>
                        </listitem>
                        <listitem>
                           <para>Sample applications, test code and user tools</para>
                        </listitem>
                        <listitem>
                           <para>Data files (sample config files, model files, etc.)</para>
                        </listitem>
                        <listitem>
                           <para>VjControl (if it was built)</para>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>world-all-abi</term>
                  <listitem>
                     <para>This is the same as the '<literal>world</literal>' target except that it builds and installs <emphasis>all possible</emphasis> ABI and ISA combinations for the target platform. On IRIX, for example, this means that all combinations of N32, 64, mips3 and mips4 (debugging and optimized versions) are built and installed. Most platforms currently support only one ABI/ISA combination thus making this target the same as '<literal>world</literal>'.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>buildworld</term>
                  <listitem>
                     <para>This target is the same as '<literal>all</literal>'.; In other words, it builds everything. It executes the first phase of the '<literal>world</literal>' target (i.e., only the build phase, not the install phase). Since it builds both debugging and optimized versions of VR Juggler without installing, it is useful for testing changes to the library code to ensure that it works in both the debugging and optimized cases.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>all-abi</term>
                  <listitem>
                     <para>In the same manner as '<literal>world-all-abi</literal>', this target builds, but <emphasis>does not install</emphasis>, all possible ABI/ISA combinations for the target platform. Thus, it provides functionality that could also be called '<literal>buildworld-all-abi</literal>', but the length of such a target's name is unwieldy.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>debug</term>
                  <listitem>
                     <para>Build only the debugging version of the library binaries (both static and dynamic). In other words, the libraries are built so that debugging symbols are turned on. It is the combination of '<literal>dbg</literal>' and '<literal>ddso</literal>' (see below). <emphasis>This is the default target and is what gets built if running <command>make</command> with no arguments.</emphasis></para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>optim</term>
                  <listitem>
                     <para>Build only the optimized version of the library binaries (both static and dynamic). This is built with no debugging symbols at all. It is the combination of '<literal>opt</literal>' and '<literal>dso</literal>'.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>dbg</term>
                  <listitem>
                     <para>Build only the <emphasis>static</emphasis> debugging version of the libraries. This does the same thing as '<literal>debug</literal>' but does not compile the dynamic libraries.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>ddso</term>
                  <listitem>
                     <para>Build only the <emphasis>dynamic</emphasis> debugging version of the libraries. This does the same thing as '<literal>debug</literal>' but does not compile the static libraries.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>opt</term>
                  <listitem>
                     <para>Build only the <emphasis>static</emphasis> optimized version of the libraries. This does the same thing as '<literal>optim</literal>' but does not compile the dynamic libraries.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>dso</term>
                  <listitem>
                     <para>Build only the <emphasis>dynamic</emphasis> optimized version of the libraries. This does the same thing as '<literal>optim</literal>' but does not compile the static libraries.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>gui</term>
                  <listitem>
                     <para>Compile the VjControl Java files and collect them into <filename>VjControl.jar</filename>. This is only done if the configure script found a working Java compiler during its phase of the compile process.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>links</term>
                  <listitem>
                     <para>Set up the developer pseudo-installation environment. More detail is given on this subject below in <xref linkend="instlinks-sect"/>.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>clean</term>
                  <listitem>
                     <para>Clean up everything in the build environment. This uses a '<literal>clean</literal>' target defined in <filename>Makefile.base</filename> that is automatically shared by all makefiles that include that file. The cleaning process is recursive just as the build process is. Each makefile defines which files are safe for cleaning, but generally core files, compiler-generated files and object files are the only things removed during this process.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>cleandepend</term>
                  <listitem>
                     <para>Clean up the automatically generated dependency files (the <filename>.d</filename> files in each directory). This method for cleaning up deletes only these files and nothing else--ever.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>clean-links</term>
                  <listitem>
                     <para>Remove the developer pseudo-installation environment. More detail is given on this subject in <xref linkend="instlinks-sect"/>.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>clobber</term>
                  <listitem>
                     <para>Clean up (clobber) the entire build environment except what was generated by <command>configure</command>. This runs the previous clean-up targets and removes the object directory(ies) and <filename>lib</filename> directory(ies). Its purpose is to totally reset the build environment to its state just prior to running <command>configure</command>.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>info</term>
                  <listitem>
                     <para>Print out all the targets with short descriptions as well as default values for some variables that may be overridden by the user. For more information about variables in the Juggler makefiles, see <xref linkend="makefile-vars-sect"/>.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <para>Build targets executed from the top-level directory generate the object files in a directory tree created during compilation named as <filename>obj/platform/ABI/ISA/opt|debug</filename>. It is always a subdirectory of the top-level directory in the build environment. The path to this directory is passed as an argument to the recursive make process overriding the <varname>$(OBJDIR)</varname> variable.</para>
            <para>Similarly, a subtree is made for the library binaries. It is named as <filename>lib/ISA/opt|debug</filename> (or <filename>lib32/...</filename> or <filename>lib64/...</filename> depending on the platform and the ABI). Since the library binaries are built only by the <filename>Makefile</filename> in the top-level directory, it is only used by builds from that directory.</para>
            <para>Targets such as '<literal>dbg</literal>', '<literal>opt</literal>' and '<literal>clean</literal>' are available for use in the individual subdirectories. Building a target from within a subdirectory is localized to that subdirectory. Thus, all object files would be generated in the directory where the target was run rather than in the <filename>obj</filename> subdirectory. For example, the following process would build only the object files in the <filename>Config</filename> directory:</para>
            <programlisting>% cd Config
% gmake opt</programlisting>
            <para>Those object files can be removed by running the '<literal>clean</literal>' target in that directory.</para>
         </section>
         <section id="makefile-vars-sect">
            <title>Useful Variables</title>
            <para>As with all <command>make</command>-based build systems, variables used in the makefiles can be overridden by the user. This section describes variables that developers may find useful to override while compiling. The variables are listed alphabetically.</para>
            <variablelist>
               <varlistentry>
                  <term>prefix</term>
                  <listitem>
                     <para>Provide an alternate installation prefix than what was set at configuration time. Refer to <xref linkend="install-vrj-chapter"/> for more information about installing VR Juggler.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>vjABI</term>
                  <listitem>
                     <para>Define an alternate ABI/ISA combination than the default set by <command>configure</command>. This accepts exactly the same values as the <option>--with-abi</option> argument to the configure script. Results of its use can be seen near the bottom of <filename>Makefile.base</filename>.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>NO_CLEAN</term>
                  <listitem>
                     <para>Do not clobber the build environment (via the '<literal>clobber</literal>' target) before running the '<literal>world</literal>' target. Set this variable to <literal>1</literal> to enable it.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>NO_JAVA_GUI</term>
                  <listitem>
                     <para>Disable compiling and installing of VjControl by setting this variable to <literal>1</literal> when building. This is very handy when VjControl is not building properly or is not needed for whatever reason.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>OBJDIR</term>
                  <listitem>
                     <para>Set an alternate directory in which object files are created. The default method is to use the platform- and ABI-specific directory when compiling from the top-level directory or to use the current directory when compiling in a subdirectory.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>OBJ_FILE_SUFFIX</term>
                  <listitem>
                     <para>Choose an alternate suffix for object files that are compiled. When compiling with MS Visual C++, <quote>obj</quote> is the default. In all other cases, <quote>o</quote> is the default. Only specify the suffix, not the '.' as that is always present.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>PERL</term>
                  <listitem>
                     <para>Provide a different version of a Perl 5.004 or newer binary than what <command>configure</command> found.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
         </section>
         <section>
            <title>GNU Make Options</title>
            <para>Two options can be used with GNU make when compiling VR Juggler. They provide the capability to build the library in parallel to take advantage of hardware that can do this effectively. To enable parallel building, specify the <option>-j</option> argument on the command line. With no argument, there is no limit to the number of jobs that are spawned by the build process. An integer argument limits the number of jobs to that value.</para>
            <para>The second argument enforces load balancing on the machine while doing a parallel build. To do this, use the <option>-l</option> option with a floating-point value as the load limit. Note that to be allowed to do this, GNU make must be installed setgid on many platforms. When used in combination with the <option>-j</option> option, parallel compiling can be done while not loading the machine down too heavily.</para>
         </section>
         <section id="build-process-sect">
            <title>Process of Building (Individual Steps)</title>
            <para>This section describes the steps taken by the '<literal>world</literal>' target as it <emphasis>builds</emphasis> VR Juggler. All other build targets are subsets of '<literal>world</literal>', and this information can be applied accordingly. Note that '<literal>world</literal>' can only be run from the top-level directory of the build environment. The steps are:</para>
            <orderedlist>
               <listitem>
                  <para>Clobber the build environment so that it is as it would be after running <command>configure</command> in a clean directory tree.</para>
               </listitem>
               <listitem>
                  <para>Build the object files for the optimized version of the library binaries. Part of this process is to generate dependencies for each <filename>.c</filename> and <filename>.cpp</filename> file on the fly. These dependencies are listed in corresponding <filename>.d</filename> files and are updated automatically whenever a change in a source or header file is detected. All targets, except '<literal>cleandepend</literal>', run in the subdirectories of the source tree (not just the one that builds optimized object files) ensure that dependencies are up to date all the time. Compiling from the top-level directory of the build environment puts the optimized object files in a platform- and ABI-specific subdirectory named as <filename>obj/platform/ABI/ISA/opt</filename>.</para>
               </listitem>
               <listitem>
                  <para>Create the static and dynamic versions of the library binaries from the optimized object files. The binaries are built in the subdirectory named as <filename>lib/ISA/opt</filename> and are linked to from the <filename>lib</filename> directory. Note that <filename>lib</filename> may be named differently on some platforms. On IRIX, for example, depending on the default ABI, it may be named <filename>lib32</filename> or <filename>lib64</filename>. It is referred to as <filename>lib</filename> for simplicity.</para>
               </listitem>
               <listitem>
                  <para>Repeat steps 2 and 3 for the debugging version of the object files and library binaries.</para>
               </listitem>
               <listitem>
                  <para>Once all libraries are built, links are set up in the <filename>lib</filename> directory and its ISA subdirectory (if there is one) that point to the default library version. This is currently the debugging version since that is what developers are likely to use most frequently. These links overwrite those made in step 3 (and repeated in step 4).</para>
               </listitem>
               <listitem>
                  <para>Compile VjControl if the Java compiler is available and compiling of it has not been disabled by the user (refer to <xref linkend="makefile-vars-sect"/> for more information).</para>
               </listitem>
            </orderedlist>
            <para>The remainder of the work done is installation. More information on installing is available in <xref linkend="install-vrj-chapter"/>.</para>
         </section>
         <section id="instlinks-sect">
            <title>Developer <quote>Installation</quote></title>
            <para>To facilitate development of VR Juggler applications, an environment is created after compiling that simulates a fully installed version of the library and its components. This is done entirely within the build environment and is rooted in a directory called <filename>instlinks</filename> (a subdirectory of the top-level build directory).</para>
            <para>When the build process completes, a message is printed telling the developer the value to which s/he should set the environment variable <varname>$VJ_BASE_DIR</varname>. By doing this simple step, the developer is given a pseudo-installation where Juggler applications (that are part of the source tree) can be compiled and executed. These applications are linked statically on IRIX, but on all other UNIX-based platforms, they are linked dynamically. In those cases, <varname>$LD_LIBRARY_PATH</varname> should be set to the value <filename>$VJ_BASE_DIR/lib</filename> which is a normal step in the setup process for using an actual installation.</para>
            <para>As of this writing, this environment is not available on a Win32 platform. This is because the creation of it relies heavily on symbolic links. Because of this, Juggler must be fully installed for application development. Suggestions for enabling an equivalent development environment for Win32 are welcomed. It is possible, after installing Juggler, to continue working within the build environment. Set <varname>$VJ_BASE_DIR</varname> to the installation directory and continue working as on any other platform. All library binaries and headers will be referenced from the installed version, but source code (for applications as an example) comes from the Juggler source tree.</para>
         </section>
      </chapter>
      <chapter id="install-vrj-chapter">
         <title>Installing VR Juggler</title>
         <para>To improve portability and consistency across platforms, VR Juggler uses GNU make for installing the library (compiling is covered in <xref linkend="compile-vrj-chapter"/>). The makefiles used employ many features that are unique to GNU make thus requiring that people who wish to compile Juggler from its source are required to have it installed. The Juggler makefiles are known to to work with GNU make versions 3.78.1 and newer. To make sense of this documentation, please understand the concepts listed in <xref linkend="intro-req-reading"/>. Posting about these subjects to the mailing list will probably be ignored.</para>
         <para>In this chapter, the following conventions are used for text formatting and naming:</para>
         <itemizedlist>
            <listitem>
               <para>Program, file and directory names are represented <filename>this way</filename>.</para>
            </listitem>
            <listitem>
               <para>Commands that are intended to be run by the user are written in <command>this style</command>.</para>
            </listitem>
            <listitem>
               <para>References to system and library calls are written as <function>call_name</function>(##) where <quote>##</quote> is the manual section where that call's documentation can be found.</para>
            </listitem>
            <listitem>
               <para>Makefile targets are named as '<literal>target</literal>', and makefile variables are named as <varname>$(VAR_NAME)</varname>.</para>
            </listitem>
            <listitem>
               <para>Environment variables are named as defined in the <quote>Enviroment Variables</quote> chapter in the <emphasis>Getting Started Guide</emphasis>.</para>
            </listitem>
         </itemizedlist>
         <section>
            <title>General Quick Start</title>
            <para>Please refer to <xref linkend="compile-quick-start-sect"/>. The information there provides everything needed to get started with installing Juggler after building it.</para>
         </section>
         <section id="install-targets-sect">
            <title>Targets</title>
            <para>This section describes all the targets related to installing VR Juggler <emphasis>from its source code</emphasis>. The targets are grouped together depending upon how they are related. For information on what is actually done as part of the full installation process, refer to <xref linkend="install-process-sect"/>. A current list of all the targets (with descriptions) can be found at the top of <filename>Makefile.in</filename> in the top-level Juggler source directory.</para>
            <variablelist>
               <varlistentry>
                  <term>installworld</term>
                  <listitem>
                     <para>This target is the same as '<literal>install-all</literal>'. It performas a full installation of library binaries (both debugging and optimized for the default ABI/ISA combination) and all associated files. The steps taken for this installation are as described in <xref linkend="install-process-sect"/>. This is the essentially second phase of the '<literal>world</literal>' target described in <xref linkend="compile-vrj-chapter"/>. It requires that '<literal>buildworld</literal>' be successfully completed beforehand.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-all-abi</term>
                  <listitem>
                     <para>This is the same as the '<literal>installworld</literal>' target except that it installs <emphasis>all possible</emphasis> ABI and ISA combinations for the target platform. On IRIX, for example, this means that all combinations of N32, 64, mips3 and mips4 (debugging and optimized) are installed. Most platforms currently support only one ABI/ISA combination thus making this target exactly the same as '<literal>installworld</literal>'. The steps taken for this installation follow those described in <xref linkend="install-process-sect"/>.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-debug</term>
                  <listitem>
                     <para>This target is the same as '<literal>install</literal>'. It installs only the debugging version of the library binaries (both static and dynamic) and all associated files. It includes the combination of '<literal>install-dbg</literal>' and '<literal>install-ddso</literal>' (see below). The steps taken for this installation follow those described below. This is the target that is run when using the traditional <command>make install</command> command.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-dbg</term>
                  <listitem>
                     <para>Install only the <emphasis>static</emphasis> debugging version of the library binaries. Nothing besides the libraries is installed.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-ddso</term>
                  <listitem>
                     <para>Install only the <emphasis>dynamic</emphasis> debugging version of the library binaries. Nothing besides the libraries is installed.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-optim</term>
                  <listitem>
                     <para>Install only the optimized version of the library binaries (both static and dynamic) and all associated files. It includes the combination of '<literal>install-opt</literal>' and '<literal>install-dso</literal>' (see below). The steps taken for this installation follow those described in <xref linkend="install-process-sect"/>.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-opt</term>
                  <listitem>
                     <para>Install only the <emphasis>static</emphasis> optimized version of the library binaries. Nothing besides the libraries is installed.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-dso</term>
                  <listitem>
                     <para>Install only the <emphasis>dynamic</emphasis> optimized version of the library binaries. Nothing besides the libraries is installed.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-headers</term>
                  <listitem>
                     <para>Install all the header files from the VR Juggler source tree.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-samples</term>
                  <listitem>
                     <para>Install the sample applications and generate all the application makefiles from the <filename>Makefile.in</filename> templates. This makes a copy of the <filename>samples</filename> directory tree found in the VR Juggler source.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-test</term>
                  <listitem>
                     <para>Install the test code and generate all the application makefiles from the <filename>Makefile.in</filename> templates. This makes a copy of the <filename>test</filename> directory tree found in the VR Juggler source.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-tools</term>
                  <listitem>
                     <para>Install the user tools and generate all the necessary makefiles from the <filename>Makefile.in</filename> templates. This makes a copy of the <filename>tools</filename> directory tree found in the VR Juggler source.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-data</term>
                  <listitem>
                     <para>Install the standard VR Juggler data files. This makes a copy of the <filename>Data</filename> directory tree found in the VR Juggler source.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>install-gui</term>
                  <listitem>
                     <para>Install the VjControl JAR file and its runnable files. In a UNIX environment, the <filename>vjcontrol</filename> scripts are installed. On a Win32 platform, the <filename>vjcontrol.bat</filename> batch file is installed. This is done only if the configure script found a working Java compiler and the target is not being disabled via the <varname>$(NO_JAVA_GUI)</varname> variable.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>hier</term>
                  <listitem>
                     <para>Build the directory hierarchy for the installation. This is done before any of the <quote>full</quote> install targets ('<literal>installworld</literal>', '<literal>install-all-abi</literal>', '<literal>install-debug</literal>' and '<literal>install-optim</literal>') is run. This is useful for testing parts of the installation or doing partial installations. Run it before doing any testing to create the full install hierarchy and then run the selected install targets. For example, to install only the static debugging libraries with nothing else, do:</para>
                     <programlisting>make hier install-dbg</programlisting>
                  </listitem>
               </varlistentry>
            </variablelist>
         </section>
         <section>
            <title>Useful Variables</title>
            <para>As with all make-based build systems, variables used in the makefiles can be overridden by the user. This section describes variables that developers may find useful to override while installing. The variables are listed alphabetically.</para>
            <variablelist>
               <varlistentry>
                  <term>prefix</term>
                  <listitem>
                     <para>Provide an alternate installation prefix than what was set at configuration time. This is handy if testing the installation process or if no prefix was given at configuration time. Specifying a value for this variable is all that is necessary to change the entire installation path of Juggler.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>vjABI</term>
                  <listitem>
                     <para>Define an alternate ABI/ISA combination than the default set by <command>configure</command>. This accepts exactly the same values as the <option>--with-abi</option> argument to the configure script. Results of its use can be seen near the bottom of <filename>Makefile.base</filename>. If this was used as part of compiling, it must also be used for installing to ensure that everything is installed properly.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>NO_JAVA_GUI</term>
                  <listitem>
                     <para>Disable ths installation of VjControl by setting this variable to <literal>1</literal> when building. This is very handy when VjControl is not building properly or is not needed for whatever reason.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <variablelist>
               <varlistentry>
                  <term>PERL</term>
                  <listitem>
                     <para>Provide a different version of a Perl 5.004 or newer binary than what <command>configure</command> found. Perl is crucial to the installation process because several Perl scripts are used (see <xref linkend="custom-scripts-sect"/>). If it necessary to use a different perl binary than the one that <command>configure</command> found, it can be named with this variable. All Perl scripts will use it.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
         </section>
         <section id="install-process-sect">
            <title>Process of Full Install (Individual Steps)</title>
            <para>This section describes the steps taken by the <quote>full</quote> installation targets '<literal>installworld</literal>', '<literal>install-all-abi</literal>', '<literal>install-debug</literal>', and '<literal>install-optim</literal>' when they are run by the user. These four targets install library binaries and all associated VR Juggler files (data files, VjControl, headers, sample apps, etc.). The steps are:</para>
            <orderedlist>
               <listitem>
                  <para>Do any pre-installation steps necessary. This includes creating the entire installation directory hierarchy.</para>
               </listitem>
               <listitem>
                  <para>Install the library binaries (those that are appropriate for the target being run). Refer to <xref linkend="install-targets-sect"/> for information on which binaries are installed by which targets. In particular, the '<literal>installworld</literal>' target sets up links in the installed <literal>lib</literal> directory pointing to the default library version (currently the debugging version).</para>
               </listitem>
               <listitem>
                  <para>Install all the header files needed for compiling applications.</para>
               </listitem>
               <listitem>
                  <para>Install all the sample code provided as examples of working VR Juggler applications.</para>
               </listitem>
               <listitem>
                  <para>Install the test code provided for testing various aspects of VR Juggler (threads, math, input devices, etc.) to ensure that it is in good working order.</para>
               </listitem>
               <listitem>
                  <para>Install the various user tools included as helper applications in using VR Juggler.</para>
               </listitem>
               <listitem>
                  <para>Install all the data files (config files, gesture files, calibration tables, etc.).</para>
               </listitem>
               <listitem>
                  <para>Install VjControl (if it was built).</para>
               </listitem>
               <listitem>
                  <para>Do any post-installation steps necessary. Currently, nothing is done at this stage except informing the user that installation is complete.</para>
               </listitem>
            </orderedlist>
         </section>
         <section id="custom-scripts-sect">
            <title>Custom Scripts</title>
            <para>The installation process heavily depends on scripts written for VR Juggler. Most of the scripts themselves are generalized such that they are not specific to Juggler, and in the case of <filename>mtree.pl</filename>, the script is written to fill in if the <command>mtree</command>(1) application is not found by <command>configure</command>. The use of each script is described in detail here.</para>
            <section>
               <title><command>mtree</command>(1) and <command>mtree.pl</command></title>
               <para><command>mtree</command>(1) is a utility for mapping directory hierarchies. It dates back to 4.3BSD-Reno, and development of it has continued in FreeBSD and in NetBSD. <command>mtree.pl</command> is a Perl script written to mimic the behavior of <command>mtree</command>(1) (the version distributed with FreeBSD 3.0) so that Juggler's installation can take advantage of its features on platforms without <command>mtree</command>(1). The two are not completely functionally equivalent at this time, but the basic features needed by VR Juggler are present.</para>
               <para>The key aspect of <command>mtree</command>(1) that the Juggler installation uses is the creation of directory hierarchies from specification files (named with the extension <filename>.dist</filename>). These specifications can be used to create the full installation tree with all directories guaranteed to have the same permissions and ownership. The actual specification files are generated by <command>configure</command> from template files to allow maximum flexibility. One key file, <filename>VJ.lib.dist</filename>, is generated by <command>configure</command> from scratch (i.e., without a template) so that it can take advantage of <command>configure</command>'s internal knowledge about the target platform.</para>
               <para>The options that are used during installation are the following:</para>
               <variablelist>
                  <varlistentry>
                     <term>-U</term>
                     <listitem>
                        <para>If any of the owner, group or permissions for a directory do not match the specification, update them accordingly. All three must be specified for a missing directory to be created. (Note that this extra stipulation is not yet implemented in <command>mtree.pl</command>.) On a Win32 platform, the owner and group are essentially meaningless because the Perl 5 port does not implement the functions that can read and modify ownership.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>-d</term>
                     <listitem>
                        <para>Ignore everything except directory file types. This is used only for ensuring the integrity of the directory hierarchy.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>-e</term>
                     <listitem>
                        <para>Ignore files in the hierarchy that are not in the specification. This is especially important since the VR Juggler specification files only contain directory information.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>-f specification file</term>
                     <listitem>
                        <para>Read from the named specification file rather than from the standard input.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>-p path</term>
                     <listitem>
                        <para>Start at the name directory rather than the current directory.</para>
                     </listitem>
                  </varlistentry>
               </variablelist>
               <para><command>mtree</command>(1) provides a wide range of features but unfortunately not all are implemented in <command>mtree.pl</command>. For example, besides being used to build a hierarchy, it can be used to generate a specification file for an existing hierarchy. For more information about what can be done with this utility, refer to the manual page if <command>mtree</command>(1) is distributed with the operating system. More work on bringing the two closer together in functional equivalence is anticipated.</para>
            </section>
            <section>
               <title><command>install-dir.pl</command></title>
               <para>This Perl 5 script is used to install an entire directory tree without any of the <filename>CVS</filename> directories. Its use is very simple. In general, the base of the tree to be installed and the destination directory are all that is necessary. The basic usage is:</para>
               <cmdsynopsis>
                  <command>install-dir.pl</command>
                  <group>
                     <arg choice="req">-i <replaceable>source directory</replaceable></arg>
                     <arg choice="req">-o <replaceable>destination directory</replaceable></arg>
                     <arg>-u <replaceable>user name</replaceable></arg>
                     <arg>-g <replaceable>group name</replaceable></arg>
                     <arg>-m <replaceable>mode</replaceable></arg>
                  </group>
               </cmdsynopsis>
               <para>Options for the script are as follows:</para>
               <variablelist>
                  <varlistentry>
                     <term>-i source directory</term>
                     <listitem>
                        <para>Name the directory to be installed. <emphasis>Required</emphasis>.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>-o destination directory</term>
                     <listitem>
                        <para>Name the directory to which source directory is installed. <emphasis>Required</emphasis>.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>-u user name</term>
                     <listitem>
                        <para>Name the user that will own the installed files and directories. This has no meaning on a Win32 platform.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>-g group name</term>
                     <listitem>
                        <para>Name the group that will own the installed files and directories. This has no meaning on a Win32 platform.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>-m mode</term>
                     <listitem>
                        <para>Provide the permission bits (UNIX octal style) of the installed files. Note that this sets the same permissions for all files. If used in combination with <command>mtree</command>(1), permissions can be set on a per-file basis after this script is run.</para>
                     </listitem>
                  </varlistentry>
               </variablelist>
               <para>Currently, this script is used to install the <filename>Data</filename> directory since it contains no source files (see <command>install-src.pl</command> below), and it is used in the process of creating <filename>VjControl.jar</filename>. Thus, it is versatile enough to be used during both the compile and install phases.</para>
            </section>
            <section>
               <title><command>install-src.pl</command></title>
               <para>Similar to <command>install-dir.pl</command>, this script installs the contents of a directory tree to a specified location. It is, however, more selective in what it installs. Only source files of recognized types (<filename>.txt</filename>, <filename>.TXT</filename>, <filename>.C</filename>, <filename>.c</filename>, <filename>.h</filename>, <filename>.cxx</filename>, <filename>.CXX</filename>, <filename>.cpp</filename>, <filename>.CPP</filename> and makefiles) are copied from the source to the destination. Any <filename>CVS</filename> directories are not copied over. The options for this script are exactly the same as those for <command>install-dir.pl</command>.</para>
            </section>
            <section>
               <title><command>makefiles-gen.pl</command></title>
               <para>This script is used to perform the same functions as <command>configure</command> when it expands the <quote><literal>@...@</literal></quote> strings in <filename>.in</filename> template files. Its use is reserved for the installation phase rather than the configuration phase. The installation process copies over many <filename>Makefile.in</filename>'s that <command>configure</command> would normally generate for use by developers. To simplify maintenance, the same template files are used for installations that users can access. Since the templates still contain the <quote><literal>@...@</literal></quote> strings, they must be expanded again. Thus, <command>makefiles-gen.pl</command> steps in for this purpose.</para>
               <para>Options for <literal>makefiles-gen.pl</literal> are slightly different from any of the other scripts. It uses GNU-style options for the sake of clarity since some of the options correspond directly to a <quote><literal>@...@</literal></quote> string to be expanded. The options described here are required unless otherwise noted.</para>
               <variablelist>
                  <varlistentry>
                     <term>--vars=filename</term>
                     <listitem>
                        <para>The name of the file given for this option is a Perl file containing <quote><literal>@...@</literal></quote> substitution <emphasis>values</emphasis>. These are used when replacing the <quote><literal>@...@</literal></quote> strings in the template files. For more information about this file, see the paragraph following this list. Note that the file name given should be the one generated by <command>configure</command> and not the <filename>.in</filename> template version. The generated file has the expanded strings that this script needs for its job.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--srcdir=path</term>
                     <listitem>
                        <para>This option is typically a simple value providing a path to the source code <emphasis>relative to the makefile</emphasis>. In almost all cases, it will be `<filename>.</filename>' since the source code and the <filename>Makefile</filename> being generated are in the same directory. This replaces <literal>@srcdir@</literal>.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--prefix=path</term>
                     <listitem>
                        <para>Use this option to name the base directory where the <filename>Makefile</filename>'s will go. For example, to generate the makefiles in the <filename>samples</filename> installed subtree, the path given is <filename>$(datadir)/samples</filename>.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--srcdir=path</term>
                     <listitem>
                        <para>This option names the base of the directory tree containing the <emphasis><filename>Makefile.in</filename> templates</emphasis>. In other words, it is a subdirectory in the Juggler source tree in which the recursive search for <filename>Makefile.in</filename>'s starts.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--SUBDIRS=directory list</term>
                     <listitem>
                        <para>In conjunction with the previous option, name the directories to be searched for <filename>Makefile.in</filename> templates. Only the directories here will be searched and used in the generation process.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--uname=owner's user name</term>
                     <listitem>
                        <para>Give the name of the user who will own the installed files. This option has no meaning on a Win32 platform. This option is not required.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--gname=group name</term>
                     <listitem>
                        <para>Give the name of the group that will own the installed files. This option has no meaning on a Win32 platform. This option is not required.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>--mode=mode bits</term>
                     <listitem>
                        <para>Give the permissions (UNIX octal style) to be set for the installed files. This defaults to the running user's umask. This option is not required.</para>
                     </listitem>
                  </varlistentry>
               </variablelist>
               <para>The key to this script is <filename>VARS.pl.in</filename>, located in the top-level VR Juggler source directory. It is a Perl file that can be evaluated at run time by the script to set values used for substitution. The format used in the file is:</para>
               <programlisting>$VARS{'<emphasis>VAR_NAME</emphasis>'} = '@<emphasis>VAR_NAME</emphasis>@';</programlisting>
               <para>Note that <literal>VAR_NAME</literal> should be the same in both places for ease of understanding. The <varname>%VARS</varname> hash is used in the substitution process. Occurrences of its keys found in a <filename>Makefile.in</filename> are replaced with the value associated with that key (the expanded <quote><literal>@...@</literal></quote> string). Also note the use of apostrophes to prevent expansion of variables by the Perl interpreter. Be careful to use the right string delimiters when adding new values.</para>
            </section>
            <section>
               <title>InstallOps Perl Module</title>
               <para>Many of these Perl scripts use the InstallOps module (found in <filename>InstallOps.pm</filename> with the other scripts). This module provides subroutines implementing commonly used techniques in working with directory trees and files during installation. Ideally, it is general enough to be used in writing new scripts that can be added to the installation process. A short description of the available subroutines and their use is provided here.</para>
               <funcsynopsis>
                  <funcprototype>
                     <funcdef><function>recurseDir</function></funcdef>
                     <paramdef><funcparams>$start_dir, $base_inst_dir</funcparams></paramdef>
                  </funcprototype>
                  <funcsynopsisinfo>Recurse through the given directory tree beginning at <varname>$start_dir</varname>. The second argument, <varname>$base_inst_dir</varname>, names the base directory to which the files will be installed. This routine requires that the calling package define a subroutine called <function>recurseAction()</function> that defines what actions to take when a normal file is encountered during the recursion process. It is only called when non-directory type files are found in the current directory of the recursion process. Since this is specialized for installation, it ensures that the destination directories (rooted at <varname>$base_inst_dir</varname>) exist.</funcsynopsisinfo>
               </funcsynopsis>
               <funcsynopsis>
                  <funcprototype>
                     <funcdef><function>newDir</function></funcdef>
                     <paramdef><funcparams>$base_dir, $newdir</funcparams></paramdef>
                  </funcprototype>
                  <funcsynopsisinfo>Create a new directory (<varname>$newdir</varname>) in a given directory tree (<varname>$base_dir</varname>). If it already exists, it is not created.</funcsynopsisinfo>
               </funcsynopsis>
               <funcsynopsis>
                  <funcprototype>
                     <funcdef><function>installFile</function></funcdef>
                     <paramdef><funcparams>$filename, $uid, $gid, $mode, $dest_dir</funcparams></paramdef>
                  </funcprototype>
                  <funcsynopsisinfo>Install a given file (<varname>$filename</varname>) with specified permissions (<varname>$mode</varname>) in UNIX octal style to a destination directory (<varname>$dest_dir</varname>). Ownership is set based on the provided values for <varname>$uid</varname> and <varname>$gid</varname> (which has no effect on a Win32 platform).</funcsynopsisinfo>
               </funcsynopsis>
               <funcsynopsis>
                  <funcprototype>
                     <funcdef><function>replaceTags</function></funcdef>
                     <paramdef><funcparams>Replace tags of the form <literal>@...@</literal> in the given file (<varname>$infile</varname>) with known replacement values (found in <varname>%VARS</varname>). The tags are the keys of <varname>%VARS</varname>, and the replacement values are the values associated with those keys.</funcparams></paramdef>
                  </funcprototype>
               </funcsynopsis>
            </section>
         </section>
      </chapter>
      <chapter id="build-system-extend-chapter">
         <title>Maintaining and Extending the Build System</title>
         <para>Someday, I will write this.</para>
      </chapter>
   </part>
   <part>
      <title>User Community</title>
      <chapter>
         <title>Contributing to VR Juggler</title>
         <para>Part of being an open source project includes accepting contributions from the user community. When members of the user community contribute code to a project, everyone benefits. In this chapter, we explain why contributions are helpful, and we expalin how to make contributions.</para>
         <section>
            <title>Reasons to Contribute</title>
            <para>People who have limited experience with open source projects may not be familiar with the ideas surrounding user contributions. Because users have direct access to the source code, they have the opportunity to fix bugs, add new features, and otherwise improve the project. When users make such changes, they send them to the development team for inclusion in the next release.</para>
            <section>
               <title>Why is VR Juggler cool, why do I care?</title>
               <para>VR technology as a whole is stagnating with its closed source solutions. This means that anyone new to VR need to completely develop a new solution, often inferior than others. Releasing an open VR system is vital to the development of VR. Now instead of reimplementing VR systems, people can focus on implementing new VR ideas and methods all relying on this standard technology to be there, and free from cost or legal ties.</para>
            </section>
            <section>
               <title>Why Should I, an Intelligent, Helpful Person, Contribute to the Development of VR Juggler?</title>
               <para>Because VR Juggler will benefit from your efforts, that's why! As an OpenSource project, we want your help, your input, your ideas, and most of all, your code contributions. You don't have to be a hot-shot, fast CPUs, fast downloads programmer to contribute. VR Juggler is a big project, and it is still growing. Whether your background is in UNIX-based systems or Win32, you can help. We want motivated, creative people to help us make VR Juggler the world's best virtual reality platform. If you're still not convinced, take a look at the rest of this page for some more motivation.</para>
            </section>
            <section>
               <title>I Want to Fix a Bug</title>
               <para>Only the most trivial software is bug free, and VR Juggler is certainly non-trivial. We do our best to track down and fix bugs, but our fly swatter is only so big. If you find a bug, then by all means, <ulink url="http://sourceforge.net/tracker/?group_id=8041&amp;atid=108041">submit a bug report</ulink> and give us a patch! Don't worry, we won't be too embarrassed.</para>
            </section>
            <section>
               <title>I Want to Add New Features</title>
               <para>As with most projects, the features present in VR Juggler are those deemed necessary by the developers and users. New features are added, but the developers with commit access only have so much time each day to devote to the advancement of the source. With a growing user base and advances in the field of virtual reality, new features help everyone. If you have an idea or some earth-shattering code, we want to see it!</para>
            </section>
            <section>
               <title>I Want to Add Missing Features</title>
               <para>Everyone in the field of virtual reality has differing ideas, goals and equipment. If VR Juggler is to prove usable as the basis for advanced (and not-so-advanced) virtual reality applications, it will need to provide support for the needs of as many users as possible. Getting to this point means that missing features need to be added by someone. Eventually, the current developers could find the time to meet everyone's needs, but those needs can be met faster with the help of contributors.</para>
               <para>The most obvious case of a missing features is a driver for Device X. VR Juggler provides a highly flexible mechanism for adding a device driver to the source. If you have driver source code for a currently unsupported device, chances are that driver can be added to VR Juggler easily.</para>
               <para>Other examples of missing features can include a wide variety of extensions. To save yourself time, it would be best to discuss your ideas in a public VR Juggler forum (insert vrjuggler-devel link) first so that you can get feedback on whether your ideas are applicable to the VR Juggler core or would be better suited to a higher-level tool.</para>
            </section>
            <section>
               <title>I Think the Current Developers are Overworked</title>
               <para>The VR Juggler team loves what it does and is excited about VR Juggler and its continued development. We are, however, a small group with big ideas and busy schedules. We want your help because, with support from many bright, creative developers, we think that VR Juggler can achieve these big goals and more.</para>
            </section>
            <section>
               <title>Yes, I Want to Contribute! Where Do I Go From Here?</title>
               <para>The remainder of this chapter details the rules for contribution, the steps to create and submit patches, the steps to become a full-fledged developer with commit access. Read on!</para>
            </section>
         </section>
         <section id="contrib-rules-sect">
            <title> Rules for Contributions</title>
            <para>Now that you have decided that you're more than cool enough to contribute to VR Juggler, it is time for some ground rules. These rules are here to help the committers take advantage of your help with maximum efficiency and speed, so please do your best to keep them in mind.</para>
            <section>
               <title>Submitting Patches to Fix Bugs</title>
               <para>The best way to do this is with a <ulink url="http://sourceforge.net/tracker/?group_id=8041&amp;atid=108041">bug report</ulink>. Copies of bug reports go to <ulink url="http://sourceforge.net/mail/?group_id=8041">vrjuggler-devel@lists.sourceforge.net</ulink> where they are seen by everyone subscribed. Before submitting a bug report, however, please review the <ulink url="http://sourceforge.net/bugs/?group_id=8041">open bugs</ulink> to verify that the bug you have found is not already reported. If you have a fix for an open bug, attach your patch as a follow-up comment.</para>
               <para>If you have found an unreported bug, your bug report should contain the following information:</para>
               <itemizedlist>
                  <listitem>
                     <para>Who you are (so we can give you credit if your patch is committed)</para>
                  </listitem>
                  <listitem>
                     <para>The version of VR Juggler you are using</para>
                  </listitem>
                  <listitem>
                     <para>The environment in which you are working (for example, operating system name and version, compiler version, etc.)</para>
                  </listitem>
                  <listitem>
                     <para>A full description of the bug</para>
                  </listitem>
                  <listitem>
                     <para>How to repeat the problem</para>
                  </listitem>
                  <listitem>
                     <para>How to fix the problem (in other words, explain how your patch fixes the problem)</para>
                  </listitem>
               </itemizedlist>
               <para>The interested developer(s) will take responsibility for reviewing your patch and follow up with comments as appropriate. If and when your patch is committed, you will be given due credit for the submission. Woo hoo!</para>
            </section>
         </section>
         <section>
            <title>Submitting New Features, Implementing Missing Features</title>
            <para>If you have a new feature to submit for addition to VR Juggler, you have hit the big time, baby! The best way to present what will most likely be a large patch is to post it on <ulink url="mailto:vrjuggler-devel@lists.sourceforge.net">vrjuggler-devel@lists.sourceforge.net</ulink> for review. When doing this, please include the following information:</para>
            <itemizedlist>
               <listitem>
                  <para>A <emphasis>full</emphasis> description of your feature and how it works</para>
               </listitem>
               <listitem>
                  <para>Some reasoning about why your feature should be added</para>
               </listitem>
               <listitem>
                  <para>The patch itself as a text/plain attachment if possible (this makes it easier for us to apply the patch and test it out)</para>
               </listitem>
            </itemizedlist>
            <para>Ideally, your patch will include fully documented code so that the developers do not have to read the code, get a good understanding of it and document it themselves. Including documentation, therefore, is a big plus when trying to get something committed. Hint, hint.</para>
         </section>
         <section>
            <title>Creating and Submitting Patches</title>
            <para>This document explains in detail how to create patches to the VR Juggler developers for reviewing and (hopefully) committing, and it provides pointers on what the best audience for your patch may be. The information presented is based on the method used by the UNIX <command>diff</command>(1) and <command>patch</command>(1) utilities because that is what CVS uses.</para>
            <section>
               <title>Recommended Reading</title>
               <itemizedlist>
                  <listitem>
                     <para>Rules for making contributions (see <xref linkend="contrib-rules-sect"/>)</para>
                  </listitem>
                  <listitem>
                     <para>CVS documentation</para>
                  </listitem>
                  <listitem>
                     <para><command>diff</command>(1) man page</para>
                  </listitem>
               </itemizedlist>
            </section>
            <section>
               <title>Making a Patch</title>
               <para>There are two ways to create a patch to the VR Juggler source: using a copy of the source code checked out from CVS or making a comparison against an unmodified copy of a file. The first way is more convenient, but the second method does not necessarily require CVS knowledge.</para>
               <section>
                  <title>Using CVS to Make a Patch</title>
                  <para>If you have checked out a copy of the VR Juggler source code and have been modifying the code in that tree, making a patch (big or small) is easy. (Refer to the CVS documentation for information on how to check out a copy of VR Juggler from the CVS repository.) You can edit the checked-out file(s) all you want without retaining a backup copy because you can always get an unmodified version from the repository.</para>
                  <para>Once your work is done and you are ready to create the patch, you want to use the <command>cvs diff</command> command to get the differences between the original version and your new work. This command is a capable of doing a lot more than just creating patches, but we will focus only on that aspect of it here. Assuming a shell that allows redirection of standard output to a file, the command should be used as follows to create the patch for a single file:</para>
                  <programlisting>% cvs diff filename filename.patch</programlisting>
                  <para>Since CVS knows about the entire repository, you can use <command>cvs diff</command> to make a larger patch of several files, a single directory, a subtree of the larger directory tree or the entire VR Juggler source tree. You should be careful to keep only related patches together in a single file. Examples of how to perform each of these operations follow.</para>
                  <itemizedlist>
                     <listitem>
                        <para>Patching several files: You can of course use wildcard expansions here as supported by your shell.</para>
                        <programlisting>% cvs diff filename1 filename2 ... patch</programlisting>
                     </listitem>
                     <listitem>
                        <para>Patching all the files in a directory (either the current directory or some subdirectory of the whole VR Juggler source tree): </para>
                        <programlisting>% cvs diff directory_name patch</programlisting>
                        <para>Here, you can use `<filename>.</filename>' to represent the current directory as usual. If the directory you are patching contains subdirectories, CVS will recurse into those by default and perform the diff operation there as well. To prevent recursion, use the standard <option>-l</option> (local) CVS command option:</para>
                        <programlisting>% cvs diff -l directory_name patch</programlisting>
                     </listitem>
                     <listitem>
                        <para>Creating a patch against the entire VR Juggler source tree works just the same as the previous method except that is executed from the top-level directory of the source tree.</para>
                     </listitem>
                  </itemizedlist>
               </section>
               <section>
                  <title>Using <command>diff</command>(1) to Make a Patch</title>
                  <para>Instead of using CVS to get the source and make the comparison (which can be slow if your network connection to SourceForge is hurting), it is possible to make a patch the <quote>old-fashioned way</quote>. Before editing a file, however, <emphasis>make sure to save a backup copy of it</emphasis>. You need this for comparison once your modifications are complete. The common convention is to make a copy the old file with the same name and extra extension (for example, <filename>vjThread.cpp.orig</filename>). Once you are satisfied that your work is complete, use the <command>diff</command>(1) utility to create the patch as follows (assuming a shell that supports redirection of standard out to a file):</para>
                  <programlisting>% diff [options] filename.orig filename filename.patch</programlisting>
                  <para>This must be repeated for every modified file. Make sure that the original file always goes <emphasis>first</emphasis>.</para>
                  <para>A nice thing about the <command>patch</command>(1) utility is that it can extract multiple patches from a single file. Submitting a single file is certain to make the developers happier than dealing with individual patch files for every file you modified. (Of course, you should not just lump all your patches into one file if they are unrelated. Use common sense when creating the patch files, and everything will be fab.) Assuming a UNIX or UNIX-like shell with redirection and appending of files, there are two ways to combine individual patches into a single file:</para>
                  <orderedlist>
                     <listitem>
                        <para>Create a patch file and append subsequent patches to it: </para>
                        <programlisting>% diff [options] filename1.orig filename1 $HOME/my.patch
% diff [options] filename2.orig filename2 $HOME/my.patch
% ...</programlisting>
                     </listitem>
                     <listitem>
                        <para>If that does not suit you, you can use the simple yet powerful <command>cat</command>(1) command to concatenate all your distinct patch files into one big patch: </para>
                        <programlisting>% diff [options] filename1.orig filename1 $HOME/filename1.patch
% diff [options] filename2.orig filename2 $HOME/filename2.patch
% ...
% cat $HOME/filename1.patch $HOME/filename2.patch ... &gt; my_big_patch</programlisting>
                     </listitem>
                  </orderedlist>
               </section>
               <section>
                  <title>Patch Formats</title>
                  <para>There are three styles of diffs that can be generated for use as patches: standard diff, unified diff and context diff. In the author's experience, unified diffs are the easiest to read, and standard diffs are the hardest to read. The following two pages from the enline VR Juggler CVS repository show how unified and context diffs look:</para>
                  <itemizedlist>
                     <listitem>
                        <para><ulink url="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/vrjuggler/juggler_1.0/configure.in.diff?r1=text&amp;tr1=1.259&amp;r2=text&amp;tr2=1.260&amp;diff_format=u">Unified diff</ulink> between Revisions 1.259 and 1.260 of <filename>configure.in</filename></para>
                     </listitem>
                     <listitem>
                        <para><ulink url="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/vrjuggler/juggler_1.0/configure.in.diff?r1=text&amp;tr1=1.259&amp;r2=text&amp;tr2=1.260&amp;diff_format=c">Context diff</ulink> between Revisions 1.259 and 1.260 of <filename>configure.in</filename></para>
                     </listitem>
                  </itemizedlist>
                  <para>We cannot generate <ulink url="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/vrjuggler/juggler_1.0/configure.in.diff?r1=text&amp;tr1=1.259&amp;r2=text&amp;tr2=1.260&amp;diff_format=l">fancy, colored diffs</ulink> for use as patches unfortunately. It certainly is nice that <ulink url="http://stud.fh-heilbronn.de/~zeller/cgi/cvsweb.cgi/"><command>cvsweb</command></ulink> will do that, however.</para>
                  <para>To generate a unified diff, specify the option <option>-u</option> on the command line when running the diff command. To create a context diff, specify the <option>-c</option> option instead. To create a standard diff, give no options at all. These work with both the CVS diff command and the <command>diff</command>(1) utility. To always create a specific kind of diff by default with CVS, add the following line to your <filename>$HOME/.cvsrc</filename> file:</para>
                  <programlisting>diff <emphasis>option</emphasis></programlisting>
               </section>
            </section>
            <section>
               <title>Submitting Patches</title>
               <para>Now that you have made your patches, it's time to send them off to the VR Juggler developers with commit access so that they can review them, commit them and praise you for your fine efforts. Before reading this section, please be sure to have read <xref linkend="contrib-rules-sect"/>. Failing to follow these rules could result in your slow review and/or acceptance of your patches. What is presented here will repeat some of what is written in that document, but it is important to read both.</para>
               <para>The method used to present your patches to the committers depends on what kind of patches you have made. As of this writing, the most common types of patches we would like to see and expect to see are as follows:</para>
               <itemizedlist>
                  <listitem>
                     <para><emphasis>Bug fixes</emphasis>: VR Juggler is not free of bugs, and patches from users who fix bugs are very welcome</para>
                  </listitem>
                  <listitem>
                     <para><emphasis>Feature enhancements</emphasis>: VR Juggler offers a lot of features to users, but some interfaces may be incomplete or could be further extended</para>
                  </listitem>
                  <listitem>
                     <para><emphasis>Feature additions</emphasis>: VR Juggler needs more device drivers and abstractions useful to programmers who are developing VR applications every day</para>
                  </listitem>
               </itemizedlist>
               <para>If your patch is accepted, you will be given proper credit in the commit log as follows:</para>
               <programlisting><emphasis>Description of patch</emphasis>

    Submitted by: Helpful User great.person@wonderful.net</programlisting>
               <section>
                  <title>Submitting Bug Fixes</title>
                  <para>This is probably the most common type of patch VR Juggler users will submit. The best way to submit a patch for a bug is to attach it to a <ulink url="http://sourceforge.net/tracker/?group_id=8041&amp;atid=108041">bug report</ulink> through <ulink url="http://sourceforge.net/">SourceForge</ulink>. Copies of bug reports are sent to <ulink url="http://sourceforge.net/mail/?group_id=8041">vrjuggler-devel@lists.sourceforge.net</ulink> where all subscribers of that list see them. The bug report will be assigned to a developer with commit access, and that person will take charge of reviewing your patch and any further communication with you, the helpful submitter.</para>
               </section>
               <section>
                  <title>Submitting Feature Enhancements</title>
                  <para>Submitting an enhancement to existing code requires a little bit more work than submitting a bug report. If you are implementing part of an interface that is not yet finished (for example, a method that only prints out <quote>Not implemented yet!</quote>), you should submit a <ulink url="http://sourceforge.net/tracker/?group_id=8041&amp;atid=108041">bug report</ulink> as above but describe it as a feature enhancement in your report. If you are extending an interface, you should first submit your proposed changes (in a high-level format with some pseudocode if appropriate) to <ulink url="mailto:vrjuggler-devel@lists.sourceforge.net">vrjuggler-devel@lists.sourceforge.net</ulink> for discussion before doing any hard work making the changes. This will allow interested people to respond with feedback, questions or a short <quote>Go for it!</quote> message. Once your patches are ready, then you should submit them to the list for reviewing before an interested committer will take them and actually commit them.</para>
               </section>
               <section>
                  <title>Submitting Feature Additions</title>
                  <para>Feature additions stand to be controversial if not presented properly. For example, if you want to submit a complex computational geometry algorithm implementation, you had better have a really good reason. The first step you should take is a high-level proposal to <ulink url="mailto:vrjuggler-devel@lists.sourceforge.net">vrjuggler-devel@lists.sourceforge.net</ulink> which will no doubt generate much good discussion among developers. This step is encouraged to find out if people are interested in seeing your features as a part of the core VR Juggler library or would prefer to see them as something written at a higher level using VR Juggler as a basis. No one wants to see talented people doing a lot of work only to have it rejected because it doesn't fit with the intended design and use of a given project. (This is not intended to discourage people from trying to extend the design of VR Juggler but instead to suggest that VR Juggler be used as a <emphasis>basis</emphasis> for more complex tools when appropriate.)</para>
                  <para>After your proposal has been refined and heartily accepted, it's time for you to get to work on making the changes. Periodic progress reports are helpful so that the developers know that you are still hard at work and have not given up for lack of time or resources. Posting developmental patches at key stages helps too because the patches can be tested by other developers who can then provide feedback and bug reports.</para>
                  <para>Once your changes are ready (or some stage of your changes is ready to be committed), post your triumphant message with the attached patches. After all the traffic generated because of your work, the committers will no doubt jump at the chance to commit your changes and make them available to the community of users.</para>
               </section>
            </section>
         </section>
         <section id="get-commit-access-sect">
            <title>How to Become a VR Juggler Committer</title>
            <para>We are interested in expanding the list of official VR Juggler team members (i.e., developers with commit access). As an OpenSource project, VR Juggler is just getting started, but the current group has been working together successfully on the project for a long time. As more people become interested in the project and in furthering its goals, we hope to see more and more people joining the VR Juggler team.</para>
            <para>If you are interested in getting commit access to the VR Juggler CVS repository, the best way to fulfill your interests is to <ulink url="mailto:vrjuggler-contact@vrjuggler.org">contact us directly</ulink> and let us know you'd like to join. If you have never contributed to VR Juggler before, you should provide us with some examples of your VR Juggler-related work or some basis for why you should be on the team. We will review your request and get back to you promptly. Remember, it's up to you to prove to us how you can make VR Juggler better by having full commit access.</para>
            <para>In the future, we would love to have the opportunity to invite people to join the team based on their contributions (which would be judged primarily on quality rather than on quantity). As part of the process for reviewing submitted patches, we will be watching for promising developers around the world who we would like to see having full commit access to VR Juggler.</para>
         </section>
         <section>
            <title>Why create documentation?</title>
            <para>You, as a part of the Juggler development team, should want to write great documentation. Think of it as an investment to offload work. The more you educate everyone, the better they understand your stuff, the more likely that someone will spot your bugs, add new features, and most importantly use your feature, like you for it, and tell everyone about how cool you are. Do it for the people, but of interest to you is what you personally get back from writing documentation. Not just overwhelming satisfaction for a job well done, and not just an enormous lift of responsibility from not being the only one who understands that obfuscated code segment. It clarifies your thought process, uncovers bugs in your own logic, and produces that same clarity in other people who then love you for it - and in turn want to help you by developing more features and hunt for bugs.</para>
            <para>Don't be lazy, document. It is vital to the success of <emphasis>your</emphasis> project!</para>
         </section>
      </chapter>
   </part>
   <part>
      <title>Tutorials</title>
      <chapter>
         <title>Adding ...</title>
         <para>Chapters here are for tutorials explaining how to add various things. There is already a device driver tutorial in the <emphasis>Programmer's Guide</emphasis>.</para>
      </chapter>
   </part>
   <part>
      <title>Appendices</title>
      <appendix>
         <title>Coding Standard</title>
         <para>New coding standard goes here.</para>
      </appendix>
   </part>
   <index/>
</book>
