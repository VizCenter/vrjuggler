# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2002 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Base configure.in for the Juggler Project external software directory.
# -----------------------------------------------------------------------------
# This file is "compiled" by GNU autoconf to generate the configure script
# that is actually run.
# -----------------------------------------------------------------------------

AC_INIT([VR Juggler external dependencies], [0.0],
        [vrjuggler-devel@lists.sourceforge.net])
AC_PREREQ([2.53])
AC_COPYRIGHT([VR Juggler is (C) Copyright 1998-2003 by Iowa State University])
AC_REVISION([$Revision$])
AC_CONFIG_SRCDIR([ant/lib/ant.jar])
AC_CONFIG_AUX_DIR(../share/config)
DPP_PREREQ([1.99.15])
DPP_INIT

# Define the binary format.
DPP_ABI_SETUP

# -----------------------------------------------------------------------------
# Duplicates of the options for the external C++ dependencies.  We use these
# here so that we can absorb the options that are passed to the configure
# scripts that actually need the information.
# -----------------------------------------------------------------------------
AC_ARG_WITH(audiere,
            [  --with-audiere=<PATH>   Audiere installation directory  [default=/usr/local]],
            [AUDIERE_ROOT="$withval"], [AUDIERE_ROOT='/usr/local'])

AC_ARG_WITH([boost],
            [  --with-boost=<PATH>     Boost installation directory    [default=/usr/local]],
            [BOOST_ROOT="$withval"], [BOOST_ROOT='/usr/local'])

AC_ARG_WITH(boost-includes,
            [  --with-boost-includes=<DIR>
                          Boost header file directory     [default=/usr/local/include]],
            [BOOST_INCLUDES="$withval"], [BOOST_INCLUDES=no])

AC_ARG_WITH(cppdom,
            [  --with-cppdom=<PATH>    CppDOM installation directory   [default=/usr/local]],
            [CPPDOM_ROOT="$withval"], [CPPDOM_ROOT="/usr/local"])

AC_ARG_WITH(cppunit,
            [  --with-cppunit=<PATH>   CppUnit installation directory  [default=]],
            [CPPUNIT_ROOT="$withval"], [CPPUNIT_ROOT=''])

AC_ARG_WITH(cxx-orb,
            [  --with-cxx-orb=<NAME>   Name of C++ ORB to use          [default=omniORB4]
                          Allowed values are:
                            omniORB3, omniORB4, TAO],
            [CXX_ORB_NAME="$withval"], [CXX_ORB_NAME='omniORB4'])

AC_ARG_WITH(cxx-orb-root,
            [  --with-cxx-orb-root=<PATH>                              [default=/usr]
                          Root directory of C++ ORB
                          installation],
            [CXX_ORB_ROOT="$withval"], [CXX_ORB_ROOT='/usr'])

AC_ARG_WITH(cxx-orb-bin,
            [  --with-cxx-orb-bin=<PATH>                               [default=/usr/bin]
                          Path to C++ ORB executables],
            [CXX_ORB_BIN_DIR="$withval"], [CXX_ORB_BIN_DIR='none'])

AC_ARG_WITH(cxx-orb-lib,
            [  --with-cxx-orb-lib=<PATH>                               [default=/usr/lib]
                          Path to C++ ORB libraries],
            [CXX_ORB_LIB_DIR="$withval"], [CXX_ORB_LIB_DIR='none'])

AC_ARG_WITH(gmtl,
            [  --with-gmtl=<PATH>      Prefix where GMTL is installed  [default=/usr/local]],
            [GMTL_ROOT="$withval"], [GMTL_ROOT=/usr/local])

AC_ARG_WITH(gmtl-includes,
            [  --with-gmtl-includes=<DIR>
                          GMTL header file directory      [default=/usr/local/include]],
            [GMTL_INC_DIR="$withval"], [GMTL_INC_DIR="$GMTL_ROOT/include"])

AC_ARG_WITH(nspr,
            [  --with-nspr=<PATH>      NSPR installation directory     [default=/usr]],
            NSPR_ROOT="$withval", NSPR_ROOT='/usr')

AC_ARG_WITH(nspr-includes,
            [  --with-nspr-includes=<DIR>
                          NSPR headers are in DIR         [default=/usr/include]],
            _with_nspr_inc="$withval", _with_nspr_inc="$NSPR_ROOT/include")

AC_ARG_WITH(openal,
            [  --with-openal=<PATH>    OpenAL installation directory   [default=/usr/local]],
            [OPENAL_ROOT="$withval"], [OPENAL_ROOT='/usr/local'])

# -----------------------------------------------------------------------------
# Path setup.
# -----------------------------------------------------------------------------

# $srcdir is the root directory of the Juggler source tree.  To get a value
# for $EXTROOT_ABS, we cd there and save the value of running pwd.  Then
# return to the directory where configure is being run ($topdir).
cd "$srcdir"
EXTROOT_ABS=`pwd`

cd "$EXTROOT_ABS/.."
JUGGLERROOT_ABS=`pwd`
cd "$topdir"

# -----------------------------------------------------------------------------
# System-dependent stuff.
# -----------------------------------------------------------------------------
DPP_WIN32_SETUP
DPP_SYSTEM_SETUP

# -----------------------------------------------------------------------------
# Checks for programs and other stuff.
# -----------------------------------------------------------------------------
VJ_COMPILER_SETUP
DPP_PERL_VER(5.004)
DPP_HAVE_GNU_MAKE([3.78], ,
    [AC_MSG_ERROR([*** The build system requires GNU make 3.78 or newer ***])])
DPP_PROG_INSTALL
AC_PROG_LN_S

DPP_INSTALLER(vrjuggler, 0644, 0755, 0755)

AC_PATH_PROG(PYTHON, python, no)

# Determine the Python version in case we need to install site-specific
# Python packages.
# XXX: Can we ask Python what its site-specific directory name is?
if test "x$PYTHON" != "xno" ; then
   AC_MSG_CHECKING([for Python version])
   changequote(<<, >>)
   PYTHON_VERSION=`$PYTHON -c "import sys; print sys.version[:3]"`
   changequote([, ])
   AC_MSG_RESULT([$PYTHON_VERSION])

   PYTHON_DIR="python$PYTHON_VERSION"
fi

# -----------------------------------------------------------------------------
# Perform extra handling of input from the command line.
# -----------------------------------------------------------------------------
if test "x$BOOST_INCLUDES" = "xno" ; then
   BOOST_INCLUDES="$BOOST_ROOT/include"
fi

# -----------------------------------------------------------------------------
# Deal with installing our external dependencies.
# -----------------------------------------------------------------------------
TARGETS=''

# Brute-force, quicky tests to determine if we need to handle each of the
# optional dependencies.
if test -e "$AUDIERE_ROOT/include/audiere.h" ; then
   TARGETS="$TARGETS audiere"
fi

if test -d "$CPPUNIT_ROOT/include/cppunit" ; then
   TARGETS="$TARGETS cppunit"
fi

if test -e "${_with_nspr_inc}/nspr/nspr.h" ; then
   TARGETS="$TARGETS nspr"
   NSPR_INC_DIR="${_with_nspr_inc}"
fi

if test -d "$OPENAL_ROOT/include/AL" ; then
   TARGETS="$TARGETS openal"
fi

case $CXX_ORB_NAME in
   omniORB3)
      have_cxx_orb='Y'
      orb='omniORB'
      ;;
   omniORB4)
      have_cxx_orb='Y'
      orb='omniORB'
      ;;
   TAO)
      have_cxx_orb='Y'
      orb='TAO'
      ;;
   *)
      have_cxx_orb='N'
      orb='unknown'
      ;;
esac

USE_OMNIPYTHON='N'
OMNIPYTHON=''

if test "x$have_cxx_orb" = "xY" ; then
   if test "x$orb" = "xomniORB" ; then
      if test -d "$CXX_ORB_ROOT/include/$CXX_ORB_NAME" ; then
         TARGETS="$TARGETS $CXX_ORB_NAME"
         OMNIORB_CMDS='catior convertior genior nameclt omkdepend omniMapper omniNames omnicpp omniidl omniidlrun.py'

         if test "x$CXX_ORB_BIN_DIR" = "xnone" ; then
            CXX_ORB_BIN_DIR="$CXX_ORB_ROOT/bin"
         fi

         omniidl_python=`grep -e '#!.*python' $CXX_ORB_BIN_DIR/omniidl | sed -e 's/^#!\(.*\)$/\1/'`
         changequote(<<, >>)
         OMNI_PYTHON_VERSION=`$omniidl_python -c "import sys; print sys.version[:3]"`
         changequote([, ])

         case $omniidl_python in
            *omnipython)
               USE_OMNIPYTHON='Y'
               OMNIPYTHON="$omniidl_python"
               OMNIPYTHON_HOME=`echo $OMNIPYTHON | sed -e 's|^\(.*\)/bin/.*omnipython|\1|'`
               ;;
         esac

         OMNI_PYTHON_DIR="python$OMNI_PYTHON_VERSION"

         if test "x$CXX_ORB_LIB_DIR" = "xnone" ; then
            CXX_ORB_LIB_DIR="$CXX_ORB_ROOT/lib"
         fi
      fi
   elif test "x$orb" = "xTAO" ; then
      if test -d "$CXX_ORB_ROOT/include/tao" ; then
         TARGETS="$TARGETS $CXX_ORB_NAME"

         # XXX: This is obviously a lot of programs to be installing.  I do
         # not know which of these are absolutely required and which can be
         # ignored.
         TAO_CMDS='Basic_Logging_Service Concurrency_Service CosEvent_Service Dump_Schedule Event_Logging_Service Event_Service FT_ReplicationManager Fault_Detector Fault_Notifier IFR_Service ImR_Activator ImplRepo_Service LifeCycle_Service LoadManager LoadMonitor NT_Naming_Service NT_Notify_Service NameService Naming_Service Notify_Logging_Service Notify_Service RTEvent_Logging_Service Scheduling_Service TAO_Service Time_Service_Clerk Time_Service_Server Trading_Service catior consumer ftec ftrt_eventservice ftrtec_factory_service ftrtec_gateway_service nsadd nsdel nslist psdl_tao supplier tao_idl tao_ifr tao_imr gperf'

         if test "x$CXX_ORB_BIN_DIR" = "xnone" ; then
            CXX_ORB_BIN_DIR="$CXX_ORB_ROOT/bin"
         fi

         if test "x$CXX_ORB_LIB_DIR" = "xnone" ; then
            CXX_ORB_LIB_DIR="$CXX_ORB_ROOT/lib"
         fi
      fi
   else
      AC_MSG_ERROR([*** We have a C++ ORB, but we don't know its name! ***])
   fi
fi

# -----------------------------------------------------------------------------
# Do Makefile substitutions.
# -----------------------------------------------------------------------------

if test "x$OS_TYPE" = "xWin32" ; then
    EXTROOT_ABS=`dospath -p "$EXTROOT_ABS"`
    JUGGLERROOT_ABS=`dospath -p "$JUGGLERROOT_ABS"`
    LN_S='cp -pr'
    RM_LN='rm -rf'
else
    RM_LN='rm -f'
fi

DPP_SUBST
AC_SUBST(RM_LN)
AC_SUBST(EXTROOT_ABS)
AC_SUBST(JUGGLERROOT_ABS)
AC_SUBST(TARGETS)

AC_SUBST(BOOST_ROOT)
AC_SUBST(BOOST_INCLUDES)
AC_SUBST(CPPDOM_ROOT)
AC_SUBST(GMTL_ROOT)
AC_SUBST(GMTL_INC_DIR)

AC_SUBST(AUDIERE_ROOT)
AC_SUBST(CPPUNIT_ROOT)
AC_SUBST(CXX_ORB_NAME)
AC_SUBST(CXX_ORB_ROOT)
AC_SUBST(CXX_ORB_BIN_DIR)
AC_SUBST(CXX_ORB_LIB_DIR)
AC_SUBST(NSPR_ROOT)
AC_SUBST(NSPR_INC_DIR)
AC_SUBST(OPENAL_ROOT)

AC_SUBST(OMNIORB_CMDS)
AC_SUBST(PYTHON_DIR)
AC_SUBST(PYTHON_VERSION)
AC_SUBST(OMNI_PYTHON_DIR)
AC_SUBST(OMNI_PYTHON_VERSION)

AC_SUBST(USE_OMNIPYTHON)
AC_SUBST(OMNIPYTHON)
AC_SUBST(OMNIPYTHON_HOME)

AC_SUBST(TAO_CMDS)

AC_CONFIG_FILES(Makefile)

AC_OUTPUT
