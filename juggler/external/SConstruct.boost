#!python
#
# Stupid simple install for boost
#
#
#  This file just hardcodes (and where possible soft codes them) some
# rules (ie. commands) for building and then installing boost.
#
# It would be nice if boost just had a build system, but since
# it don't we are forced to do this crap
#
#
# Base file
import SCons.Environment;   # Get the environment crap
import SCons;
import sys;
import os;
import re;
import string;
import wing.wingdbstub;       # stuff for debugging

pj = os.path.join;

# Globals
boost_base = "boost";

# ##################################################
# Helper methods
# ##################################################
def GetPlatform():
   "Get a platform string"
   if string.find(sys.platform, 'irix') != -1:
      return 'irix'
   elif string.find(sys.platform, 'linux') != -1:
      return 'linux'
   elif string.find(sys.platform, 'cygwin') != -1:
      return 'cygwin'
   elif string.find(os.name, 'win32') != -1:
      return 'win32'
   else:
      return sys.platform
Export('GetPlatform')

def get_files_helper(filelist, dirname, names):
   #print "   " + dirname;
   if 'CVS' in names:
      names.remove('CVS');
   if '.sconsign' in names:
      names.remove('.sconsign');
   filelist += [pj(dirname, f) for f in names if os.path.isfile(pj(dirname,f))];

def GetAllFilesBelow(path):
   """ Returns a list of the full path to all files below the given path"""
   filelist = [];
   os.path.walk(path, get_files_helper, filelist);
   return filelist;   

# ##############################
# Setup methods
# ##############################
def isNeededLibraryFile(filename, match_list):
   """ match_list - List of strings that must match somewhere in name for it to be valid
                  ex: ['debug', 'gcc']
   """
   lib_pat = re.compile('\\.(so|a)[\d.]*$');
   file_only = os.path.basename(filename);
   match = lib_pat.search(file_only);
   if match == None:
      return False;
   for m in match_list:
      if filename.count(m) == 0:
         return False;
   return True;
   
def ExecuteBuildCommand(shellCmd):
   print "Build Command: ", shellCmd;
   cmd_in, cmd_out = os.popen4(shellCmd);

   while 1:
      next_line = cmd_out.readline();        # Read next line
      if not next_line: 
         break;               # Until end of file
      print next_line[:],;    # Print the line
      
   cmd_out.close(); cmd_in.close();

def SetupBoostLibraryHelper(libName, lib_dirname):
   """ Helper that captures all the common steps in building and installing a boost lib
       libName - Descriptive name used for output
       lib_dirname - the lib name under boost/libs/  ex: python
   """
   print "Setting up " + libName;
   build_dir = pj(boost_base, 'libs', lib_dirname, 'build');
   build_command = "cd " + build_dir + "; " + env['bjam'];
   match_list = ['gcc', 'debug'];                            # XXX: Extend here for other build types
   ExecuteBuildCommand(build_command);
   print "Finding %s libraries..."%libName;
   all_lib_files = GetAllFilesBelow(pj(build_dir, 'bin'));
   lib_files = [f for f in all_lib_files if isNeededLibraryFile(f, match_list)];
   for f in lib_files:
      print "  " + f;
   lib_prefix = pj(env["prefix"], 'lib');
   env.Install(lib_prefix, lib_files);
   pass;

def SetupBoostPython(env):
   SetupBoostLibraryHelper("boost python", 'python');
   
def SetupBoostThreads(env):
   SetupBoostLibraryHelper("boost threads", 'thread');

def SetupBoostFileSystem(env):
   SetupBoostLibraryHelper("boost filesystem", 'filesystem');

def SetupBoostRegex(env):
   SetupBoostLibraryHelper("boost regex", 'regex');

def SetupBoostHeaderFiles(env):
   boost_include_dir_path = pj(boost_base, 'boost');
   include_prefix = pj(env["prefix"], 'include');   
   if not os.path.exists(boost_include_dir_path):
      Exit(0);
   else:
      print "Scaning boost include paths...",;
      boost_include_files = GetAllFilesBelow(boost_include_dir_path);
      print "found [%d] files."%len(boost_include_files);
      #print "Final file list:";
      #print boost_include_files;
      for f in boost_include_files:
         # trim off boost_base
         install_dir = pj(include_prefix, os.path.dirname(f)[len(boost_base)+1:]);
         env.Install(install_dir, f);
   pass;
   
# ###############################
# Create builder
# ###############################
help_text = "\n---- Boost crappy installer ----\n";
help_only = SCons.Script.options.help_msg;
env = Environment();

# -- Get command-line arguments --
# Argument for using debug version
optimize = ARGUMENTS.get('debug', 'yes')
   
# Add options
opts = Options(files = ['options.cache', 'options.custom']);

opts.Add('prefix', "What directory should we install to. default: boost/instlinks", "boost/instlinks");
opts.Add('bjam', "Full path to the boost jam executable: default: bjam", "bjam");
opts.Add('boost_base', "Base directory where we can find the boost source: default: boost", "boost");
opts.Add('boost_debug', "Should we use debug versions: default: 1", 1);
opts.Add('boost_python', "Should we install boost python: default: 1", 1);
opts.Add('boost_threads', "Should we install boost threads: default: 1", 1);
opts.Add('boost_filesystem', "Should we install boost filesystem: default: 1", 1);
opts.Add('boost_regex', "Should we install boost regex: default: 1", 1);

#if SCons.Script.SConscript.print_help:
if not SCons.Script.options.help_msg:
   opts.Update(env);
   opts.Save('options.cache', env);

help_text += opts.GenerateHelpText(env);
help_text += """
You can store configuration options in the file: options.custom
This file will be loaded each time.  Note: Options are cached in the file: options.cache.
"""

if not help_only:
   boost_base = env['boost_base'];
   
   if(env["boost_python"]):
      SetupBoostPython(env);
   
   if(env["boost_threads"]):
      SetupBoostThreads(env);
   
   if(env["boost_filesystem"]):
      SetupBoostFileSystem(env);
   
   if(env["boost_regex"]):
      SetupBoostRegex(env); 
   
   SetupBoostHeaderFiles(env);
   
   Default(env['prefix']);


# Define targets
#env.Alias('tests', ['test',]);
#env.Alias('runtests', ['tests',]);

help_text += """
Targets:
   - tests: Build the test suite (and if I was smarter it would run)
   - runtests: If I was really smart this would run then after building
"""

Help(help_text);

# end
